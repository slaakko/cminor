// =================================
// Copyright (c) 2016 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <cminor/ast/Statement.hpp>
[hpp]#include <cminor/parser/ParsingContext.hpp>
[cpp]#include <cminor/parser/Keyword.hpp>
[cpp]#include <cminor/parser/Expression.hpp>
[cpp]#include <cminor/parser/TypeExpr.hpp>
[cpp]#include <cminor/parser/Identifier.hpp>

namespace cminor.parser
{
    [hpp]using namespace cminor::ast;

    grammar StatementGrammar
    {
        using stdlib.identifier;
        using KeywordGrammar.Keyword;
        using ExpressionGrammar.Expression;
        using TypeExprGrammar.TypeExpr;
        using IdentifierGrammar.Identifier;
        using ExpressionGrammar.ArgumentList;

        Statement(ParsingContext* ctx) : StatementNode*
            ::= LabeledStatement(ctx){ value = LabeledStatement; }
            |   ControlStatement(ctx){ value = ControlStatement; }
            |   ExpressionStatement(ctx){ value = ExpressionStatement; }
            |   AssignmentStatement(ctx){ value = AssignmentStatement; }
            |   ConstructionStatement(ctx){ value = ConstructionStatement; }
            |   IncrementStatement(ctx){ value = IncrementStatement; }
            |   DecrementStatement(ctx){ value = DecrementStatement; }
            |   EmptyStatement(ctx){ value = EmptyStatement; }
            ;

        LabelId : std::string
            ::= (identifier - Keyword){ value = identifier; }
            ;

        Label(var std::string label) : LabelNode*
            ::= (LabelId{ label = LabelId; } ':'){ value = new LabelNode(span, label); }
            ;

        LabeledStatement(ParsingContext* ctx) : StatementNode*
            ::= Label:lbl Statement(ctx):stmt{ stmt->SetLabelNode(lbl); value = stmt; }
            ;

        ControlStatement(ParsingContext* ctx) : StatementNode*
            ::= CompoundStatement(ctx){ value = CompoundStatement; }
            |   ReturnStatement(ctx){ value = ReturnStatement; }
            |   IfStatement(ctx){ value = IfStatement; }
            |   WhileStatement(ctx){ value = WhileStatement; }
            |   DoStatement(ctx){ value = DoStatement; }
            |   ForStatement(ctx){ value = ForStatement; }
            |   BreakStatement(ctx){ value = BreakStatement; }
            |   ContinueStatement(ctx){ value = ContinueStatement; }
            ;

        CompoundStatement(ParsingContext* ctx) : CompoundStatementNode*
            ::= (   '{'{ value = new CompoundStatementNode(span); value->SetBeginBraceSpan(span); }
                    (Statement(ctx):stmt{ value->AddStatement(stmt); })*
                    '}'!{ value->SetEndBraceSpan(span); }
                ){ value->GetSpan().SetEnd(span.End()); }
            ;

        ReturnStatement(ParsingContext* ctx) : StatementNode*
            ::= (keyword("return") Expression(ctx)? ';'!){ value = new ReturnStatementNode(span, Expression); }
            ;

        IfStatement(ParsingContext* ctx) : StatementNode*
            ::= (keyword("if") '(' Expression(ctx) ')' Statement(ctx):thens (keyword("else") Statement(ctx):elses)?){ value = new IfStatementNode(span, Expression, thens, elses); }
            ;

        WhileStatement(ParsingContext* ctx) : StatementNode*
            ::= (keyword("while") '('! Expression(ctx)! ')'! Statement(ctx)!){ value = new WhileStatementNode(span, Expression, Statement); }
            ;

        DoStatement(ParsingContext* ctx) : StatementNode*
            ::= (keyword("do") Statement(ctx)! keyword("while")! '('! Expression(ctx)! ')'! ';'!){ value = new DoStatementNode(span, Statement, Expression); }
            ;

        ForStatement(ParsingContext* ctx) : StatementNode*
            ::= (keyword("for") '(' ForInitStatement(ctx)! Expression(ctx)? ';'! ForLoopExpressionStatement(ctx)! ')'! Statement(ctx)!)
            { 
                value = new ForStatementNode(span, ForInitStatement, Expression, ForLoopExpressionStatement, Statement);
            }
            ;

        ForInitStatement(ParsingContext* ctx) : StatementNode*
            ::= AssignmentStatement(ctx){ value = AssignmentStatement; }
            |   ConstructionStatement(ctx){ value = ConstructionStatement; }
            |   EmptyStatement(ctx){ value = EmptyStatement; }
            ;

        ForLoopExpressionStatement(ParsingContext* ctx) : StatementNode*
            ::= IncrementExpressionStatement(ctx){ value = IncrementExpressionStatement; }
            |   DecrementExpressionStatement(ctx){ value = DecrementExpressionStatement; }
            |   AssignmentExpressionStatement(ctx){ value = AssignmentExpressionStatement; }
            |   empty{ value = new EmptyStatementNode(span); }
            ;

        BreakStatement(ParsingContext* ctx) : StatementNode*
            ::= (keyword("break") ';'!){ value = new BreakStatementNode(span); }
            ;

        ContinueStatement(ParsingContext* ctx) : StatementNode*
            ::= (keyword("continue") ';'!){ value = new ContinueStatementNode(span); }
            ;

        AssignmentExpressionStatement(ParsingContext* ctx, var std::unique_ptr<Node> targetExpr) : StatementNode*
            ::= empty{ ctx->PushParsingLvalue(true); } (Expression(ctx):target{ ctx->PopParsingLvalue(); targetExpr.reset(target); } / { ctx->PopParsingLvalue(); } '=' Expression(ctx):source!)
                {
                    value = new AssignmentStatementNode(span, targetExpr.release(), source);
                }
            ;

        AssignmentStatement(ParsingContext* ctx) : StatementNode*
            ::= (AssignmentExpressionStatement(ctx) ';'!){ value = AssignmentExpressionStatement; value->GetSpan().SetEnd(span.End()); }
            ;

        ConstructionStatement(ParsingContext* ctx) : StatementNode*
            ::= TypeExpr(ctx) Identifier!{ value = new ConstructionStatementNode(span, TypeExpr, Identifier); }
                ('(' ArgumentList(ctx, value) ')'! | '=' Expression(ctx)!{ value->AddArgument(Expression); })? ';'!{ value->GetSpan().SetEnd(span.End()); }
            ;

        IncrementExpressionStatement(ParsingContext* ctx, var std::unique_ptr<Node> expr) : StatementNode*
            ::= 
            (   ("++" Expression(ctx):left!){ value = new IncrementStatementNode(span, left); } 
            |   (Expression(ctx):right{ expr.reset(right); } "++"){ value = new IncrementStatementNode(span, expr.release()); }
            ) 
            ;

        IncrementStatement(ParsingContext* ctx) : StatementNode*
            ::= (IncrementExpressionStatement(ctx) ';'!){ value = IncrementExpressionStatement; value->GetSpan().SetEnd(span.End()); }
            ;

        DecrementExpressionStatement(ParsingContext* ctx, var std::unique_ptr<Node> expr) : StatementNode*
            ::= 
            (   ("--" Expression(ctx):left!){ value = new DecrementStatementNode(span, left); } 
            |   (Expression(ctx):right{ expr.reset(right); } "--"){ value = new DecrementStatementNode(span, expr.release()); }
            )
            ;

        DecrementStatement(ParsingContext* ctx) : StatementNode*
            ::= (DecrementExpressionStatement(ctx) ';'!){ value = DecrementExpressionStatement; value->GetSpan().SetEnd(span.End()); }
            ;

        ExpressionStatement(ParsingContext* ctx, var std::unique_ptr<Node> expr) : StatementNode*
            ::= (Expression(ctx){ expr.reset(Expression); } ';'){ value = new ExpressionStatementNode(span, expr.release()); }
            ;

        EmptyStatement(ParsingContext* ctx) : StatementNode*
            ::= ';'{ value = new EmptyStatementNode(span); } 
            ;
    }
}
