// =================================
// Copyright (c) 2016 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <cminor/ast/Expression.hpp>
[hpp]#include <cminor/parser/ParsingContext.hpp>
[cpp]#include <cminor/parser/Literal.hpp>
[cpp]#include <cminor/parser/BasicType.hpp>
[cpp]#include <cminor/parser/Identifier.hpp>
[hpp]#include <cminor/parser/TypeExpr.hpp>
[cpp]#include <cminor/parser/Operator.hpp>

namespace cminor.parser
{
    [hpp]using namespace cminor::ast;

    grammar ExpressionGrammar
    {
        using LiteralGrammar.Literal;
        using BasicTypeGrammar.BasicType;
        using IdentifierGrammar.Identifier;
        using TypeExprGrammar.TypeExpr;

        Expression(ParsingContext* ctx) : Node*
            ::= Disjunction(ctx){ value = Disjunction; }
            ;

        Disjunction(ParsingContext* ctx, var std::unique_ptr<Node> expr, var Span s) : Node*
            ::= 
            (   Conjunction(ctx):left{ expr.reset(left); s = span; }
                (   "||"{ if (ctx->ParsingLvalue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; }
                    Conjunction(ctx):right!{ s.SetEnd(span.End()); expr.reset(new DisjunctionNode(s, expr.release(), right)); }
                )*
            )
            {
                value = expr.release();
            }
            ;

        Conjunction(ParsingContext* ctx, var std::unique_ptr<Node> expr, var Span s) : Node*
            ::= 
            (   BitOr(ctx):left{ expr.reset(left); s = span; }
                (   "&&"{ if (ctx->ParsingLvalue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; }
                    BitOr(ctx):right!{ s.SetEnd(span.End()); expr.reset(new ConjunctionNode(s, expr.release(), right)); }
                )*
            )
            {
                value = expr.release();
            }
            ;

        BitOr(ParsingContext* ctx, var std::unique_ptr<Node> expr, var Span s) : Node*
            ::=
            (   BitXor(ctx):left{ expr.reset(left); s = span; }
                (   ('|' - "||"){ if (ctx->ParsingLvalue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; }
                    BitXor(ctx):right!{ s.SetEnd(span.End()); expr.reset(new BitOrNode(s, expr.release(), right)); }
                )*
            )
            {
                value = expr.release();
            }
            ;

        BitXor(ParsingContext* ctx, var std::unique_ptr<Node> expr, var Span s) : Node*
            ::= 
            (   BitAnd(ctx):left{ expr.reset(left); s = span; }
                (   '^'{ if (ctx->ParsingLvalue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; }
                    BitAnd(ctx):right!{ s.SetEnd(span.End()); expr.reset(new BitXorNode(s, expr.release(), right)); }
                )*
            )
            {
                value = expr.release();
            }
            ;

        BitAnd(ParsingContext* ctx, var std::unique_ptr<Node> expr, var Span s) : Node*
            ::=
            (   Equality(ctx):left{ expr.reset(left); s = span; }
                (   ('&' - "&&"){ if (ctx->ParsingLvalue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; }
                    Equality(ctx):right!{ s.SetEnd(span.End()); expr.reset(new BitAndNode(s, expr.release(), right)); }
                )*
            )
            {
                value = expr.release();
            }
            ;

        Equality(ParsingContext* ctx, var std::unique_ptr<Node> expr, var Span s, var Operator op) : Node*
            ::=
            (   Relational(ctx):left{ expr.reset(left); s = span; }
                (
                    (   "=="{ if (ctx->ParsingLvalue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else op = Operator::eq; }
                    |   "!="{ if (ctx->ParsingLvalue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else op = Operator::neq; }
                    )
                    Relational(ctx):right!
                    { 
                        s.SetEnd(span.End()); 
                        switch (op)
                        {
                            case Operator::eq: expr.reset(new EqualNode(s, expr.release(), right)); break;
                            case Operator::neq: expr.reset(new NotEqualNode(s, expr.release(), right)); break;
                        }
                    }
                )*
            )
            {
                value = expr.release();
            }
            ;

        Relational(ParsingContext* ctx, var std::unique_ptr<Node> expr, var Span s, var Operator op) : Node*
            ::=
            (   Shift(ctx):left{ expr.reset(left); s = span; }
                (
                    (   ("<=" - "<=>"){ if (ctx->ParsingLvalue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else { op = Operator::lessOrEq; ctx->PushParsingIsOrAs(false); } }
                    |   ">="{ if (ctx->ParsingLvalue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else { op = Operator::greaterOrEq; ctx->PushParsingIsOrAs(false); } }
                    |   ('<' - ("<<" | "<=>")){ if (ctx->ParsingLvalue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else { op = Operator::less; ctx->PushParsingIsOrAs(false); } }
                    |   ('>' - ">>"){ if (ctx->ParsingLvalue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else { op = Operator::greater; ctx->PushParsingIsOrAs(false); } }
                    |   (keyword("is"){ if (ctx->ParsingLvalue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else { op = Operator::is; ctx->PushParsingIsOrAs(true); } }  
                        TypeExpr(ctx):isType)
                    |   (keyword("as"){ if (ctx->ParsingLvalue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else { op = Operator::as; ctx->PushParsingIsOrAs(true); } } 
                        TypeExpr(ctx):asType)
                    )
                    (Shift(ctx):right | empty{ if (!ctx->ParsingIsOrAs()) pass = false; })
                    { 
                        ctx->PopParsingIsOrAs();
                        s.SetEnd(span.End()); 
                        switch (op)
                        {
                            case Operator::lessOrEq: expr.reset(new LessOrEqualNode(s, expr.release(), right)); break;
                            case Operator::greaterOrEq: expr.reset(new GreaterOrEqualNode(s, expr.release(), right)); break;
                            case Operator::less: expr.reset(new LessNode(s, expr.release(), right)); break;
                            case Operator::greater: expr.reset(new GreaterNode(s, expr.release(), right)); break;
                            case Operator::is: expr.reset(new IsNode(s, expr.release(), isType)); break;
                            case Operator::as: expr.reset(new AsNode(s, expr.release(), asType)); break;
                        }
                    }
                )*
            )
            {
                value = expr.release();
            }
            ;

        Shift(ParsingContext* ctx, var std::unique_ptr<Node> expr, var Span s, var Operator op) : Node*
            ::=
            (   Additive(ctx):left{ expr.reset(left); s = span; }
                (
                    (   "<<"{ if (ctx->ParsingLvalue()) pass = false; else op = Operator::shiftLeft; }
                    |   ">>"{ if (ctx->ParsingLvalue()) pass = false; else op = Operator::shiftRight; }
                    )
                    empty{ ctx->BeginParsingArguments(); } Additive(ctx):right!
                    { 
                        s.SetEnd(span.End()); 
                        switch (op)
                        {
                            case Operator::shiftLeft: expr.reset(new ShiftLeftNode(s, expr.release(), right)); break;
                            case Operator::shiftRight: expr.reset(new ShiftRightNode(s, expr.release(), right)); break;
                        }
                        ctx->EndParsingArguments();
                    }
                    /
                    {
                        ctx->EndParsingArguments();
                    }
                )*
            )
            {
                value = expr.release();
            }
            ;

        Additive(ParsingContext* ctx, var std::unique_ptr<Node> expr, var Span s, var Operator op) : Node*
            ::=
            (   Multiplicative(ctx):left{ expr.reset(left); s = span; }
                (
                    (   '+'{ if (ctx->ParsingLvalue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else op = Operator::plus; }
                    |   '-'{ if (ctx->ParsingLvalue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else op = Operator::minus; }
                    )
                    Multiplicative(ctx):right!
                    { 
                        s.SetEnd(span.End()); 
                        switch (op)
                        {
                            case Operator::plus: expr.reset(new AddNode(s, expr.release(), right)); break;
                            case Operator::minus: expr.reset(new SubNode(s, expr.release(), right)); break;
                        }
                    }
                )*
            )
            {
                value = expr.release();
            }
            ;

        Multiplicative(ParsingContext* ctx, var std::unique_ptr<Node> expr, var Span s, var Operator op) : Node*
            ::=
            (   Prefix(ctx):left{ expr.reset(left); s = span; }
                (
                    (   '*'{ if (ctx->ParsingLvalue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else op = Operator::mul; }
                    |   '/'{ if (ctx->ParsingLvalue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else op = Operator::div; }
                    |   '%'{ if (ctx->ParsingLvalue() || ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else op = Operator::rem; }
                    )
                    Prefix(ctx):right!
                    { 
                        s.SetEnd(span.End()); 
                        switch (op)
                        {
                            case Operator::mul: expr.reset(new MulNode(s, expr.release(), right)); break;
                            case Operator::div: expr.reset(new DivNode(s, expr.release(), right)); break;
                            case Operator::rem: expr.reset(new RemNode(s, expr.release(), right)); break;
                        }
                    }
                )*
            )
            {
                value = expr.release();
            }
            ;

        Prefix(ParsingContext* ctx, var Span s, var Operator op) : Node*
            ::= (
                    (   '-'{ s = span; if (ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else op = Operator::minus; }
                    |   '+'{ s = span; if (ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else op = Operator::plus; }
                    |   ('!' - "!="){ s = span; if (ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else op = Operator::not_; }
                    |   '~'{ s = span; if (ctx->ParsingSimpleStatement() && !ctx->ParsingArguments()) pass = false; else op = Operator::complement; }
                    )
                    Prefix(ctx):prefix
                    {
                        s.SetEnd(span.End());
                        switch (op)
                        {
                            case Operator::minus: value = new UnaryMinusNode(s, prefix); break;
                            case Operator::plus: value = new UnaryPlusNode(s, prefix); break;
                            case Operator::not_: value = new NotNode(s, prefix); break;
                            case Operator::complement: value = new ComplementNode(s, prefix); break;
                        }
                    }
                )
                |   Postfix(ctx){ value = Postfix; }
            ;

        Postfix(ParsingContext* ctx, var std::unique_ptr<Node> expr, var Span s) : Node*
            ::=
            (   Primary(ctx){ s = span; expr.reset(Primary); }
                (   '.' 
                    Identifier:dotMemberId{ s.SetEnd(span.End()); expr.reset(new DotNode(s, expr.release(), dotMemberId)); } 
                )*
            )
            {
                value = expr.release();
            }
            ;

        Primary(ParsingContext* ctx) : Node*
            ::= ('(' Expression(ctx) ')'){ value = Expression; }
            |   Literal{ value = Literal; }
            |   BasicType{ value = BasicType; }
            |   Identifier{ value = Identifier; }
            ;

        ArgumentList(ParsingContext* ctx, Node* node)
            ::= ExpressionList(ctx, node)?
            ;

        ExpressionList(ParsingContext* ctx, Node* node)
            ::= empty{ ctx->BeginParsingArguments(); } (Expression(ctx):arg{ node->AddArgument(arg); } % ','){ ctx->EndParsingArguments(); } / { ctx->EndParsingArguments(); }
            ;
    }
}
