// =================================
// Copyright (c) 2016 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <cminor/ast/Project.hpp>

namespace cminor.parser
{
    [hpp]using namespace cminor::ast;

    grammar ProjectGrammar
    {
        using stdlib.qualified_id;
        using stdlib.spaces_and_comments;
        skip spaces_and_comments;

        Project(std::string config) : Project*
            ::= keyword("project") qualified_id ';'{ value = new Project(qualified_id, fileName, config); }
                (Declaration{ value->AddDeclaration(Declaration); })*
            ;

        Declaration : ProjectDeclaration*
            ::= AssemblyReferenceDeclaration{ value = AssemblyReferenceDeclaration; }
            |   SourceFileDeclaration{ value = SourceFileDeclaration; }
            |   TargetDeclaration{ value = TargetDeclaration; }
            ;

        AssemblyReferenceDeclaration : ProjectDeclaration*
            ::= (keyword("reference") FilePath! ';'!){ value = new AssemblyReferenceDeclaration(FilePath); }
            ;

        SourceFileDeclaration : ProjectDeclaration*
            ::= (keyword("source") FilePath! ';'!){ value = new SourceFileDeclaration(FilePath); }
            ;

        TargetDeclaration : ProjectDeclaration*
            ::= (keyword("target") '='! Target! ';'!){ value = new TargetDeclaration(Target); }
            ;

        Target : Target
            ::= keyword("program"){ value = Target::program; }
            |   keyword("library"){ value = Target::library; }
            ;

        FilePath: std::string
            ::= token('<' ([^>]+){ value = std::string(matchBegin, matchEnd); } '>'!)
            ;
    }
}
