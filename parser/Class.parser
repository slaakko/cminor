// =================================
// Copyright (c) 2016 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <cminor/ast/Class.hpp>
[hpp]#include <cminor/parser/ParsingContext.hpp>
[cpp]#include <cminor/parser/Specifier.hpp>
[cpp]#include <cminor/parser/Identifier.hpp>
[cpp]#include <cminor/parser/TypeExpr.hpp>
[cpp]#include <cminor/parser/Expression.hpp>
[cpp]#include <cminor/parser/Statement.hpp>
[cpp]#include <cminor/parser/Parameter.hpp>
[cpp]#include <cminor/parser/Function.hpp>

namespace cminor.parser
{
    [hpp]using namespace cminor::ast;

    grammar ClassGrammar
    {
        using SpecifierGrammar.Specifiers;
        using IdentifierGrammar.Identifier;
        using IdentifierGrammar.QualifiedId;
        using TypeExprGrammar.TypeExpr;
        using ExpressionGrammar.ArgumentList;
        using StatementGrammar.CompoundStatement;
        using ParameterGrammar.ParameterList;
        using FunctionGrammar.FunctionGroupId;
        using FunctionGrammar.Attributes;
        using stdlib.identifier;

        Class(ParsingContext* ctx) : ClassNode*
            ::= Specifiers keyword("class") Identifier{ value = new ClassNode(span, Specifiers, Identifier); }
                InheritanceAndInterfaces(ctx, value)? '{'! ClassContent(ctx, value) '}'!
            ;

        InheritanceAndInterfaces(ParsingContext* ctx, ClassNode* classNode)
            ::= ':' 
            (   empty{ ctx->BeginParsingTypeExpr(); } 
                BaseClassOrInterface(ctx){ classNode->AddBaseClassOrInterface(BaseClassOrInterface); ctx->EndParsingTypeExpr(); } / { ctx->EndParsingTypeExpr(); }
            )  % ','
            ;

        BaseClassOrInterface(ParsingContext* ctx) : Node*
            ::= QualifiedId{ value = QualifiedId; }
            ;

        ClassContent(ParsingContext* ctx, ClassNode* classNode)
            ::= (ClassMember(ctx, classNode){ classNode->AddMember(ClassMember); })*
            ;

        ClassMember(ParsingContext* ctx, ClassNode* classNode) : Node*
            ::= StaticConstructor(ctx, classNode){ value = StaticConstructor; }
            |   Constructor(ctx, classNode){ value = Constructor; }
            |   MemberFunction(ctx, classNode){ value= MemberFunction; }
            |   MemberVariable(ctx){ value = MemberVariable; }
            |   Property(ctx){ value = Property; }
            ;

        StaticConstructor(ParsingContext* ctx, ClassNode* classNode, var AttributeMap attributeMap, var std::unique_ptr<IdentifierNode> id) : StaticConstructorNode*
            ::= (Attributes(&attributeMap)? Specifiers Identifier{ id.reset(Identifier); } '(' ')')
                { 
                    if (id->Str() != classNode->Id()->Str()) pass = false; else if (!HasStaticSpecifier(Specifiers)) pass = false; 
                    else { value = new StaticConstructorNode(span, Specifiers); value->SetAttributes(attributeMap); }
                }
                CompoundStatement(ctx){ value->SetBody(CompoundStatement); }
            ;

        Constructor(ParsingContext* ctx, ClassNode* classNode, var AttributeMap attributeMap, var std::unique_ptr<IdentifierNode> id, var std::unique_ptr<ConstructorNode> ctor) : Node*
            ::= (Attributes(&attributeMap)? Specifiers Identifier{ id.reset(Identifier); })
                { if (id->Str() != classNode->Id()->Str()) pass = false; else { ctor.reset(new ConstructorNode(span, Specifiers)); ctor->SetAttributes(attributeMap); } }
                ParameterList(ctx, ctor.get()) 
                (':' Initializer(ctx){ ctor->SetInitializer(Initializer); })? 
                CompoundStatement(ctx){ ctor->SetBody(CompoundStatement); value = ctor.release();  }
            ;

        Initializer(ParsingContext* ctx) : InitializerNode*
            ::= keyword("this", identifier){ value = new ThisInitializerNode(span); }'('! ArgumentList(ctx, value):thisArgs! ')'!
            |   keyword("base", identifier){ value = new BaseInitializerNode(span); } '('! ArgumentList(ctx, value):baseArgs! ')'!
            ;

        MemberFunction(ParsingContext* ctx, var AttributeMap attributeMap, ClassNode* classNode, var std::unique_ptr<MemberFunctionNode> memFun, var std::unique_ptr<IdentifierNode> qid) : Node*
            ::= (Attributes(&attributeMap)? Specifiers TypeExpr(ctx) FunctionGroupId(ctx))
                { 
                    memFun.reset(new MemberFunctionNode(span, Specifiers, TypeExpr, FunctionGroupId)); 
                    memFun->SetAttributes(attributeMap); 
                } 
                ParameterList(ctx, memFun.get()) 
                (CompoundStatement(ctx){ memFun->SetBody(CompoundStatement); } | ';' ){ value = memFun.release(); }
            ;

        MemberVariable(ParsingContext* ctx) : Node*
            ::= (Specifiers TypeExpr(ctx) Identifier ';'){ value = new MemberVariableNode(span, Specifiers, TypeExpr, Identifier); }
            ;

        Property(ParsingContext* ctx, var std::unique_ptr<Node> property) : Node*
            ::= ((Specifiers TypeExpr(ctx) Identifier){ property.reset(new PropertyNode(span, Specifiers, TypeExpr, Identifier)); } '{' GetterOrSetter(ctx, property.get())+ '}') 
            { 
                value = property.release();
            }
            ;

        GetterOrSetter(ParsingContext* ctx, Node* subject)
            ::= keyword("get") CompoundStatement(ctx):getter{ subject->SetGetter(getter); }
            |   keyword("set") CompoundStatement(ctx):setter{ subject->SetSetter(setter); }
            ;
    }
}
