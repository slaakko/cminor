// =================================
// Copyright (c) 2016 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <cminor/ast/CompileUnit.hpp>
[hpp]#include <cminor/parser/ParsingContext.hpp>
[cpp]#include <cminor/parser/Identifier.hpp>
[cpp]#include <cminor/parser/Function.hpp>
[cpp]#include <cminor/parser/Class.hpp>

namespace cminor.parser
{
    [hpp]using namespace cminor::ast;

    grammar CompileUnitGrammar
    {
        using stdlib.spaces_and_comments;
        using IdentifierGrammar.Identifier;
        using IdentifierGrammar.QualifiedId;
        using FunctionGrammar.Function;
        using ClassGrammar.Class;
        skip spaces_and_comments;

        CompileUnit(ParsingContext* ctx) : CompileUnitNode*
            ::= empty{ value = new CompileUnitNode(span, fileName); }
                NamespaceContent(ctx, value, value->GlobalNs())
            ;

        NamespaceContent(ParsingContext* ctx, CompileUnitNode* compileUnit, NamespaceNode* ns)
            ::= UsingDirectives(ctx, ns)
                Definitions(ctx, compileUnit, ns)
            ;

        UsingDirectives(ParsingContext* ctx, NamespaceNode* ns)
            ::= UsingDirective(ctx, ns)*
            ;

        UsingDirective(ParsingContext* ctx, NamespaceNode* ns)
            ::= UsingAliasDirective{ ns->AddMember(UsingAliasDirective); }
            |   UsingNamespaceDirective{ ns->AddMember(UsingNamespaceDirective); }
            ;

        UsingAliasDirective(var std::unique_ptr<IdentifierNode> id) : Node*
            ::= (keyword("using") Identifier{ id.reset(Identifier); } '=' QualifiedId! ';'!){ value = new AliasNode(span, id.release(), QualifiedId); }
            ;

        UsingNamespaceDirective : Node*
            ::= (keyword("using") QualifiedId! ';'!){ value = new NamespaceImportNode(span, QualifiedId); }
            ;

        Definitions(ParsingContext* ctx, CompileUnitNode* compileUnit, NamespaceNode* ns)
            ::= (Definition(ctx, compileUnit, ns){ ns->AddMember(Definition); })*
            ;

        Definition(ParsingContext* ctx, CompileUnitNode* compileUnit, NamespaceNode* ns) : Node*
            ::= NamespaceDefinition(ctx, compileUnit, ns){ value = NamespaceDefinition; }
            |   FunctionDefinition(ctx, compileUnit){ value = FunctionDefinition; }
            |   ClassDefinition(ctx, compileUnit){ value = ClassDefinition; }
            ;

        NamespaceDefinition(ParsingContext* ctx, CompileUnitNode* compileUnit, NamespaceNode* ns) : NamespaceNode*
            ::= (keyword("namespace") QualifiedId!){ value = new NamespaceNode(span, QualifiedId); } '{'! NamespaceContent(ctx, compileUnit, value)! '}'!
            ;

        FunctionDefinition(ParsingContext* ctx, CompileUnitNode* compileUnit) : FunctionNode*
            ::= Function(ctx){ value = Function; value->SetCompileUnit(compileUnit); }
            ;

        ClassDefinition(ParsingContext* ctx, CompileUnitNode* compileUnit) : ClassNode*
            ::= Class(ctx){ value = Class; }
            ;
    }
}
