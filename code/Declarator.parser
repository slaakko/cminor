// =================================
// Copyright (c) 2017 Seppo Laakko
// Distributed under the MIT license
// =================================

[cpp]#include <cminor/code/Expression.hpp>
[cpp]#include <cminor/code/Declaration.hpp>
[cpp]#include <cminor/util/TextUtils.hpp>
[hpp]#include <cminor/codedom/Declaration.hpp>
[cpp]#include <cminor/codedom/Type.hpp>

namespace cminor.code
{
    [cpp]using cminor::util::Trim;
    [cpp]using namespace cminor::codedom;

    grammar DeclaratorGrammar
    {
        using ExpressionGrammar.ConstantExpression;
        using ExpressionGrammar.IdExpression;
        using ExpressionGrammar.ExpressionList;
        using ExpressionGrammar.AssignmentExpression;
        using DeclarationGrammar.TypeName;
        using DeclarationGrammar.TypeSpecifier;
        using DeclarationGrammar.CVQualifier;

        InitDeclaratorList(var std::unique_ptr<InitDeclaratorList> idl): cminor::codedom::InitDeclaratorList*
                        ::= empty{ idl.reset(new InitDeclaratorList()); }
                            (InitDeclarator{ idl->Add(InitDeclarator); } % ','){ value = idl.release(); }
                        ;

        InitDeclarator: cminor::codedom::InitDeclarator*
                        ::= (Declarator Initializer?)
                        {
                            value = new InitDeclarator(Declarator, Initializer);
                        }
                        ;

        Declarator: std::u32string
                        ::=
                        (   DirectDeclarator
                        |   PtrOperator Declarator
                        )
                        {
                            value = Trim(std::u32string(matchBegin, matchEnd));
                        }
                        ;

        DirectDeclarator(var std::unique_ptr<CppObject> o)
                        ::= DeclaratorId
                        (
                            '[' (ConstantExpression{ o.reset(ConstantExpression); })? ']'
                            '(' Declarator ')'
                        )*
                        ;

        DeclaratorId(var std::unique_ptr<CppObject> o)
                        ::= IdExpression{ o.reset(IdExpression); }
                        |   TypeName{ o.reset(TypeName); }
                        ;

        TypeId(var std::unique_ptr<TypeId> ti): cminor::codedom::TypeId*
                        ::= empty{ ti.reset(new TypeId()); }
                        (
                            (TypeSpecifierSeq(ti.get()) | TypeName{ ti->Add(TypeName); })
                            (AbstractDeclarator{ ti->Declarator() = AbstractDeclarator; })?
                        ){ value = ti.release(); }
                        ;

        Type(var std::unique_ptr<Type> t): cminor::codedom::Type*
                        ::= empty{ t.reset(new Type()); }
                            (   (TypeSpecifier{ t->Add(TypeSpecifier); })+
                            |   TypeName{ t->Add(TypeName); }
                            ){ value = t.release(); }
                        ;

        TypeSpecifierSeq(cminor::codedom::TypeId* typeId)
                        ::= (TypeSpecifier{ typeId->Add(TypeSpecifier); })+
                        ;

        AbstractDeclarator: std::u32string
                        ::=
                        (   PtrOperator AbstractDeclarator?
                        |   DirectAbstractDeclarator
                        )
                        {
                            value = Trim(std::u32string(matchBegin, matchEnd));
                        }
                        ;

        DirectAbstractDeclarator(var std::unique_ptr<CppObject> o)
                        ::=
                        (   '[' (ConstantExpression{ o.reset(ConstantExpression); })? ']'
                        |   '(' AbstractDeclarator ')'
                        )+
                        ;

        PtrOperator     ::= '*' CVQualifierSeq?
                        |   '&'
                        ;

        CVQualifierSeq(var std::unique_ptr<CppObject> o)
                        ::= (CVQualifier{ o.reset(CVQualifier); })+
                        ;

        Initializer: cminor::codedom::Initializer*
                        ::= '=' InitializerClause{ value = new Initializer(InitializerClause, GetEmptyVector()); }
                        |   ('(' ExpressionList ')'){ value = new Initializer(nullptr, ExpressionList); }
                        ;

        InitializerClause: cminor::codedom::AssignInit*
                        ::= AssignmentExpression{  value = new AssignInit(AssignmentExpression); }
                        |   '{'{ value = new AssignInit(nullptr); } InitializerList(value) '}'
                        |   '{' '}'{ value = new AssignInit(nullptr); }
                        ;

        InitializerList(cminor::codedom::AssignInit* init)
                        ::= InitializerClause{ init->Add(InitializerClause); } % ','
                        ;
   }
}
