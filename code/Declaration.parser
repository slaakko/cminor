// =================================
// Copyright (c) 2017 Seppo Laakko
// Distributed under the MIT license
// =================================

[cpp]#include <cminor/code/Declarator.hpp>
[cpp]#include <cminor/code/Identifier.hpp>
[cpp]#include <cminor/code/Expression.hpp>
[hpp]#include <cminor/codedom/Declaration.hpp>
[cpp]#include <cminor/codedom/Type.hpp>

namespace cminor.code
{
    [cpp]using namespace cminor::codedom;

    grammar DeclarationGrammar
    {
        using stdlib.identifier;
        using DeclaratorGrammar.InitDeclaratorList;
        using DeclaratorGrammar.TypeId;
        using IdentifierGrammar.Identifier;
        using IdentifierGrammar.QualifiedId;
        using ExpressionGrammar.AssignmentExpression;
        
        BlockDeclaration: cminor::codedom::CppObject*
                        ::= NamespaceAliasDefinition{ value = NamespaceAliasDefinition; }
                        |   UsingDirective{ value = UsingDirective; }
                        |   UsingDeclaration{ value = UsingDeclaration; }
                        |   SimpleDeclaration{ value = SimpleDeclaration; }
                        ;
                                    
        SimpleDeclaration(var std::unique_ptr<SimpleDeclaration> sd): cminor::codedom::SimpleDeclaration*
                        ::= empty{ sd.reset(new SimpleDeclaration()); }
                            (DeclSpecifierSeq(sd.get())? (InitDeclaratorList{ sd->SetInitDeclaratorList(InitDeclaratorList); })? ';'){ value = sd.release(); }
                        ;
                                        
        DeclSpecifierSeq(cminor::codedom::SimpleDeclaration* declaration)
                        ::= (DeclSpecifier{ declaration->Add(DeclSpecifier); })+ 
                        |   TypeName{ declaration->Add(TypeName); }
                        ;
                                        
        DeclSpecifier: cminor::codedom::DeclSpecifier*
                        ::= StorageClassSpecifier{ value = StorageClassSpecifier; }
                        |   TypeSpecifier{ value = TypeSpecifier; }
                        |   Typedef{ value = Typedef; }
                        ;
                                        
        StorageClassSpecifier: cminor::codedom::StorageClassSpecifier*
                        ::= keyword_list(identifier, 
                            ["auto", "register", "static", "extern", "mutable"])
                        {
                            value = new StorageClassSpecifier(std::u32string(matchBegin, matchEnd));
                        }
                        ;
                                        
        TypeSpecifier: cminor::codedom::TypeSpecifier*
                        ::= SimpleTypeSpecifier{ value = SimpleTypeSpecifier; }
                        |   CVQualifier{ value = CVQualifier; }
                        ;

        SimpleTypeSpecifier: cminor::codedom::TypeSpecifier*
                        ::= keyword_list(identifier,
                            ["char", "wchar_t", "bool", "short", "int", "long", "signed", "unsigned", "float", "double", "void"])
                            {
                                value = new TypeSpecifier(std::u32string(matchBegin, matchEnd));
                            }
                        ;
                        
        TypeName: cminor::codedom::TypeName*
                        ::= QualifiedId{ value = new cminor::codedom::TypeName(std::u32string(matchBegin, matchEnd)); }('<'{ value->IsTemplate() = true; } TemplateArgumentList(value) '>')?
                        ;
                        
        TemplateArgumentList(cminor::codedom::TypeName* typeName)
                        ::= TemplateArgument{ typeName->AddTemplateArgument(TemplateArgument); } % ','
                        ;
                        
        TemplateArgument: cminor::codedom::CppObject*
                        ::= TypeId{ value = TypeId; }
                        |   AssignmentExpression{ value = AssignmentExpression; }
                        ;
    
        Typedef: cminor::codedom::DeclSpecifier*
                        ::= keyword("typedef")
                        {
                            value = new Typedef(); 
                        }
                        ;

        CVQualifier: cminor::codedom::TypeSpecifier*
                        ::= keyword("const"){ value = new Const(); }
                        |   keyword("volatile"){ value = new Volatile(); }
                        ;
                        
        NamespaceAliasDefinition: cminor::codedom::UsingObject*
                        ::= keyword("namespace") Identifier '=' QualifiedId ';'
                        {
                            value = new NamespaceAlias(Identifier, QualifiedId); 
                        }
                        ;
                        
        UsingDeclaration: cminor::codedom::UsingObject*
                        ::= keyword("using") QualifiedId ';'
                        {
                            value = new UsingDeclaration(QualifiedId); 
                        }
                        ;
                        
        UsingDirective: cminor::codedom::UsingObject*
                        ::= keyword("using") keyword("namespace") QualifiedId ';'
                        {
                            value = new UsingDirective(QualifiedId); 
                        }
                        ;
    }
}
