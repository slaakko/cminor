// =================================
// Copyright (c) 2017 Seppo Laakko
// Distributed under the MIT license
// =================================

[hpp]#include <cminor/parsing/Primitive.hpp>
[hpp]#include <cminor/parsing/Keyword.hpp>
[cpp]#include <cminor/syntax/Element.hpp>

namespace cminor.syntax
{
    grammar PrimitiveGrammar
    {
        using stdlib.char;
        using stdlib.string;
        using stdlib.escape;
        using stdlib.int;
        using stdlib.uint;
        using stdlib.hexuint;
        using ElementGrammar.QualifiedId;
        using ElementGrammar.StringArray;

        Primitive: cminor::parsing::Parser*
                        ::= Char{ value = Char; }
                        |   String{ value = String; }
                        |   CharSet{ value = CharSet; }
                        |   Keyword{ value = Keyword; }
                        |   KeywordList{ value = KeywordList; }
                        |   Range{ value = Range; }
                        |   Empty{ value = Empty; }
                        |   Space{ value = Space; }
                        |   AnyChar{ value = AnyChar; }
                        |   Letter{ value = Letter; }
                        |   Digit{ value = Digit; }
                        |   HexDigit{ value = HexDigit; }
                        |   UpperLetter{ value = UpperLetter; }
                        |   LowerLetter{ value = LowerLetter; }
                        |   TitleLetter{ value = TitleLetter; }
                        |   ModifierLetter{ value = ModifierLetter; }
                        |   OtherLetter{ value = OtherLetter; }
                        |   CasedLetter{ value = CasedLetter; }
                        |   Mark{ value = Mark; }
                        |   NonspacingMark{ value = NonspacingMark; }
                        |   EnclosingMark{ value = EnclosingMark; }
                        |   SpacingMark{ value = SpacingMark; }
                        |   Number{ value = Number; }
                        |   DecimalNumber{ value = DecimalNumber; }
                        |   LetterNumber{ value = LetterNumber; }
                        |   OtherNumber{ value = OtherNumber; }
                        |   Punctuation{ value = Punctuation; }
                        |   ConnectorPunctuation{ value = ConnectorPunctuation; }
                        |   DashPunctuation{ value = DashPunctuation; }
                        |   OpenPunctuation{ value = OpenPunctuation; }
                        |   ClosePunctuation{ value = ClosePunctuation; }
                        |   InitialPunctuation{ value = InitialPunctuation; }
                        |   FinalPunctuation{ value = FinalPunctuation; }
                        |   OtherPunctuation{ value = OtherPunctuation; }
                        |   Symbol{ value = Symbol; }
                        |   MathSymbol{ value = MathSymbol; }
                        |   CurrencySymbol{ value = CurrencySymbol; }
                        |   ModifierSymbol{ value = ModifierSymbol; }
                        |   OtherSymbol{ value = OtherSymbol; }
                        |   Separator{ value = Separator;}
                        |   SpaceSeparator{ value = SpaceSeparator; }
                        |   LineSeparator{ value = LineSeparator; }
                        |   ParagraphSeparator{ value = ParagraphSeparator; }
                        |   Other{ value = Other; }
                        |   Control{ value = Control; }
                        |   Format{ value = Format; }
                        |   Surrogate{ value = Surrogate; }
                        |   PrivateUse{ value = PrivateUse; }
                        |   Unassigned{ value = Unassigned; }
                        |   Graphic{ value = Graphic; }
                        |   BaseChar{ value = BaseChar; }
                        |   Alphabetic{ value = Alphabetic; }
                        |   IdStart{ value = IdStart; }
                        |   IdCont{ value = IdCont; }
                        ;

        Char: cminor::parsing::Parser*
                        ::= char:chr{ value = new CharParser(chr); }
                        ;

        String: cminor::parsing::Parser*
                        ::= string:str{ value = new StringParser(str); }
                        ;

        CharSet(var bool inverse, var std::u32string s): cminor::parsing::Parser*
                        ::= token
                            (   '['
                                ('^'{ inverse = true; })?
                                (CharSetRange{ s.append(CharSetRange); })*
                                ']'!
                            )
                            {
                                value = new CharSetParser(s, inverse);
                            }
                            ;

        CharSetRange: std::u32string
                            ::= CharSetChar:first
                            ('-' CharSetChar:last
                                {
                                    value.append(1, first);
                                    value.append(1, '-');
                                    value.append(1, last);
                                }
                            |   empty{ value.append(1, first); }
                            )
                            ;

        CharSetChar: char32_t
                            ::= [^\\\]]{ value = *matchBegin; }
                            |   escape{ value = escape; }
                            ;

        Keyword: cminor::parsing::Parser*
                            ::= keyword("keyword") '('! KeywordBody! ')'!{ value = KeywordBody; }
                            ;

        KeywordBody: cminor::parsing::Parser*
                            ::= string:str
                            (   ',' QualifiedId:continuation!{ value = new KeywordParser(str, continuation); }
                            |   empty{ value = new KeywordParser(str); }
                            )
                            ;

        KeywordList: cminor::parsing::Parser*
                            ::= keyword("keyword_list") '('! KeywordListBody! ')'!{ value = KeywordListBody; }
                            ;

        KeywordListBody(var std::vector<std::u32string> keywords): cminor::parsing::Parser*
                            ::= QualifiedId:selector! ','! StringArray(&keywords)!{ value = new KeywordListParser(selector, keywords); }
                            ;

        Range: cminor::parsing::Parser*
                            ::= (keyword("range") '('! CodePoint:s! ','! CodePoint:e! ')'!){ value = new RangeParser(s, e); }
                            ;

        CodePoint: uint32_t ::= token('x' hexuint:x{ value = x; }) | uint:d{ value = d; }
                            ;

        Empty: cminor::parsing::Parser*
                            ::= keyword("empty"){ value = new EmptyParser(); }
                            ;

        Space: cminor::parsing::Parser*
                            ::= keyword("space"){ value = new SpaceParser(); }
                            ;

        AnyChar: cminor::parsing::Parser*
                            ::= keyword("anychar"){ value = new AnyCharParser(); }
                            ;

        Letter: cminor::parsing::Parser*
                            ::= keyword("letter"){ value = new LetterParser(); }
                            ;

        Digit: cminor::parsing::Parser*
                            ::= keyword("digit"){ value = new DigitParser(); }
                            ;

        HexDigit: cminor::parsing::Parser*
                            ::= keyword("hexdigit"){ value = new HexDigitParser(); }
                            ;

        UpperLetter: cminor::parsing::Parser*
                            ::= keyword("upper_letter"){ value = new UpperLetterParser(); }
                            ;

        LowerLetter: cminor::parsing::Parser*
                            ::= keyword("lower_letter"){ value = new LowerLetterParser(); }
                            ;

        TitleLetter: cminor::parsing::Parser*
                            ::= keyword("title_letter"){ value = new TitleLetterParser(); }
                            ;

        ModifierLetter: cminor::parsing::Parser*
                            ::= keyword("modifier_letter"){ value = new ModifierLetterParser(); }
                            ;

        OtherLetter: cminor::parsing::Parser*
                            ::= keyword("other_letter"){ value = new OtherLetterParser(); }
                            ;

        CasedLetter: cminor::parsing::Parser*
                            ::= keyword("cased_letter"){ value = new CasedLetterParser(); }
                            ;

        Mark: cminor::parsing::Parser*
                            ::= keyword("mark"){ value = new MarkParser(); }
                            ;

        NonspacingMark: cminor::parsing::Parser*
                            ::= keyword("nonspacing_mark"){ value = new NonspacingMarkParser(); }
                            ;

        SpacingMark: cminor::parsing::Parser*
                            ::= keyword("spacing_mark"){ value = new SpacingMarkParser(); }
                            ;

        EnclosingMark: cminor::parsing::Parser*
                            ::= keyword("enclosing_mark"){ value = new EnclosingMarkParser(); }
                            ;

        Number: cminor::parsing::Parser*
                            ::= keyword("numbr"){ value = new NumberParser(); }
                            ;

        DecimalNumber: cminor::parsing::Parser*
                            ::= keyword("decimal_number"){ value = new DecimalNumberParser(); }
                            ;

        LetterNumber: cminor::parsing::Parser*
                            ::= keyword("letter_number"){ value = new LetterNumberParser(); }
                            ;

        OtherNumber: cminor::parsing::Parser*
                            ::= keyword("other_number"){ value = new OtherNumberParser(); }
                            ;

        Punctuation: cminor::parsing::Parser*
                            ::= keyword("punctuation"){ value = new PunctuationParser(); }
                            ;

        ConnectorPunctuation: cminor::parsing::Parser*
                            ::= keyword("connector_punctuation"){ value = new ConnectorPunctuationParser(); }
                            ;

        DashPunctuation: cminor::parsing::Parser*
                            ::= keyword("dash_punctuation"){ value = new DashPunctuationParser(); }
                            ;

        OpenPunctuation: cminor::parsing::Parser*
                            ::= keyword("open_punctuation"){ value = new OpenPunctuationParser(); }
                            ;

        ClosePunctuation: cminor::parsing::Parser*
                            ::= keyword("close_punctuation"){ value = new ClosePunctuationParser(); }
                            ;

        InitialPunctuation: cminor::parsing::Parser*
                            ::= keyword("initial_punctuation"){ value = new InitialPunctuationParser(); }
                            ;

        FinalPunctuation: cminor::parsing::Parser*
                            ::= keyword("final_punctuation"){ value = new FinalPunctuationParser(); }
                            ;

        OtherPunctuation: cminor::parsing::Parser*
                            ::= keyword("other_punctuation"){ value = new OtherPunctuationParser(); }
                            ;

        Symbol: cminor::parsing::Parser*
                            ::= keyword("symbol"){ value = new SymbolParser(); }
                            ;

        MathSymbol: cminor::parsing::Parser*
                            ::= keyword("math_symbol"){ value = new MathSymbolParser(); }
                            ;

        CurrencySymbol: cminor::parsing::Parser*
                            ::= keyword("currency_symbol"){ value = new CurrencySymbolParser(); }
                            ;

        ModifierSymbol: cminor::parsing::Parser*
                            ::= keyword("modifier_symbol"){ value = new ModifierSymbolParser(); }
                            ;

        OtherSymbol: cminor::parsing::Parser*
                            ::= keyword("other_symbol"){ value = new OtherSymbolParser(); }
                            ;

        Separator: cminor::parsing::Parser*
                            ::= keyword("separator"){ value = new SeparatorParser(); }
                            ;

        SpaceSeparator: cminor::parsing::Parser*
                            ::= keyword("space_separator"){ value = new SpaceSeparatorParser(); }
                            ;

        LineSeparator: cminor::parsing::Parser*
                            ::= keyword("line_separator"){ value = new LineSeparatorParser(); }
                            ;

        ParagraphSeparator: cminor::parsing::Parser*
                            ::= keyword("paragraph_separator"){ value = new ParagraphSeparatorParser(); }
                            ;

        Other: cminor::parsing::Parser*
                            ::= keyword("other"){ value = new OtherParser(); }
                            ;

        Control: cminor::parsing::Parser*
                            ::= keyword("control"){ value = new ControlParser(); }
                            ;

        Format: cminor::parsing::Parser*
                            ::= keyword("format"){ value = new FormatParser(); }
                            ;

        Surrogate: cminor::parsing::Parser*
                            ::= keyword("surrogate"){ value = new SurrogateParser(); }
                            ;

        PrivateUse: cminor::parsing::Parser*
                            ::= keyword("private_use"){ value = new PrivateUseParser(); }
                            ;

        Unassigned: cminor::parsing::Parser*
                            ::= keyword("unassigned"){ value = new UnassignedParser(); }
                            ;

        Graphic: cminor::parsing::Parser*
                            ::= keyword("graphic"){ value = new GraphicParser(); }
                            ;

        BaseChar: cminor::parsing::Parser*
                            ::= keyword("basechar"){ value = new BaseCharParser(); }
                            ;

        Alphabetic: cminor::parsing::Parser*
                            ::= keyword("alphabetic"){ value = new AlphabeticParser(); }
                            ;

        IdStart: cminor::parsing::Parser*
                            ::= keyword("idstart"){ value = new IdStartParser(); }
                            ;

        IdCont: cminor::parsing::Parser*
                            ::= keyword("idcont"){ value = new IdContParser(); }
                            ;
    }
}
