using System;
using System.Collections.Generic;
using System.Text.Parsing;
using System.Text.Parsing.CodeDom;

namespace Code
{
    public class BasicTypeGrammar : System.Text.Parsing.Grammar
    {
        public BasicTypeGrammar() : this(new ParsingDomain())
        {
        }
        public BasicTypeGrammar(ParsingDomain parsingDomain) : base("BasicTypeGrammar", parsingDomain.GetNamespaceScope("Code"), parsingDomain)
        {
            Owner = 0;
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public class BasicTypeRule : System.Text.Parsing.RuleParser
        {
            public BasicTypeRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Type";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Type value;
            }
        }
        public override void GetReferencedGrammars()
        {
        }
        public override void CreateRules()
        {
            AddRule(new BasicTypeRule("BasicType", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new AlternativeParser(
                        new AlternativeParser(
                            new AlternativeParser(
                                new AlternativeParser(
                                    new AlternativeParser(
                                        new AlternativeParser(
                                            new AlternativeParser(
                                                new AlternativeParser(
                                                    new AlternativeParser(
                                                        new AlternativeParser(
                                                            new AlternativeParser(
                                                                new AlternativeParser(
                                                                    new AlternativeParser(
                                                                        new ActionParser("",
                                                                            new KeywordParser("bool")),
                                                                        new ActionParser("",
                                                                            new KeywordParser("char"))),
                                                                    new ActionParser("",
                                                                        new KeywordParser("void"))),
                                                                new ActionParser("",
                                                                    new KeywordParser("sbyte"))),
                                                            new ActionParser("",
                                                                new KeywordParser("byte"))),
                                                        new ActionParser("",
                                                            new KeywordParser("short"))),
                                                    new ActionParser("",
                                                        new KeywordParser("ushort"))),
                                                new ActionParser("",
                                                    new KeywordParser("int"))),
                                            new ActionParser("",
                                                new KeywordParser("uint"))),
                                        new ActionParser("",
                                            new KeywordParser("long"))),
                                    new ActionParser("",
                                        new KeywordParser("ulong"))),
                                new ActionParser("",
                                    new KeywordParser("float"))),
                            new ActionParser("",
                                new KeywordParser("double"))),
                        new ActionParser("",
                            new KeywordParser("object"))),
                    new ActionParser("",
                        new KeywordParser("string")))));
        }
    }
}
