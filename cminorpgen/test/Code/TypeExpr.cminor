using System;
using System.Collections.Generic;
using System.Text.Parsing;
using System.Text.Parsing.CodeDom;

namespace Code
{
    public class TypeExprGrammar : System.Text.Parsing.Grammar
    {
        public TypeExprGrammar() : this(new ParsingDomain())
        {
        }
        public TypeExprGrammar(ParsingDomain parsingDomain) : base("TypeExprGrammar", parsingDomain.GetNamespaceScope("Code"), parsingDomain)
        {
            Owner = 0;
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public class TypeExprRule : System.Text.Parsing.RuleParser
        {
            public TypeExprRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "DomObject";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DomObject value;
            }
        }
        public class PrefixTypeExprRule : System.Text.Parsing.RuleParser
        {
            public PrefixTypeExprRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "DomObject";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DomObject value;
            }
        }
        public class PostfixTypeExprRule : System.Text.Parsing.RuleParser
        {
            public PostfixTypeExprRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
            }
        }
        public class PrimaryTypeExprRule : System.Text.Parsing.RuleParser
        {
            public PrimaryTypeExprRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
            }
        }
        public override void GetReferencedGrammars()
        {
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("BasicType", this, "BasicTypeGrammar.BasicType"));
            AddRuleLink(new RuleLink("TemplateId", this, "TemplateGrammar.TemplateId"));
            AddRuleLink(new RuleLink("Identifier", this, "IdentifierGrammar.Identifier"));
            AddRuleLink(new RuleLink("Expression", this, "ExpressionGrammar.Expression"));
            AddRule(new TypeExprRule("TypeExpr", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new NonterminalParser("PrefixTypeExpr", "PrefixTypeExpr", 1))));
            AddRule(new PrefixTypeExprRule("PrefixTypeExpr", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new ActionParser("",
                        new SequenceParser(
                            new KeywordParser("ref"),
                            new NonterminalParser("refExpr", "PostfixTypeExpr", 1))),
                    new ActionParser("",
                        new NonterminalParser("pf", "PostfixTypeExpr", 1)))));
            AddRule(new PostfixTypeExprRule("PostfixTypeExpr", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new NonterminalParser("PrimaryTypeExpr", "PrimaryTypeExpr", 1),
                    new KleeneStarParser(
                        new AlternativeParser(
                            new SequenceParser(
                                new CharParser('.'),
                                new ExpectationParser(
                                    new NonterminalParser("Identifier", "Identifier", 0))),
                            new SequenceParser(
                                new SequenceParser(
                                    new CharParser('['),
                                    new OptionalParser(
                                        new NonterminalParser("size", "Expression", 1))),
                                new ExpectationParser(
                                    new CharParser(']'))))))));
            AddRule(new PrimaryTypeExprRule("PrimaryTypeExpr", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new AlternativeParser(
                        new NonterminalParser("BasicType", "BasicType", 0),
                        new NonterminalParser("TemplateId", "TemplateId", 1)),
                    new NonterminalParser("Identifier", "Identifier", 0))));
        }
    }
}
