using System;
using System.Collections.Generic;
using System.Text.Parsing;
using System.Text.Parsing.CodeDom;

namespace Code
{
    public class LiteralGrammar : System.Text.Parsing.Grammar
    {
        public LiteralGrammar() : this(new ParsingDomain())
        {
        }
        public LiteralGrammar(ParsingDomain parsingDomain) : base("LiteralGrammar", parsingDomain.GetNamespaceScope("Code"), parsingDomain)
        {
            Owner = 0;
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public class LiteralRule : System.Text.Parsing.RuleParser
        {
            public LiteralRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Literal";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Literal value;
            }
        }
        public class BooleanLiteralRule : System.Text.Parsing.RuleParser
        {
            public BooleanLiteralRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Literal";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Literal value;
            }
        }
        public class FloatingLiteralRule : System.Text.Parsing.RuleParser
        {
            public FloatingLiteralRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Literal";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Literal value;
            }
        }
        public class FloatingLiteralValueRule : System.Text.Parsing.RuleParser
        {
            public FloatingLiteralValueRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "string";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public string value;
            }
        }
        public class IntegerLiteralRule : System.Text.Parsing.RuleParser
        {
            public IntegerLiteralRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Literal";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Literal value;
            }
        }
        public class IntegerLiteralValueRule : System.Text.Parsing.RuleParser
        {
            public IntegerLiteralValueRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "string";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public string value;
            }
        }
        public class CharLiteralRule : System.Text.Parsing.RuleParser
        {
            public CharLiteralRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Literal";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Literal value;
            }
        }
        public class StringLiteralRule : System.Text.Parsing.RuleParser
        {
            public StringLiteralRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Literal";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Literal value;
            }
        }
        public class NullLiteralRule : System.Text.Parsing.RuleParser
        {
            public NullLiteralRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Literal";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Literal value;
            }
        }
        public override void GetReferencedGrammars()
        {
        }
        public override void CreateRules()
        {
            AddRule(new LiteralRule("Literal", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new AlternativeParser(
                        new AlternativeParser(
                            new AlternativeParser(
                                new AlternativeParser(
                                    new ActionParser("",
                                        new NonterminalParser("BooleanLiteral", "BooleanLiteral", 0)),
                                    new ActionParser("",
                                        new NonterminalParser("FloatingLiteral", "FloatingLiteral", 0))),
                                new ActionParser("",
                                    new NonterminalParser("IntegerLiteral", "IntegerLiteral", 0))),
                            new ActionParser("",
                                new NonterminalParser("CharLiteral", "CharLiteral", 0))),
                        new ActionParser("",
                            new NonterminalParser("StringLiteral", "StringLiteral", 0))),
                    new ActionParser("",
                        new NonterminalParser("NullLiteral", "NullLiteral", 0)))));
            AddRule(new BooleanLiteralRule("BooleanLiteral", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new ActionParser("",
                        new KeywordParser("true")),
                    new ActionParser("",
                        new KeywordParser("false")))));
            AddRule(new FloatingLiteralRule("FloatingLiteral", GetScope(), Domain.GetNextRuleId(),
                new TokenParser(
                    new SequenceParser(
                        new NonterminalParser("FloatingLiteralValue", "FloatingLiteralValue", 0),
                        new AlternativeParser(
                            new ActionParser("",
                                new CharSetParser("fF")),
                            new ActionParser("",
                                new EmptyParser()))))));
            AddRule(new FloatingLiteralValueRule("FloatingLiteralValue", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new AlternativeParser(
                            new NonterminalParser("FractionalFloatingLiteral", "FractionalFloatingLiteral", 0),
                            new NonterminalParser("ExponentFloatingLiteral", "ExponentFloatingLiteral", 0))))));
            AddRule(new RuleParser("FractionalFloatingLiteral", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new TokenParser(
                        new SequenceParser(
                            new SequenceParser(
                                new SequenceParser(
                                    new OptionalParser(
                                        new NonterminalParser("s0", "DecDigitSequence", 0)),
                                    new CharParser('.')),
                                new NonterminalParser("m", "DecDigitSequence", 0)),
                            new OptionalParser(
                                new NonterminalParser("ExponentPart", "ExponentPart", 0)))),
                    new TokenParser(
                        new SequenceParser(
                            new NonterminalParser("s1", "DecDigitSequence", 0),
                            new CharParser('.'))))));
            AddRule(new RuleParser("ExponentFloatingLiteral", GetScope(), Domain.GetNextRuleId(),
                new TokenParser(
                    new SequenceParser(
                        new NonterminalParser("DecDigitSequence", "DecDigitSequence", 0),
                        new NonterminalParser("ExponentPart", "ExponentPart", 0)))));
            AddRule(new RuleParser("ExponentPart", GetScope(), Domain.GetNextRuleId(),
                new TokenParser(
                    new SequenceParser(
                        new SequenceParser(
                            new CharSetParser("eE"),
                            new OptionalParser(
                                new NonterminalParser("Sign", "Sign", 0))),
                        new NonterminalParser("DecDigitSequence", "DecDigitSequence", 0)))));
            AddRule(new IntegerLiteralRule("IntegerLiteral", GetScope(), Domain.GetNextRuleId(),
                new TokenParser(
                    new SequenceParser(
                        new NonterminalParser("IntegerLiteralValue", "IntegerLiteralValue", 0),
                        new AlternativeParser(
                            new ActionParser("",
                                new CharSetParser("uU")),
                            new ActionParser("",
                                new EmptyParser()))))));
            AddRule(new IntegerLiteralValueRule("IntegerLiteralValue", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new AlternativeParser(
                            new NonterminalParser("HexIntegerLiteral", "HexIntegerLiteral", 0),
                            new NonterminalParser("DecIntegerLiteral", "DecIntegerLiteral", 0))))));
            AddRule(new RuleParser("HexIntegerLiteral", GetScope(), Domain.GetNextRuleId(),
                new TokenParser(
                    new SequenceParser(
                        new AlternativeParser(
                            new StringParser("0x"),
                            new StringParser("0X")),
                        new NonterminalParser("HexDigitSequence", "HexDigitSequence", 0)))));
            AddRule(new RuleParser("DecIntegerLiteral", GetScope(), Domain.GetNextRuleId(),
                new NonterminalParser("DecDigitSequence", "DecDigitSequence", 0)));
            AddRule(new CharLiteralRule("CharLiteral", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new SequenceParser(
                            new SequenceParser(
                                new CharParser('\''),
                                new AlternativeParser(
                                    new PositiveParser(
                                        new CharSetParser("'\\\r\n", true)),
                                    new NonterminalParser("CharEscape", "CharEscape", 0))),
                            new ExpectationParser(
                                new CharParser('\'')))))));
            AddRule(new StringLiteralRule("StringLiteral", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new SequenceParser(
                        new CharParser('@'),
                        new ActionParser("",
                            new TokenParser(
                                new SequenceParser(
                                    new CharParser('"'),
                                    new KleeneStarParser(
                                        new CharSetParser("\"", true)))))),
                    new ActionParser("",
                        new TokenParser(
                            new SequenceParser(
                                new SequenceParser(
                                    new CharParser('"'),
                                    new KleeneStarParser(
                                        new AlternativeParser(
                                            new PositiveParser(
                                                new CharSetParser("\"\\\r\n", true)),
                                            new NonterminalParser("CharEscape", "CharEscape", 0)))),
                                new ExpectationParser(
                                    new CharParser('"'))))))));
            AddRule(new NullLiteralRule("NullLiteral", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new KeywordParser("null"))));
            AddRule(new RuleParser("CharEscape", GetScope(), Domain.GetNextRuleId(),
                new TokenParser(
                    new SequenceParser(
                        new CharParser('\\'),
                        new AlternativeParser(
                            new AlternativeParser(
                                new AlternativeParser(
                                    new AlternativeParser(
                                        new AlternativeParser(
                                            new AlternativeParser(
                                                new AlternativeParser(
                                                    new AlternativeParser(
                                                        new AlternativeParser(
                                                            new AlternativeParser(
                                                                new AlternativeParser(
                                                                    new AlternativeParser(
                                                                        new SequenceParser(
                                                                            new CharSetParser("xX"),
                                                                            new NonterminalParser("HexDigitSequence", "HexDigitSequence", 0)),
                                                                        new SequenceParser(
                                                                            new CharSetParser("dD"),
                                                                            new NonterminalParser("DecDigitSequence", "DecDigitSequence", 0))),
                                                                    new NonterminalParser("OctalDigitSequence", "OctalDigitSequence", 0)),
                                                                new SequenceParser(
                                                                    new CharParser('u'),
                                                                    new NonterminalParser("HexDigit4", "HexDigit4", 0))),
                                                            new SequenceParser(
                                                                new CharParser('U'),
                                                                new NonterminalParser("HexDigit8", "HexDigit8", 0))),
                                                        new CharParser('a')),
                                                    new CharParser('b')),
                                                new CharParser('f')),
                                            new CharParser('n')),
                                        new CharParser('r')),
                                    new CharParser('t')),
                                new CharParser('v')),
                            new AnyCharParser())))));
            AddRule(new RuleParser("DecDigitSequence", GetScope(), Domain.GetNextRuleId(),
                new TokenParser(
                    new PositiveParser(
                        new DigitParser()))));
            AddRule(new RuleParser("HexDigitSequence", GetScope(), Domain.GetNextRuleId(),
                new TokenParser(
                    new PositiveParser(
                        new HexDigitParser()))));
            AddRule(new RuleParser("HexDigit4", GetScope(), Domain.GetNextRuleId(),
                new TokenParser(
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new HexDigitParser(),
                                new HexDigitParser()),
                            new HexDigitParser()),
                        new HexDigitParser()))));
            AddRule(new RuleParser("HexDigit8", GetScope(), Domain.GetNextRuleId(),
                new TokenParser(
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new SequenceParser(
                                    new SequenceParser(
                                        new SequenceParser(
                                            new SequenceParser(
                                                new HexDigitParser(),
                                                new HexDigitParser()),
                                            new HexDigitParser()),
                                        new HexDigitParser()),
                                    new HexDigitParser()),
                                new HexDigitParser()),
                            new HexDigitParser()),
                        new HexDigitParser()))));
            AddRule(new RuleParser("OctalDigitSequence", GetScope(), Domain.GetNextRuleId(),
                new PositiveParser(
                    new TokenParser(
                        new CharSetParser("0-7")))));
            AddRule(new RuleParser("Sign", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new CharParser('+'),
                    new CharParser('-'))));
        }
    }
}
