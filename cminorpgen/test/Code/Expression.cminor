using System;
using System.Collections.Generic;
using System.Text.Parsing;
using System.Text.Parsing.CodeDom;

namespace Code
{
    public class ExpressionGrammar : System.Text.Parsing.Grammar
    {
        public ExpressionGrammar() : this(new ParsingDomain())
        {
        }
        public ExpressionGrammar(ParsingDomain parsingDomain) : base("ExpressionGrammar", parsingDomain.GetNamespaceScope("Code"), parsingDomain)
        {
            Owner = 0;
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public class ExpressionRule : System.Text.Parsing.RuleParser
        {
            public ExpressionRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "DomObject";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DomObject value;
            }
        }
        public class DisjunctionRule : System.Text.Parsing.RuleParser
        {
            public DisjunctionRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "DomObject";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DomObject value;
            }
        }
        public class ConjunctionRule : System.Text.Parsing.RuleParser
        {
            public ConjunctionRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "DomObject";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DomObject value;
            }
        }
        public class BitOrRule : System.Text.Parsing.RuleParser
        {
            public BitOrRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "DomObject";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DomObject value;
            }
        }
        public class BitXorRule : System.Text.Parsing.RuleParser
        {
            public BitXorRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "DomObject";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DomObject value;
            }
        }
        public class BitAndRule : System.Text.Parsing.RuleParser
        {
            public BitAndRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "DomObject";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DomObject value;
            }
        }
        public class EqualityRule : System.Text.Parsing.RuleParser
        {
            public EqualityRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "DomObject";
                LocalVariables.Add(new AttrOrVar("Operator", "op"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DomObject value;
                public Operator op;
            }
        }
        public class RelationalRule : System.Text.Parsing.RuleParser
        {
            public RelationalRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "DomObject";
                LocalVariables.Add(new AttrOrVar("Operator", "op"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DomObject value;
                public Operator op;
            }
        }
        public class ShiftRule : System.Text.Parsing.RuleParser
        {
            public ShiftRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "DomObject";
                LocalVariables.Add(new AttrOrVar("Operator", "op"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DomObject value;
                public Operator op;
            }
        }
        public class AdditiveRule : System.Text.Parsing.RuleParser
        {
            public AdditiveRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "DomObject";
                LocalVariables.Add(new AttrOrVar("Operator", "op"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DomObject value;
                public Operator op;
            }
        }
        public class MultiplicativeRule : System.Text.Parsing.RuleParser
        {
            public MultiplicativeRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "DomObject";
                LocalVariables.Add(new AttrOrVar("Operator", "op"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DomObject value;
                public Operator op;
            }
        }
        public class PrefixRule : System.Text.Parsing.RuleParser
        {
            public PrefixRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "DomObject";
                LocalVariables.Add(new AttrOrVar("Operator", "op"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DomObject value;
                public Operator op;
            }
        }
        public class PostfixRule : System.Text.Parsing.RuleParser
        {
            public PostfixRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "DomObject";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DomObject value;
            }
        }
        public class PrimaryRule : System.Text.Parsing.RuleParser
        {
            public PrimaryRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "DomObject";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DomObject value;
            }
        }
        public class CastExprRule : System.Text.Parsing.RuleParser
        {
            public CastExprRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "DomObject";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DomObject value;
            }
        }
        public class NewExprRule : System.Text.Parsing.RuleParser
        {
            public NewExprRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "DomObject";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DomObject value;
            }
        }
        public class ArgumentListRule : System.Text.Parsing.RuleParser
        {
            public ArgumentListRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                InheritedAttributes.Add(new AttrOrVar("DomObject", "o"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.o = cast<DomObject>(stack.Pop());
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DomObject o;
            }
        }
        public class ExpressionListRule : System.Text.Parsing.RuleParser
        {
            public ExpressionListRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                InheritedAttributes.Add(new AttrOrVar("DomObject", "o"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.o = cast<DomObject>(stack.Pop());
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DomObject o;
            }
        }
        public override void GetReferencedGrammars()
        {
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("Identifier", this, "IdentifierGrammar.Identifier"));
            AddRuleLink(new RuleLink("QualifiedId", this, "IdentifierGrammar.QualifiedId"));
            AddRuleLink(new RuleLink("Literal", this, "LiteralGrammar.Literal"));
            AddRuleLink(new RuleLink("BasicType", this, "BasicTypeGrammar.BasicType"));
            AddRuleLink(new RuleLink("TemplateId", this, "TemplateGrammar.TemplateId"));
            AddRuleLink(new RuleLink("TypeExpr", this, "TypeExprGrammar.TypeExpr"));
            AddRule(new ExpressionRule("Expression", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new NonterminalParser("Disjunction", "Disjunction", 1))));
            AddRule(new DisjunctionRule("Disjunction", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new NonterminalParser("left", "Conjunction", 1)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new ActionParser("",
                                new StringParser("||")),
                            new ActionParser("",
                                new ExpectationParser(
                                    new NonterminalParser("right", "Conjunction", 1))))))));
            AddRule(new ConjunctionRule("Conjunction", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new NonterminalParser("left", "BitOr", 1)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new ActionParser("",
                                new StringParser("&&")),
                            new ActionParser("",
                                new ExpectationParser(
                                    new NonterminalParser("right", "BitOr", 1))))))));
            AddRule(new BitOrRule("BitOr", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new NonterminalParser("left", "BitXor", 1)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new ActionParser("",
                                new DifferenceParser(
                                    new CharParser('|'),
                                    new StringParser("||"))),
                            new ActionParser("",
                                new ExpectationParser(
                                    new NonterminalParser("right", "BitXor", 1))))))));
            AddRule(new BitXorRule("BitXor", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new NonterminalParser("left", "BitAnd", 1)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new ActionParser("",
                                new CharParser('^')),
                            new ActionParser("",
                                new ExpectationParser(
                                    new NonterminalParser("right", "BitAnd", 1))))))));
            AddRule(new BitAndRule("BitAnd", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new NonterminalParser("left", "Equality", 1)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new ActionParser("",
                                new DifferenceParser(
                                    new CharParser('&'),
                                    new StringParser("&&"))),
                            new ActionParser("",
                                new ExpectationParser(
                                    new NonterminalParser("right", "Equality", 1))))))));
            AddRule(new EqualityRule("Equality", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new NonterminalParser("left", "Relational", 1)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new AlternativeParser(
                                new ActionParser("",
                                    new StringParser("==")),
                                new ActionParser("",
                                    new StringParser("!="))),
                            new ActionParser("",
                                new ExpectationParser(
                                    new NonterminalParser("right", "Relational", 1))))))));
            AddRule(new RelationalRule("Relational", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new NonterminalParser("left", "Shift", 1)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new AlternativeParser(
                                new AlternativeParser(
                                    new AlternativeParser(
                                        new AlternativeParser(
                                            new AlternativeParser(
                                                new ActionParser("",
                                                    new DifferenceParser(
                                                        new StringParser("<="),
                                                        new StringParser("<=>"))),
                                                new ActionParser("",
                                                    new StringParser(">="))),
                                            new ActionParser("",
                                                new DifferenceParser(
                                                    new CharParser('<'),
                                                    new AlternativeParser(
                                                        new StringParser("<<"),
                                                        new StringParser("<=>"))))),
                                        new ActionParser("",
                                            new DifferenceParser(
                                                new CharParser('>'),
                                                new StringParser(">>")))),
                                    new SequenceParser(
                                        new ActionParser("",
                                            new KeywordParser("is")),
                                        new NonterminalParser("isType", "TypeExpr", 1))),
                                new SequenceParser(
                                    new ActionParser("",
                                        new KeywordParser("as")),
                                    new NonterminalParser("asType", "TypeExpr", 1))),
                            new ActionParser("",
                                new NonterminalParser("right", "Shift", 1)))))));
            AddRule(new ShiftRule("Shift", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new NonterminalParser("left", "Additive", 1)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new AlternativeParser(
                                new ActionParser("",
                                    new StringParser("<<")),
                                new ActionParser("",
                                    new StringParser(">>"))),
                            new ActionParser("",
                                new SequenceParser(
                                    new ActionParser("",
                                        new EmptyParser()),
                                    new ActionParser("",
                                        new ExpectationParser(
                                            new NonterminalParser("right", "Additive", 1))))))))));
            AddRule(new AdditiveRule("Additive", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new NonterminalParser("left", "Multiplicative", 1)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new AlternativeParser(
                                new ActionParser("",
                                    new CharParser('+')),
                                new ActionParser("",
                                    new CharParser('-'))),
                            new ActionParser("",
                                new ExpectationParser(
                                    new NonterminalParser("right", "Multiplicative", 1))))))));
            AddRule(new MultiplicativeRule("Multiplicative", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new NonterminalParser("left", "Prefix", 1)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new AlternativeParser(
                                new AlternativeParser(
                                    new ActionParser("",
                                        new CharParser('*')),
                                    new ActionParser("",
                                        new CharParser('/'))),
                                new ActionParser("",
                                    new CharParser('%'))),
                            new ActionParser("",
                                new NonterminalParser("right", "Prefix", 1)))))));
            AddRule(new PrefixRule("Prefix", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new SequenceParser(
                        new AlternativeParser(
                            new AlternativeParser(
                                new AlternativeParser(
                                    new ActionParser("",
                                        new CharParser('-')),
                                    new ActionParser("",
                                        new CharParser('+'))),
                                new ActionParser("",
                                    new DifferenceParser(
                                        new CharParser('!'),
                                        new StringParser("!=")))),
                            new ActionParser("",
                                new CharParser('~'))),
                        new ActionParser("",
                            new NonterminalParser("prefix", "Prefix", 1))),
                    new ActionParser("",
                        new NonterminalParser("Postfix", "Postfix", 1)))));
            AddRule(new PostfixRule("Postfix", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new NonterminalParser("Primary", "Primary", 1)),
                    new KleeneStarParser(
                        new AlternativeParser(
                            new AlternativeParser(
                                new SequenceParser(
                                    new CharParser('.'),
                                    new ActionParser("",
                                        new NonterminalParser("dotMemberId", "Identifier", 0))),
                                new SequenceParser(
                                    new SequenceParser(
                                        new ActionParser("",
                                            new CharParser('[')),
                                        new ActionParser("",
                                            new NonterminalParser("index", "Expression", 1))),
                                    new ActionParser("",
                                        new CharParser(']')))),
                            new SequenceParser(
                                new SequenceParser(
                                    new ActionParser("",
                                        new CharParser('(')),
                                    new NonterminalParser("ArgumentList", "ArgumentList", 2)),
                                new CharParser(')')))))));
            AddRule(new PrimaryRule("Primary", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new AlternativeParser(
                        new AlternativeParser(
                            new AlternativeParser(
                                new AlternativeParser(
                                    new AlternativeParser(
                                        new AlternativeParser(
                                            new AlternativeParser(
                                                new AlternativeParser(
                                                    new ActionParser("",
                                                        new SequenceParser(
                                                            new SequenceParser(
                                                                new CharParser('('),
                                                                new NonterminalParser("Expression", "Expression", 1)),
                                                            new CharParser(')'))),
                                                    new ActionParser("",
                                                        new NonterminalParser("Literal", "Literal", 0))),
                                                new ActionParser("",
                                                    new NonterminalParser("BasicType", "BasicType", 0))),
                                            new ActionParser("",
                                                new NonterminalParser("TemplateId", "TemplateId", 1))),
                                        new ActionParser("",
                                            new NonterminalParser("id", "Identifier", 0))),
                                    new ActionParser("",
                                        new KeywordParser("this"))),
                                new ActionParser("",
                                    new KeywordParser("base"))),
                            new ActionParser("",
                                new SequenceParser(
                                    new SequenceParser(
                                        new SequenceParser(
                                            new KeywordParser("default"),
                                            new CharParser('(')),
                                        new ExpectationParser(
                                            new NonterminalParser("TypeExpr", "TypeExpr", 1))),
                                    new ExpectationParser(
                                        new CharParser(')'))))),
                        new ActionParser("",
                            new NonterminalParser("CastExpr", "CastExpr", 1))),
                    new ActionParser("",
                        new NonterminalParser("NewExpr", "NewExpr", 1)))));
            AddRule(new CastExprRule("CastExpr", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new SequenceParser(
                                    new SequenceParser(
                                        new SequenceParser(
                                            new KeywordParser("cast"),
                                            new ExpectationParser(
                                                new CharParser('<'))),
                                        new ExpectationParser(
                                            new NonterminalParser("typeExpr", "TypeExpr", 1))),
                                    new ExpectationParser(
                                        new CharParser('>'))),
                                new ExpectationParser(
                                    new CharParser('('))),
                            new ExpectationParser(
                                new NonterminalParser("sourceExpr", "Expression", 1))),
                        new ExpectationParser(
                            new CharParser(')'))))));
            AddRule(new NewExprRule("NewExpr", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new KeywordParser("new"),
                                new ActionParser("",
                                    new ExpectationParser(
                                        new NonterminalParser("type", "TypeExpr", 1)))),
                            new ExpectationParser(
                                new CharParser('('))),
                        new ExpectationParser(
                            new NonterminalParser("args", "ArgumentList", 2))),
                    new ExpectationParser(
                        new CharParser(')')))));
            AddRule(new ArgumentListRule("ArgumentList", GetScope(), Domain.GetNextRuleId(),
                new OptionalParser(
                    new NonterminalParser("ExpressionList", "ExpressionList", 2))));
            AddRule(new ExpressionListRule("ExpressionList", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new EmptyParser()),
                    new ActionParser("",
                        new ListParser(
                            new AlternativeParser(
                                new SequenceParser(
                                    new KeywordParser("ref"),
                                    new ActionParser("",
                                        new NonterminalParser("arg", "Expression", 1))),
                                new ActionParser("",
                                    new NonterminalParser("Expression", "Expression", 1))),
                            new CharParser(','))))));
        }
    }
}
