using System;
using System.Collections.Generic;
using System.Text.Parsing;
using System.Text.Parsing.CodeDom;

namespace Code
{
    public class IdentifierGrammar : System.Text.Parsing.Grammar
    {
        public IdentifierGrammar() : this(new ParsingDomain())
        {
        }
        public IdentifierGrammar(ParsingDomain parsingDomain) : base("IdentifierGrammar", parsingDomain.GetNamespaceScope("Code"), parsingDomain)
        {
            Owner = 0;
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public Identifier Parse(string content, int fileIndex, string fileName)
        {
            Stack<object> stack = new Stack<object>();
            Scanner scanner = new Scanner(content, fileIndex, fileName, SkipRule);
            System.IO.StreamWriter log = Log;
            XmlLog xmlLog = null;
            try
            {
                if (log != null)
                {
                    xmlLog = new XmlLog(log);
                    scanner.Log = xmlLog;
                    xmlLog.WriteBeginRule("parse");
                    xmlLog.IncIndent();
                }
                Match match = Parse(scanner, stack);
                Span stop = scanner.SpanValue;
                if (log != null)
                {
                    xmlLog.DecIndent();
                    xmlLog.WriteEndRule("parse");
                }
                if (!match.Hit || stop.Start != content.Length)
                {
                    RuleParser startRule = StartRule;
                    if (startRule != null)
                    {
                        throw new ExpectationFailure(startRule.Info, fileName, stop, content);
                    }
                    else
                    {
                        throw new Exception("grammar '" + Name + "' has no start rule");
                    }
                }
            }
            finally
            {
                if (xmlLog != null)
                {
                    xmlLog.Close();
                }
            }
            Identifier result = cast<Identifier>(stack.Pop());
            return result;
        }
        public class IdentifierRule : System.Text.Parsing.RuleParser
        {
            public IdentifierRule(string name, Scope enclosingScope, Parser definition) : base(name, enclosingScope, definition)
            {
                ValueTypeName = "Identifier";
                contextStack = new Stack<Context>();
            }
            public override void Enter(Stack<object> stack)
            {
                contextStack.Push(context);
                context = new Context();
            }
            public override void Leave(Stack<object> stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(context.value);
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                NonterminalParser identifierNonterminalParser = GetNonterminal("identifier");
                identifierNonterminalParser.Post = Postidentifier;
            }
            public void A0Action(string match, Span span, string fileName, ref bool pass)
            {
                context.value = new System.Text.Parsing.CodeDom.Identifier(match);
            }
            public void Postidentifier(Stack<object> stack, bool matched)
            {
                if (matched)
                {
                    context.fromidentifier = cast<string>(stack.Pop());
                }
            }
            public class Context
            {
                public Identifier value;
                public string fromidentifier;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        public class QualifiedIdRule : System.Text.Parsing.RuleParser
        {
            public QualifiedIdRule(string name, Scope enclosingScope, Parser definition) : base(name, enclosingScope, definition)
            {
                ValueTypeName = "Identifier";
                contextStack = new Stack<Context>();
            }
            public override void Enter(Stack<object> stack)
            {
                contextStack.Push(context);
                context = new Context();
            }
            public override void Leave(Stack<object> stack, bool matched)
            {
                if (matched)
                {
                    stack.Push(context.value);
                }
                context = contextStack.Pop();
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                NonterminalParser identifierNonterminalParser = GetNonterminal("Identifier");
                identifierNonterminalParser.Post = PostIdentifier;
            }
            public void A0Action(string match, Span span, string fileName, ref bool pass)
            {
                context.value = new System.Text.Parsing.CodeDom.Identifier(match);
            }
            public void PostIdentifier(Stack<object> stack, bool matched)
            {
                if (matched)
                {
                    context.fromIdentifier = cast<Identifier>(stack.Pop());
                }
            }
            public class Context
            {
                public Identifier value;
                public Identifier fromIdentifier;
            }
            private Stack<Context> contextStack;
            private Context context;
        }
        public override void GetReferencedGrammars()
        {
            ParsingDomain parsingDomain = Domain;
            Grammar grammar0 = parsingDomain.GetGrammar("System.Text.Parsing.stdlib");
            if (grammar0 == null)
            {
                grammar0 = new System.Text.Parsing.stdlib(parsingDomain);
            }
            ReferencedGrammars.Add(grammar0);
            Grammar grammar1 = parsingDomain.GetGrammar("Code.KeywordGrammar");
            if (grammar1 == null)
            {
                grammar1 = new Code.KeywordGrammar(parsingDomain);
            }
            ReferencedGrammars.Add(grammar1);
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("identifier", this, "System.Text.Parsing.stdlib.identifier"));
            AddRuleLink(new RuleLink("Keyword", this, "KeywordGrammar.Keyword"));
            AddRule(new IdentifierRule("Identifier", GetScope(),
                new ActionParser("A0",
                    new DifferenceParser(
                        new NonterminalParser("identifier", "identifier", 0),
                        new NonterminalParser("Keyword", "Keyword", 0)))));
            AddRule(new QualifiedIdRule("QualifiedId", GetScope(),
                new ActionParser("A0",
                    new TokenParser(
                        new ListParser(
                            new NonterminalParser("Identifier", "Identifier", 0),
                            new CharParser('.'))))));
        }
    }
}
