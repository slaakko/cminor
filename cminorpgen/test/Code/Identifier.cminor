using System;
using System.Collections.Generic;
using System.Text.Parsing;
using System.Text.Parsing.CodeDom;

namespace Code
{
    public class IdentifierGrammar : System.Text.Parsing.Grammar
    {
        public IdentifierGrammar() : this(new ParsingDomain())
        {
        }
        public IdentifierGrammar(ParsingDomain parsingDomain) : base("IdentifierGrammar", parsingDomain.GetNamespaceScope("Code"), parsingDomain)
        {
            Owner = 0;
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public class IdentifierRule : System.Text.Parsing.RuleParser
        {
            public IdentifierRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Identifier";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Identifier value;
            }
        }
        public class QualifiedIdRule : System.Text.Parsing.RuleParser
        {
            public QualifiedIdRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Identifier";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Identifier value;
            }
        }
        public override void GetReferencedGrammars()
        {
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("identifier", this, "System.Text.Parsing.stdlib.identifier"));
            AddRuleLink(new RuleLink("Keyword", this, "KeywordGrammar.Keyword"));
            AddRule(new IdentifierRule("Identifier", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new DifferenceParser(
                        new NonterminalParser("identifier", "identifier", 0),
                        new NonterminalParser("Keyword", "Keyword", 0)))));
            AddRule(new QualifiedIdRule("QualifiedId", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new ListParser(
                            new NonterminalParser("Identifier", "Identifier", 0),
                            new CharParser('.'))))));
        }
    }
}
