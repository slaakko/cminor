using System;
using System.Collections.Generic;
using System.Text.Parsing;
using System.Text.Parsing.CodeDom;

namespace Code
{
    public class TemplateGrammar : System.Text.Parsing.Grammar
    {
        public TemplateGrammar() : this(new ParsingDomain())
        {
        }
        public TemplateGrammar(ParsingDomain parsingDomain) : base("TemplateGrammar", parsingDomain.GetNamespaceScope("Code"), parsingDomain)
        {
            Owner = 0;
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public class TemplateIdRule : System.Text.Parsing.RuleParser
        {
            public TemplateIdRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "TemplateId";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public TemplateId value;
            }
        }
        public override void GetReferencedGrammars()
        {
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("QualifiedId", this, "IdentifierGrammar.QualifiedId"));
            AddRuleLink(new RuleLink("TypeExpr", this, "TypeExprGrammar.TypeExpr"));
            AddRule(new TemplateIdRule("TemplateId", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new SequenceParser(
                            new ActionParser("",
                                new NonterminalParser("QualifiedId", "QualifiedId", 0)),
                            new CharParser('<')),
                        new ListParser(
                            new ActionParser("",
                                new NonterminalParser("TypeExpr", "TypeExpr", 1)),
                            new CharParser(','))),
                    new CharParser('>'))));
        }
    }
}
