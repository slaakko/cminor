using System;
using System.Collections.Generic;
using System.Text.Parsing;
using System.Text.Parsing.CodeDom;

namespace Code
{
    public class StatementGrammar : System.Text.Parsing.Grammar
    {
        public StatementGrammar() : this(new ParsingDomain())
        {
        }
        public StatementGrammar(ParsingDomain parsingDomain) : base("StatementGrammar", parsingDomain.GetNamespaceScope("Code"), parsingDomain)
        {
            Owner = 0;
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public class StatementRule : System.Text.Parsing.RuleParser
        {
            public StatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Statement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Statement value;
            }
        }
        public class LabelRule : System.Text.Parsing.RuleParser
        {
            public LabelRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "string";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public string value;
            }
        }
        public class LabeledStatementRule : System.Text.Parsing.RuleParser
        {
            public LabeledStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Statement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Statement value;
            }
        }
        public class ControlStatementRule : System.Text.Parsing.RuleParser
        {
            public ControlStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Statement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Statement value;
            }
        }
        public class CompoundStatementRule : System.Text.Parsing.RuleParser
        {
            public CompoundStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "CompoundStatement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public CompoundStatement value;
            }
        }
        public class ReturnStatementRule : System.Text.Parsing.RuleParser
        {
            public ReturnStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Statement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Statement value;
            }
        }
        public class IfStatementRule : System.Text.Parsing.RuleParser
        {
            public IfStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Statement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Statement value;
            }
        }
        public class WhileStatementRule : System.Text.Parsing.RuleParser
        {
            public WhileStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Statement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Statement value;
            }
        }
        public class DoStatementRule : System.Text.Parsing.RuleParser
        {
            public DoStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Statement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Statement value;
            }
        }
        public class ForStatementRule : System.Text.Parsing.RuleParser
        {
            public ForStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "ForStatement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public ForStatement value;
            }
        }
        public class ForInitStatementRule : System.Text.Parsing.RuleParser
        {
            public ForInitStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Statement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Statement value;
            }
        }
        public class ForLoopExpressionStatementRule : System.Text.Parsing.RuleParser
        {
            public ForLoopExpressionStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Statement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Statement value;
            }
        }
        public class ForEachStatementRule : System.Text.Parsing.RuleParser
        {
            public ForEachStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Statement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Statement value;
            }
        }
        public class BreakStatementRule : System.Text.Parsing.RuleParser
        {
            public BreakStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Statement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Statement value;
            }
        }
        public class ContinueStatementRule : System.Text.Parsing.RuleParser
        {
            public ContinueStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Statement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Statement value;
            }
        }
        public class GotoStatementRule : System.Text.Parsing.RuleParser
        {
            public GotoStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Statement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Statement value;
            }
        }
        public class SwitchStatementRule : System.Text.Parsing.RuleParser
        {
            public SwitchStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "SwitchStatement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public SwitchStatement value;
            }
        }
        public class CaseStatementRule : System.Text.Parsing.RuleParser
        {
            public CaseStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "CaseStatement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public CaseStatement value;
            }
        }
        public class DefaultStatementRule : System.Text.Parsing.RuleParser
        {
            public DefaultStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "DefaultStatement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DefaultStatement value;
            }
        }
        public class GotoCaseStatementRule : System.Text.Parsing.RuleParser
        {
            public GotoCaseStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Statement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Statement value;
            }
        }
        public class GotoDefaultStatementRule : System.Text.Parsing.RuleParser
        {
            public GotoDefaultStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Statement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Statement value;
            }
        }
        public class AssignmentExpressionStatementRule : System.Text.Parsing.RuleParser
        {
            public AssignmentExpressionStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "AssignmentStatement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public AssignmentStatement value;
            }
        }
        public class AssignmentStatementRule : System.Text.Parsing.RuleParser
        {
            public AssignmentStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "AssignmentStatement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public AssignmentStatement value;
            }
        }
        public class ConstructionExpressionStatementRule : System.Text.Parsing.RuleParser
        {
            public ConstructionExpressionStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "ConstructionStatement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public ConstructionStatement value;
            }
        }
        public class ConstructionStatementRule : System.Text.Parsing.RuleParser
        {
            public ConstructionStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "ConstructionStatement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public ConstructionStatement value;
            }
        }
        public class IncrementExpressionStatementRule : System.Text.Parsing.RuleParser
        {
            public IncrementExpressionStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "IncrementStatement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public IncrementStatement value;
            }
        }
        public class IncrementStatementRule : System.Text.Parsing.RuleParser
        {
            public IncrementStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "IncrementStatement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public IncrementStatement value;
            }
        }
        public class DecrementExpressionStatementRule : System.Text.Parsing.RuleParser
        {
            public DecrementExpressionStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "DecrementStatement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DecrementStatement value;
            }
        }
        public class DecrementStatementRule : System.Text.Parsing.RuleParser
        {
            public DecrementStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "DecrementStatement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public DecrementStatement value;
            }
        }
        public class ExpressionStatementRule : System.Text.Parsing.RuleParser
        {
            public ExpressionStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Statement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Statement value;
            }
        }
        public class EmptyStatementRule : System.Text.Parsing.RuleParser
        {
            public EmptyStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Statement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Statement value;
            }
        }
        public class ThrowStatementRule : System.Text.Parsing.RuleParser
        {
            public ThrowStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Statement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Statement value;
            }
        }
        public class TryStatementRule : System.Text.Parsing.RuleParser
        {
            public TryStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "TryStatement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public TryStatement value;
            }
        }
        public class CatchRule : System.Text.Parsing.RuleParser
        {
            public CatchRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Catch";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Catch value;
            }
        }
        public class FinallyRule : System.Text.Parsing.RuleParser
        {
            public FinallyRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Finally";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Finally value;
            }
        }
        public class UsingStatementRule : System.Text.Parsing.RuleParser
        {
            public UsingStatementRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Statement";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Statement value;
            }
        }
        public override void GetReferencedGrammars()
        {
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("identifier", this, "System.Text.Parsing.stdlib.identifier"));
            AddRuleLink(new RuleLink("Identifier", this, "IdentifierGrammar.Identifier"));
            AddRuleLink(new RuleLink("Keyword", this, "KeywordGrammar.Keyword"));
            AddRuleLink(new RuleLink("Expression", this, "ExpressionGrammar.Expression"));
            AddRuleLink(new RuleLink("TypeExpr", this, "TypeExprGrammar.TypeExpr"));
            AddRuleLink(new RuleLink("ExpressionList", this, "ExpressionGrammar.ExpressionList"));
            AddRuleLink(new RuleLink("ArgumentList", this, "ExpressionGrammar.ArgumentList"));
            AddRule(new StatementRule("Statement", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new AlternativeParser(
                        new AlternativeParser(
                            new AlternativeParser(
                                new AlternativeParser(
                                    new AlternativeParser(
                                        new AlternativeParser(
                                            new AlternativeParser(
                                                new AlternativeParser(
                                                    new AlternativeParser(
                                                        new ActionParser("",
                                                            new NonterminalParser("LabeledStatement", "LabeledStatement", 1)),
                                                        new ActionParser("",
                                                            new NonterminalParser("ControlStatement", "ControlStatement", 1))),
                                                    new ActionParser("",
                                                        new NonterminalParser("IncrementStatement", "IncrementStatement", 1))),
                                                new ActionParser("",
                                                    new NonterminalParser("DecrementStatement", "DecrementStatement", 1))),
                                            new ActionParser("",
                                                new NonterminalParser("ExpressionStatement", "ExpressionStatement", 1))),
                                        new ActionParser("",
                                            new NonterminalParser("AssignmentStatement", "AssignmentStatement", 1))),
                                    new ActionParser("",
                                        new NonterminalParser("ConstructionStatement", "ConstructionStatement", 1))),
                                new ActionParser("",
                                    new NonterminalParser("EmptyStatement", "EmptyStatement", 1))),
                            new ActionParser("",
                                new NonterminalParser("ThrowStatement", "ThrowStatement", 1))),
                        new ActionParser("",
                            new NonterminalParser("TryStatement", "TryStatement", 1))),
                    new ActionParser("",
                        new NonterminalParser("UsingStatement", "UsingStatement", 1)))));
            AddRule(new LabelRule("Label", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new DifferenceParser(
                        new NonterminalParser("identifier", "identifier", 0),
                        new NonterminalParser("Keyword", "Keyword", 0)))));
            AddRule(new LabeledStatementRule("LabeledStatement", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new SequenceParser(
                        new SequenceParser(
                            new NonterminalParser("Label", "Label", 0),
                            new CharParser(':')),
                        new NonterminalParser("stmt", "Statement", 1)))));
            AddRule(new ControlStatementRule("ControlStatement", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new AlternativeParser(
                        new AlternativeParser(
                            new AlternativeParser(
                                new AlternativeParser(
                                    new AlternativeParser(
                                        new AlternativeParser(
                                            new AlternativeParser(
                                                new AlternativeParser(
                                                    new AlternativeParser(
                                                        new AlternativeParser(
                                                            new AlternativeParser(
                                                                new ActionParser("",
                                                                    new NonterminalParser("CompoundStatement", "CompoundStatement", 1)),
                                                                new ActionParser("",
                                                                    new NonterminalParser("ReturnStatement", "ReturnStatement", 1))),
                                                            new ActionParser("",
                                                                new NonterminalParser("IfStatement", "IfStatement", 1))),
                                                        new ActionParser("",
                                                            new NonterminalParser("WhileStatement", "WhileStatement", 1))),
                                                    new ActionParser("",
                                                        new NonterminalParser("DoStatement", "DoStatement", 1))),
                                                new ActionParser("",
                                                    new NonterminalParser("ForStatement", "ForStatement", 1))),
                                            new ActionParser("",
                                                new NonterminalParser("ForEachStatement", "ForEachStatement", 1))),
                                        new ActionParser("",
                                            new NonterminalParser("BreakStatement", "BreakStatement", 1))),
                                    new ActionParser("",
                                        new NonterminalParser("ContinueStatement", "ContinueStatement", 1))),
                                new ActionParser("",
                                    new NonterminalParser("GotoStatement", "GotoStatement", 1))),
                            new ActionParser("",
                                new NonterminalParser("SwitchStatement", "SwitchStatement", 1))),
                        new ActionParser("",
                            new NonterminalParser("GotoCaseStatement", "GotoCaseStatement", 1))),
                    new ActionParser("",
                        new NonterminalParser("GotoDefaultStatement", "GotoDefaultStatement", 1)))));
            AddRule(new CompoundStatementRule("CompoundStatement", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new ActionParser("",
                            new CharParser('{')),
                        new KleeneStarParser(
                            new ActionParser("",
                                new NonterminalParser("Statement", "Statement", 1)))),
                    new ExpectationParser(
                        new CharParser('}')))));
            AddRule(new ReturnStatementRule("ReturnStatement", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new SequenceParser(
                        new SequenceParser(
                            new KeywordParser("return"),
                            new ExpectationParser(
                                new OptionalParser(
                                    new NonterminalParser("Expression", "Expression", 1)))),
                        new ExpectationParser(
                            new CharParser(';'))))));
            AddRule(new IfStatementRule("IfStatement", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new SequenceParser(
                                    new SequenceParser(
                                        new KeywordParser("if"),
                                        new ExpectationParser(
                                            new CharParser('('))),
                                    new ExpectationParser(
                                        new NonterminalParser("Expression", "Expression", 1))),
                                new ExpectationParser(
                                    new CharParser(')'))),
                            new ExpectationParser(
                                new NonterminalParser("thenS", "Statement", 1))),
                        new OptionalParser(
                            new SequenceParser(
                                new KeywordParser("else"),
                                new ExpectationParser(
                                    new NonterminalParser("elseS", "Statement", 1))))))));
            AddRule(new WhileStatementRule("WhileStatement", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new SequenceParser(
                                    new KeywordParser("while"),
                                    new ExpectationParser(
                                        new CharParser('('))),
                                new ExpectationParser(
                                    new NonterminalParser("Expression", "Expression", 1))),
                            new ExpectationParser(
                                new CharParser(')'))),
                        new ExpectationParser(
                            new NonterminalParser("Statement", "Statement", 1))))));
            AddRule(new DoStatementRule("DoStatement", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new SequenceParser(
                                    new SequenceParser(
                                        new SequenceParser(
                                            new KeywordParser("do"),
                                            new ExpectationParser(
                                                new NonterminalParser("Statement", "Statement", 1))),
                                        new ExpectationParser(
                                            new KeywordParser("while"))),
                                    new ExpectationParser(
                                        new CharParser('('))),
                                new ExpectationParser(
                                    new NonterminalParser("Expression", "Expression", 1))),
                            new ExpectationParser(
                                new CharParser(')'))),
                        new ExpectationParser(
                            new CharParser(';'))))));
            AddRule(new ForStatementRule("ForStatement", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new SequenceParser(
                                    new SequenceParser(
                                        new SequenceParser(
                                            new SequenceParser(
                                                new KeywordParser("for"),
                                                new ExpectationParser(
                                                    new CharParser('('))),
                                            new ExpectationParser(
                                                new NonterminalParser("init", "ForInitStatement", 1))),
                                        new OptionalParser(
                                            new NonterminalParser("condition", "Expression", 1))),
                                    new ExpectationParser(
                                        new CharParser(';'))),
                                new NonterminalParser("loop", "ForLoopExpressionStatement", 1)),
                            new ExpectationParser(
                                new CharParser(')'))),
                        new ExpectationParser(
                            new NonterminalParser("action", "Statement", 1))))));
            AddRule(new ForInitStatementRule("ForInitStatement", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new AlternativeParser(
                        new ActionParser("",
                            new NonterminalParser("AssignmentStatement", "AssignmentStatement", 1)),
                        new ActionParser("",
                            new NonterminalParser("ConstructionStatement", "ConstructionStatement", 1))),
                    new ActionParser("",
                        new NonterminalParser("EmptyStatement", "EmptyStatement", 1)))));
            AddRule(new ForLoopExpressionStatementRule("ForLoopExpressionStatement", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new AlternativeParser(
                        new AlternativeParser(
                            new ActionParser("",
                                new NonterminalParser("IncrementExpressionStatement", "IncrementExpressionStatement", 1)),
                            new ActionParser("",
                                new NonterminalParser("DecrementExpressionStatement", "DecrementExpressionStatement", 1))),
                        new ActionParser("",
                            new NonterminalParser("AssignmentExpressionStatement", "AssignmentExpressionStatement", 1))),
                    new ActionParser("",
                        new EmptyParser()))));
            AddRule(new ForEachStatementRule("ForEachStatement", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new SequenceParser(
                                    new SequenceParser(
                                        new SequenceParser(
                                            new SequenceParser(
                                                new KeywordParser("foreach"),
                                                new ExpectationParser(
                                                    new CharParser('('))),
                                            new ExpectationParser(
                                                new NonterminalParser("TypeExpr", "TypeExpr", 1))),
                                        new ExpectationParser(
                                            new NonterminalParser("Identifier", "Identifier", 0))),
                                    new ExpectationParser(
                                        new KeywordParser("in"))),
                                new ExpectationParser(
                                    new NonterminalParser("Expression", "Expression", 1))),
                            new ExpectationParser(
                                new CharParser(')'))),
                        new NonterminalParser("Statement", "Statement", 1)))));
            AddRule(new BreakStatementRule("BreakStatement", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new SequenceParser(
                        new KeywordParser("break"),
                        new ExpectationParser(
                            new CharParser(';'))))));
            AddRule(new ContinueStatementRule("ContinueStatement", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new SequenceParser(
                        new KeywordParser("continue"),
                        new ExpectationParser(
                            new CharParser(';'))))));
            AddRule(new GotoStatementRule("GotoStatement", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new SequenceParser(
                        new SequenceParser(
                            new KeywordParser("goto"),
                            new ExpectationParser(
                                new NonterminalParser("Identifier", "Identifier", 0))),
                        new ExpectationParser(
                            new CharParser(';'))))));
            AddRule(new SwitchStatementRule("SwitchStatement", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new ActionParser("",
                                    new SequenceParser(
                                        new SequenceParser(
                                            new KeywordParser("switch"),
                                            new ExpectationParser(
                                                new CharParser('('))),
                                        new ExpectationParser(
                                            new NonterminalParser("Expression", "Expression", 1)))),
                                new ExpectationParser(
                                    new CharParser(')'))),
                            new ExpectationParser(
                                new CharParser('{'))),
                        new KleeneStarParser(
                            new AlternativeParser(
                                new ActionParser("",
                                    new NonterminalParser("CaseStatement", "CaseStatement", 1)),
                                new ActionParser("",
                                    new NonterminalParser("DefaultStatement", "DefaultStatement", 1))))),
                    new ExpectationParser(
                        new CharParser('}')))));
            AddRule(new CaseStatementRule("CaseStatement", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new ActionParser("",
                            new EmptyParser()),
                        new PositiveParser(
                            new SequenceParser(
                                new SequenceParser(
                                    new KeywordParser("case"),
                                    new ActionParser("",
                                        new ExpectationParser(
                                            new NonterminalParser("Expression", "Expression", 1)))),
                                new ExpectationParser(
                                    new CharParser(':'))))),
                    new KleeneStarParser(
                        new ActionParser("",
                            new NonterminalParser("Statement", "Statement", 1))))));
            AddRule(new DefaultStatementRule("DefaultStatement", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new SequenceParser(
                            new KeywordParser("default"),
                            new ExpectationParser(
                                new CharParser(':')))),
                    new KleeneStarParser(
                        new ActionParser("",
                            new NonterminalParser("Statement", "Statement", 1))))));
            AddRule(new GotoCaseStatementRule("GotoCaseStatement", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new KeywordParser("goto"),
                                new KeywordParser("case")),
                            new ExpectationParser(
                                new NonterminalParser("Expression", "Expression", 1))),
                        new ExpectationParser(
                            new CharParser(';'))))));
            AddRule(new GotoDefaultStatementRule("GotoDefaultStatement", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new SequenceParser(
                        new SequenceParser(
                            new KeywordParser("goto"),
                            new KeywordParser("default")),
                        new ExpectationParser(
                            new CharParser(';'))))));
            AddRule(new AssignmentExpressionStatementRule("AssignmentExpressionStatement", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new EmptyParser()),
                    new ActionParser("",
                        new SequenceParser(
                            new SequenceParser(
                                new ActionParser("",
                                    new NonterminalParser("target", "Expression", 1)),
                                new CharParser('=')),
                            new NonterminalParser("source", "Expression", 1))))));
            AddRule(new AssignmentStatementRule("AssignmentStatement", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new SequenceParser(
                        new NonterminalParser("AssignmentExpressionStatement", "AssignmentExpressionStatement", 1),
                        new CharParser(';')))));
            AddRule(new ConstructionExpressionStatementRule("ConstructionExpressionStatement", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new NonterminalParser("TypeExpr", "TypeExpr", 1),
                        new ActionParser("",
                            new ExpectationParser(
                                new NonterminalParser("Identifier", "Identifier", 0)))),
                    new OptionalParser(
                        new SequenceParser(
                            new CharParser('='),
                            new ActionParser("",
                                new ExpectationParser(
                                    new NonterminalParser("Expression", "Expression", 1))))))));
            AddRule(new ConstructionStatementRule("ConstructionStatement", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new SequenceParser(
                        new NonterminalParser("ConstructionExpressionStatement", "ConstructionExpressionStatement", 1),
                        new CharParser(';')))));
            AddRule(new IncrementExpressionStatementRule("IncrementExpressionStatement", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new ActionParser("",
                        new SequenceParser(
                            new StringParser("++"),
                            new ExpectationParser(
                                new NonterminalParser("left", "Expression", 1)))),
                    new ActionParser("",
                        new SequenceParser(
                            new NonterminalParser("right", "Expression", 1),
                            new StringParser("++"))))));
            AddRule(new IncrementStatementRule("IncrementStatement", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new NonterminalParser("IncrementExpressionStatement", "IncrementExpressionStatement", 1))));
            AddRule(new DecrementExpressionStatementRule("DecrementExpressionStatement", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new ActionParser("",
                        new SequenceParser(
                            new StringParser("--"),
                            new ExpectationParser(
                                new NonterminalParser("left", "Expression", 1)))),
                    new ActionParser("",
                        new SequenceParser(
                            new NonterminalParser("right", "Expression", 1),
                            new StringParser("--"))))));
            AddRule(new DecrementStatementRule("DecrementStatement", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new NonterminalParser("DecrementExpressionStatement", "DecrementExpressionStatement", 1))));
            AddRule(new ExpressionStatementRule("ExpressionStatement", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new EmptyParser()),
                    new ActionParser("",
                        new SequenceParser(
                            new ActionParser("",
                                new NonterminalParser("e", "Expression", 1)),
                            new CharParser(';'))))));
            AddRule(new EmptyStatementRule("EmptyStatement", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new CharParser(';'))));
            AddRule(new ThrowStatementRule("ThrowStatement", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new SequenceParser(
                        new SequenceParser(
                            new KeywordParser("throw"),
                            new OptionalParser(
                                new NonterminalParser("Expression", "Expression", 1))),
                        new ExpectationParser(
                            new CharParser(';'))))));
            AddRule(new TryStatementRule("TryStatement", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new KeywordParser("try"),
                        new ActionParser("",
                            new NonterminalParser("tryBlock", "CompoundStatement", 1))),
                    new AlternativeParser(
                        new SequenceParser(
                            new PositiveParser(
                                new ActionParser("",
                                    new NonterminalParser("Catch", "Catch", 1))),
                            new OptionalParser(
                                new ActionParser("",
                                    new NonterminalParser("Finally", "Finally", 1)))),
                        new ActionParser("",
                            new NonterminalParser("fin", "Finally", 1))))));
            AddRule(new CatchRule("Catch", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new ActionParser("",
                        new SequenceParser(
                            new SequenceParser(
                                new SequenceParser(
                                    new SequenceParser(
                                        new SequenceParser(
                                            new KeywordParser("catch"),
                                            new ExpectationParser(
                                                new CharParser('('))),
                                        new ExpectationParser(
                                            new NonterminalParser("TypeExpr", "TypeExpr", 1))),
                                    new ExpectationParser(
                                        new NonterminalParser("Identifier", "Identifier", 0))),
                                new ExpectationParser(
                                    new CharParser(')'))),
                            new NonterminalParser("catchBlock1", "CompoundStatement", 1))),
                    new ActionParser("",
                        new SequenceParser(
                            new KeywordParser("catch"),
                            new NonterminalParser("catchBlock2", "CompoundStatement", 1))))));
            AddRule(new FinallyRule("Finally", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new SequenceParser(
                        new KeywordParser("finally"),
                        new NonterminalParser("CompoundStatement", "CompoundStatement", 1)))));
            AddRule(new UsingStatementRule("UsingStatement", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new SequenceParser(
                                    new KeywordParser("using"),
                                    new ExpectationParser(
                                        new CharParser('('))),
                                new ExpectationParser(
                                    new NonterminalParser("ConstructionExpressionStatement", "ConstructionExpressionStatement", 1))),
                            new ExpectationParser(
                                new CharParser(')'))),
                        new ExpectationParser(
                            new NonterminalParser("Statement", "Statement", 1))))));
        }
    }
}
