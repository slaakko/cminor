using System;
using System.Collections.Generic;
using System.Text.Parsing;
using System.Text;

namespace System.Text.Parsing
{
    public class stdlib : System.Text.Parsing.Grammar
    {
        public stdlib() : this(new ParsingDomain())
        {
        }
        public stdlib(ParsingDomain parsingDomain) : base("stdlib", parsingDomain.GetNamespaceScope("System.Text.Parsing"), parsingDomain)
        {
            Owner = 0;
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public class sbyteRule : System.Text.Parsing.RuleParser
        {
            public sbyteRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "sbyte";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public sbyte value;
            }
        }
        public class byteRule : System.Text.Parsing.RuleParser
        {
            public byteRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "byte";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public byte value;
            }
        }
        public class shortRule : System.Text.Parsing.RuleParser
        {
            public shortRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "short";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public short value;
            }
        }
        public class ushortRule : System.Text.Parsing.RuleParser
        {
            public ushortRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "ushort";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ushort value;
            }
        }
        public class intRule : System.Text.Parsing.RuleParser
        {
            public intRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "int";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public int value;
            }
        }
        public class uintRule : System.Text.Parsing.RuleParser
        {
            public uintRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "uint";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public uint value;
            }
        }
        public class longRule : System.Text.Parsing.RuleParser
        {
            public longRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "long";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public long value;
            }
        }
        public class ulongRule : System.Text.Parsing.RuleParser
        {
            public ulongRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "ulong";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ulong value;
            }
        }
        public class hexbyteRule : System.Text.Parsing.RuleParser
        {
            public hexbyteRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "byte";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public byte value;
            }
        }
        public class hexwordRule : System.Text.Parsing.RuleParser
        {
            public hexwordRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "ushort";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ushort value;
            }
        }
        public class hexdwordRule : System.Text.Parsing.RuleParser
        {
            public hexdwordRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "uint";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public uint value;
            }
        }
        public class hexqwordRule : System.Text.Parsing.RuleParser
        {
            public hexqwordRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "ulong";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ulong value;
            }
        }
        public class hexRule : System.Text.Parsing.RuleParser
        {
            public hexRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "ulong";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ulong value;
            }
        }
        public class hex_literalRule : System.Text.Parsing.RuleParser
        {
            public hex_literalRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "ulong";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ulong value;
            }
        }
        public class octaldigitRule : System.Text.Parsing.RuleParser
        {
            public octaldigitRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "int";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public int value;
            }
        }
        public class floatRule : System.Text.Parsing.RuleParser
        {
            public floatRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "float";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public float value;
            }
        }
        public class doubleRule : System.Text.Parsing.RuleParser
        {
            public doubleRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "double";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public double value;
            }
        }
        public class urealRule : System.Text.Parsing.RuleParser
        {
            public urealRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "double";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public double value;
            }
        }
        public class numberRule : System.Text.Parsing.RuleParser
        {
            public numberRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "double";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public double value;
            }
        }
        public class boolRule : System.Text.Parsing.RuleParser
        {
            public boolRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "bool";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public bool value;
            }
        }
        public class identifierRule : System.Text.Parsing.RuleParser
        {
            public identifierRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "string";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public string value;
            }
        }
        public class qualified_idRule : System.Text.Parsing.RuleParser
        {
            public qualified_idRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "string";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public string value;
            }
        }
        public class escapeRule : System.Text.Parsing.RuleParser
        {
            public escapeRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "char";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public char value;
            }
        }
        public class charRule : System.Text.Parsing.RuleParser
        {
            public charRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "char";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public char value;
            }
        }
        public class stringRule : System.Text.Parsing.RuleParser
        {
            public stringRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "string";
                LocalVariables.Add(new AttrOrVar("StringBuilder", "s"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public string value;
                public StringBuilder s;
            }
        }
        public override void GetReferencedGrammars()
        {
        }
        public override void CreateRules()
        {
            AddRule(new RuleParser("spaces", GetScope(), Domain.GetNextRuleId(),
                new PositiveParser(
                    new SpaceParser())));
            AddRule(new RuleParser("newline", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new AlternativeParser(
                        new StringParser("\r\n"),
                        new StringParser("\n")),
                    new StringParser("\r"))));
            AddRule(new RuleParser("comment", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new NonterminalParser("line_comment", "line_comment", 0),
                    new NonterminalParser("block_comment", "block_comment", 0))));
            AddRule(new RuleParser("line_comment", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new StringParser("//"),
                        new KleeneStarParser(
                            new CharSetParser("\r\n", true))),
                    new NonterminalParser("newline", "newline", 0))));
            AddRule(new RuleParser("block_comment", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new StringParser("/*"),
                        new KleeneStarParser(
                            new AlternativeParser(
                                new AlternativeParser(
                                    new NonterminalParser("string", "string", 0),
                                    new NonterminalParser("char", "char", 0)),
                                new DifferenceParser(
                                    new AnyCharParser(),
                                    new StringParser("*/"))))),
                    new StringParser("*/"))));
            AddRule(new RuleParser("spaces_and_comments", GetScope(), Domain.GetNextRuleId(),
                new PositiveParser(
                    new AlternativeParser(
                        new SpaceParser(),
                        new NonterminalParser("comment", "comment", 0)))));
            AddRule(new RuleParser("digit_sequence", GetScope(), Domain.GetNextRuleId(),
                new TokenParser(
                    new PositiveParser(
                        new DigitParser()))));
            AddRule(new RuleParser("sign", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new CharParser('+'),
                    new CharParser('-'))));
            AddRule(new sbyteRule("sbyte", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new SequenceParser(
                            new OptionalParser(
                                new NonterminalParser("sign", "sign", 0)),
                            new NonterminalParser("digit_sequence", "digit_sequence", 0))))));
            AddRule(new byteRule("byte", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new NonterminalParser("digit_sequence", "digit_sequence", 0)))));
            AddRule(new shortRule("short", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new SequenceParser(
                            new OptionalParser(
                                new NonterminalParser("sign", "sign", 0)),
                            new NonterminalParser("digit_sequence", "digit_sequence", 0))))));
            AddRule(new ushortRule("ushort", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new NonterminalParser("digit_sequence", "digit_sequence", 0)))));
            AddRule(new intRule("int", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new SequenceParser(
                            new OptionalParser(
                                new NonterminalParser("sign", "sign", 0)),
                            new NonterminalParser("digit_sequence", "digit_sequence", 0))))));
            AddRule(new uintRule("uint", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new NonterminalParser("digit_sequence", "digit_sequence", 0))));
            AddRule(new longRule("long", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new SequenceParser(
                            new OptionalParser(
                                new NonterminalParser("sign", "sign", 0)),
                            new NonterminalParser("digit_sequence", "digit_sequence", 0))))));
            AddRule(new ulongRule("ulong", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new NonterminalParser("digit_sequence", "digit_sequence", 0))));
            AddRule(new hexbyteRule("hexbyte", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new PositiveParser(
                            new HexDigitParser())))));
            AddRule(new hexwordRule("hexword", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new PositiveParser(
                            new HexDigitParser())))));
            AddRule(new hexdwordRule("hexdword", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new PositiveParser(
                            new HexDigitParser())))));
            AddRule(new hexqwordRule("hexqword", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new PositiveParser(
                            new HexDigitParser())))));
            AddRule(new hexRule("hex", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new NonterminalParser("hexqword", "hexqword", 0))));
            AddRule(new hex_literalRule("hex_literal", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new SequenceParser(
                            new AlternativeParser(
                                new StringParser("0x"),
                                new StringParser("0X")),
                            new ExpectationParser(
                                new NonterminalParser("hex", "hex", 0)))))));
            AddRule(new octaldigitRule("octaldigit", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new CharSetParser("0-7"))));
            AddRule(new floatRule("float", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new AlternativeParser(
                            new SequenceParser(
                                new SequenceParser(
                                    new OptionalParser(
                                        new NonterminalParser("sign", "sign", 0)),
                                    new NonterminalParser("fractional_real", "fractional_real", 0)),
                                new OptionalParser(
                                    new NonterminalParser("exponent_part", "exponent_part", 0))),
                            new SequenceParser(
                                new SequenceParser(
                                    new OptionalParser(
                                        new NonterminalParser("sign", "sign", 0)),
                                    new NonterminalParser("digit_sequence", "digit_sequence", 0)),
                                new NonterminalParser("exponent_part", "exponent_part", 0)))))));
            AddRule(new doubleRule("double", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new AlternativeParser(
                            new SequenceParser(
                                new SequenceParser(
                                    new OptionalParser(
                                        new NonterminalParser("sign", "sign", 0)),
                                    new NonterminalParser("fractional_real", "fractional_real", 0)),
                                new OptionalParser(
                                    new NonterminalParser("exponent_part", "exponent_part", 0))),
                            new SequenceParser(
                                new SequenceParser(
                                    new OptionalParser(
                                        new NonterminalParser("sign", "sign", 0)),
                                    new NonterminalParser("digit_sequence", "digit_sequence", 0)),
                                new NonterminalParser("exponent_part", "exponent_part", 0)))))));
            AddRule(new urealRule("ureal", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new AlternativeParser(
                            new SequenceParser(
                                new NonterminalParser("fractional_real", "fractional_real", 0),
                                new OptionalParser(
                                    new NonterminalParser("exponent_part", "exponent_part", 0))),
                            new SequenceParser(
                                new NonterminalParser("digit_sequence", "digit_sequence", 0),
                                new NonterminalParser("exponent_part", "exponent_part", 0)))))));
            AddRule(new RuleParser("fractional_real", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new TokenParser(
                        new SequenceParser(
                            new SequenceParser(
                                new OptionalParser(
                                    new NonterminalParser("digit_sequence", "digit_sequence", 0)),
                                new CharParser('.')),
                            new NonterminalParser("digit_sequence", "digit_sequence", 0))),
                    new TokenParser(
                        new SequenceParser(
                            new NonterminalParser("digit_sequence", "digit_sequence", 0),
                            new CharParser('.'))))));
            AddRule(new RuleParser("exponent_part", GetScope(), Domain.GetNextRuleId(),
                new TokenParser(
                    new SequenceParser(
                        new SequenceParser(
                            new CharSetParser("eE"),
                            new OptionalParser(
                                new NonterminalParser("sign", "sign", 0))),
                        new NonterminalParser("digit_sequence", "digit_sequence", 0)))));
            AddRule(new numberRule("number", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new ActionParser("",
                        new NonterminalParser("r", "double", 0)),
                    new ActionParser("",
                        new NonterminalParser("i", "int", 0)))));
            AddRule(new boolRule("bool", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new ActionParser("",
                        new KeywordParser("true")),
                    new ActionParser("",
                        new KeywordParser("false")))));
            AddRule(new identifierRule("identifier", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new SequenceParser(
                            new AlternativeParser(
                                new LetterParser(),
                                new CharParser('_')),
                            new KleeneStarParser(
                                new AlternativeParser(
                                    new AlternativeParser(
                                        new LetterParser(),
                                        new DigitParser()),
                                    new CharParser('_'))))))));
            AddRule(new qualified_idRule("qualified_id", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new SequenceParser(
                            new NonterminalParser("first", "identifier", 0),
                            new KleeneStarParser(
                                new SequenceParser(
                                    new CharParser('.'),
                                    new NonterminalParser("rest", "identifier", 0))))))));
            AddRule(new escapeRule("escape", GetScope(), Domain.GetNextRuleId(),
                new TokenParser(
                    new SequenceParser(
                        new CharParser('\\'),
                        new AlternativeParser(
                            new AlternativeParser(
                                new AlternativeParser(
                                    new SequenceParser(
                                        new CharSetParser("xX"),
                                        new ActionParser("",
                                            new NonterminalParser("x", "hex", 0))),
                                    new ActionParser("",
                                        new SequenceParser(
                                            new SequenceParser(
                                                new NonterminalParser("o1", "octaldigit", 0),
                                                new NonterminalParser("o2", "octaldigit", 0)),
                                            new NonterminalParser("o3", "octaldigit", 0)))),
                                new SequenceParser(
                                    new CharSetParser("dD"),
                                    new ActionParser("",
                                        new NonterminalParser("decimalEscape", "uint", 0)))),
                            new ActionParser("",
                                new CharSetParser("dDxX", true)))))));
            AddRule(new charRule("char", GetScope(), Domain.GetNextRuleId(),
                new TokenParser(
                    new SequenceParser(
                        new SequenceParser(
                            new CharParser('\''),
                            new AlternativeParser(
                                new ActionParser("",
                                    new CharSetParser("\\\r\n", true)),
                                new ActionParser("",
                                    new NonterminalParser("escape", "escape", 0)))),
                        new ExpectationParser(
                            new CharParser('\''))))));
            AddRule(new stringRule("string", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new SequenceParser(
                            new SequenceParser(
                                new ActionParser("",
                                    new CharParser('"')),
                                new KleeneStarParser(
                                    new AlternativeParser(
                                        new ActionParser("",
                                            new PositiveParser(
                                                new CharSetParser("\"\\\r\n", true))),
                                        new ActionParser("",
                                            new NonterminalParser("escape", "escape", 0))))),
                            new ExpectationParser(
                                new CharParser('"')))))));
        }
    }
}
