using System;
using System.Collections.Generic;
using System.Text.Parsing;
using Code;

namespace Syntax
{
    public class LibraryFileGrammar : System.Text.Parsing.Grammar
    {
        public LibraryFileGrammar() : this(new ParsingDomain())
        {
        }
        public LibraryFileGrammar(ParsingDomain parsingDomain) : base("LibraryFileGrammar", parsingDomain.GetNamespaceScope("Syntax"), parsingDomain)
        {
            Owner = 0;
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public class LibraryFileRule : System.Text.Parsing.RuleParser
        {
            public LibraryFileRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingDomain", "parsingDomain"));
                LocalVariables.Add(new AttrOrVar("ParsingContext", "ctx"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.parsingDomain = cast<ParsingDomain>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingDomain parsingDomain;
                public ParsingContext ctx;
            }
        }
        public class NamespaceContentRule : System.Text.Parsing.RuleParser
        {
            public NamespaceContentRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingDomain", "parsingDomain"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.parsingDomain = cast<ParsingDomain>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingDomain parsingDomain;
                public ParsingContext ctx;
            }
        }
        public class NamespaceRule : System.Text.Parsing.RuleParser
        {
            public NamespaceRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingDomain", "parsingDomain"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.parsingDomain = cast<ParsingDomain>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingDomain parsingDomain;
                public ParsingContext ctx;
            }
        }
        public class GrammarRule : System.Text.Parsing.RuleParser
        {
            public GrammarRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Grammar";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public Grammar value;
            }
        }
        public class GrammarContentRule : System.Text.Parsing.RuleParser
        {
            public GrammarContentRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Grammar", "grammar"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.grammar = cast<Grammar>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Grammar grammar;
                public ParsingContext ctx;
            }
        }
        public class RuleRule : System.Text.Parsing.RuleParser
        {
            public RuleRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "RuleParser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public RuleParser value;
            }
        }
        public override void GetReferencedGrammars()
        {
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("identifier", this, "System.Text.Parsing.stdlib.identifier"));
            AddRuleLink(new RuleLink("qualified_id", this, "System.Text.Parsing.stdlib.qualified_id"));
            AddRuleLink(new RuleLink("spaces_and_comments", this, "System.Text.Parsing.stdlib.spaces_and_comments"));
            AddRuleLink(new RuleLink("Identifier", this, "ElementGrammar.Identifier"));
            AddRuleLink(new RuleLink("Signature", this, "ElementGrammar.Signature"));
            AddRule(new LibraryFileRule("LibraryFile", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new EmptyParser()),
                    new NonterminalParser("NamespaceContent", "NamespaceContent", 2))));
            AddRule(new NamespaceContentRule("NamespaceContent", GetScope(), Domain.GetNextRuleId(),
                new KleeneStarParser(
                    new AlternativeParser(
                        new ActionParser("",
                            new NonterminalParser("Grammar", "Grammar", 2)),
                        new NonterminalParser("Namespace", "Namespace", 2)))));
            AddRule(new NamespaceRule("Namespace", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new KeywordParser("namespace"),
                                new ActionParser("",
                                    new ExpectationParser(
                                        new NonterminalParser("ns", "qualified_id", 0)))),
                            new ExpectationParser(
                                new CharParser('{'))),
                        new NonterminalParser("NamespaceContent", "NamespaceContent", 2)),
                    new ActionParser("",
                        new ExpectationParser(
                            new CharParser('}'))))));
            AddRule(new GrammarRule("Grammar", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new KeywordParser("grammar"),
                                new ActionParser("",
                                    new ExpectationParser(
                                        new NonterminalParser("grammarName", "Identifier", 0)))),
                            new ExpectationParser(
                                new CharParser('{'))),
                        new NonterminalParser("GrammarContent", "GrammarContent", 2)),
                    new ExpectationParser(
                        new CharParser('}')))));
            AddRule(new GrammarContentRule("GrammarContent", GetScope(), Domain.GetNextRuleId(),
                new KleeneStarParser(
                    new ActionParser("",
                        new NonterminalParser("Rule", "Rule", 2)))));
            AddRule(new RuleRule("Rule", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new ActionParser("",
                            new NonterminalParser("ruleName", "Identifier", 0)),
                        new NonterminalParser("Signature", "Signature", 2)),
                    new CharParser(';'))));
            SkipRuleName = "spaces_and_comments";
        }
    }
}
