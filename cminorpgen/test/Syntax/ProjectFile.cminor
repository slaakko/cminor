using System;
using System.Collections.Generic;
using System.Text.Parsing;

namespace Syntax
{
    public class ProjectFileGrammar : System.Text.Parsing.Grammar
    {
        public ProjectFileGrammar() : this(new ParsingDomain())
        {
        }
        public ProjectFileGrammar(ParsingDomain parsingDomain) : base("ProjectFileGrammar", parsingDomain.GetNamespaceScope("Syntax"), parsingDomain)
        {
            Owner = 0;
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public class ProjectFileRule : System.Text.Parsing.RuleParser
        {
            public ProjectFileRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Project";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Project value;
            }
        }
        public class ProjectFileContentRule : System.Text.Parsing.RuleParser
        {
            public ProjectFileContentRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Project", "project"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.project = cast<Project>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Project project;
            }
        }
        public class SourceRule : System.Text.Parsing.RuleParser
        {
            public SourceRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "string";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public string value;
            }
        }
        public class ReferenceRule : System.Text.Parsing.RuleParser
        {
            public ReferenceRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "string";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public string value;
            }
        }
        public class FilePathRule : System.Text.Parsing.RuleParser
        {
            public FilePathRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "string";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public string value;
            }
        }
        public override void GetReferencedGrammars()
        {
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("qualified_id", this, "System.Text.Parsing.stdlib.qualified_id"));
            AddRuleLink(new RuleLink("spaces_and_comments", this, "System.Text.Parsing.stdlib.spaces_and_comments"));
            AddRule(new ProjectFileRule("ProjectFile", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new SequenceParser(
                            new KeywordParser("project"),
                            new ActionParser("",
                                new NonterminalParser("projectName", "qualified_id", 0))),
                        new CharParser(';')),
                    new NonterminalParser("ProjectFileContent", "ProjectFileContent", 1))));
            AddRule(new ProjectFileContentRule("ProjectFileContent", GetScope(), Domain.GetNextRuleId(),
                new KleeneStarParser(
                    new AlternativeParser(
                        new ActionParser("",
                            new NonterminalParser("Source", "Source", 0)),
                        new ActionParser("",
                            new NonterminalParser("Reference", "Reference", 0))))));
            AddRule(new SourceRule("Source", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new SequenceParser(
                        new SequenceParser(
                            new KeywordParser("source"),
                            new NonterminalParser("FilePath", "FilePath", 0)),
                        new CharParser(';')))));
            AddRule(new ReferenceRule("Reference", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new SequenceParser(
                        new SequenceParser(
                            new KeywordParser("reference"),
                            new NonterminalParser("FilePath", "FilePath", 0)),
                        new CharParser(';')))));
            AddRule(new FilePathRule("FilePath", GetScope(), Domain.GetNextRuleId(),
                new TokenParser(
                    new SequenceParser(
                        new SequenceParser(
                            new CharParser('<'),
                            new ActionParser("",
                                new PositiveParser(
                                    new CharSetParser(">\r\n", true)))),
                        new CharParser('>')))));
            SkipRuleName = "spaces_and_comments";
        }
    }
}
