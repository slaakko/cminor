using System;
using System.Collections.Generic;
using System.Text.Parsing;
using Code;

namespace Syntax
{
    public class GrammarGrammar : System.Text.Parsing.Grammar
    {
        public GrammarGrammar() : this(new ParsingDomain())
        {
        }
        public GrammarGrammar(ParsingDomain parsingDomain) : base("GrammarGrammar", parsingDomain.GetNamespaceScope("Syntax"), parsingDomain)
        {
            Owner = 0;
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public class GrammarRule : System.Text.Parsing.RuleParser
        {
            public GrammarRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Grammar";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public Grammar value;
            }
        }
        public class GrammarContentRule : System.Text.Parsing.RuleParser
        {
            public GrammarContentRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Grammar", "grammar"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.grammar = cast<Grammar>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Grammar grammar;
                public ParsingContext ctx;
            }
        }
        public class StartClauseRule : System.Text.Parsing.RuleParser
        {
            public StartClauseRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Grammar", "grammar"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.grammar = cast<Grammar>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Grammar grammar;
            }
        }
        public class SkipClauseRule : System.Text.Parsing.RuleParser
        {
            public SkipClauseRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Grammar", "grammar"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.grammar = cast<Grammar>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Grammar grammar;
            }
        }
        public override void GetReferencedGrammars()
        {
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("Identifier", this, "ElementGrammar.Identifier"));
            AddRuleLink(new RuleLink("QualifiedId", this, "ElementGrammar.QualifiedId"));
            AddRuleLink(new RuleLink("RuleLink", this, "ElementGrammar.RuleLink"));
            AddRuleLink(new RuleLink("Rule", this, "RuleGrammar.Rule"));
            AddRule(new GrammarRule("Grammar", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new KeywordParser("grammar"),
                                new ActionParser("",
                                    new ExpectationParser(
                                        new NonterminalParser("name", "Identifier", 0)))),
                            new ExpectationParser(
                                new CharParser('{'))),
                        new NonterminalParser("GrammarContent", "GrammarContent", 2)),
                    new ExpectationParser(
                        new CharParser('}')))));
            AddRule(new GrammarContentRule("GrammarContent", GetScope(), Domain.GetNextRuleId(),
                new KleeneStarParser(
                    new AlternativeParser(
                        new AlternativeParser(
                            new AlternativeParser(
                                new NonterminalParser("StartClause", "StartClause", 1),
                                new NonterminalParser("SkipClause", "SkipClause", 1)),
                            new NonterminalParser("RuleLink", "RuleLink", 1)),
                        new ActionParser("",
                            new NonterminalParser("Rule", "Rule", 2))))));
            AddRule(new StartClauseRule("StartClause", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new KeywordParser("start"),
                        new ExpectationParser(
                            new NonterminalParser("strt", "Identifier", 0))),
                    new ActionParser("",
                        new CharParser(';')))));
            AddRule(new SkipClauseRule("SkipClause", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new KeywordParser("skip"),
                        new ExpectationParser(
                            new NonterminalParser("skp", "QualifiedId", 0))),
                    new ActionParser("",
                        new CharParser(';')))));
        }
    }
}
