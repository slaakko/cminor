using System;
using System.Collections.Generic;
using System.Text.Parsing;
using Code;

namespace Syntax
{
    public class CompositeGrammar : System.Text.Parsing.Grammar
    {
        public CompositeGrammar() : this(new ParsingDomain())
        {
        }
        public CompositeGrammar(ParsingDomain parsingDomain) : base("CompositeGrammar", parsingDomain.GetNamespaceScope("Syntax"), parsingDomain)
        {
            Owner = 0;
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public class AlternativeRule : System.Text.Parsing.RuleParser
        {
            public AlternativeRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public Parser value;
            }
        }
        public class SequenceRule : System.Text.Parsing.RuleParser
        {
            public SequenceRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public Parser value;
            }
        }
        public class DifferenceRule : System.Text.Parsing.RuleParser
        {
            public DifferenceRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public Parser value;
            }
        }
        public class ExclusiveOrRule : System.Text.Parsing.RuleParser
        {
            public ExclusiveOrRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public Parser value;
            }
        }
        public class IntersectionRule : System.Text.Parsing.RuleParser
        {
            public IntersectionRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public Parser value;
            }
        }
        public class ListRule : System.Text.Parsing.RuleParser
        {
            public ListRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public Parser value;
            }
        }
        public class PostfixRule : System.Text.Parsing.RuleParser
        {
            public PostfixRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public Parser value;
            }
        }
        public override void GetReferencedGrammars()
        {
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("Primary", this, "PrimaryGrammar.Primary"));
            AddRule(new AlternativeRule("Alternative", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new NonterminalParser("left", "Sequence", 2)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new CharParser('|'),
                            new ActionParser("",
                                new ExpectationParser(
                                    new NonterminalParser("right", "Sequence", 2))))))));
            AddRule(new SequenceRule("Sequence", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new NonterminalParser("left", "Difference", 2)),
                    new KleeneStarParser(
                        new ActionParser("",
                            new NonterminalParser("right", "Difference", 2))))));
            AddRule(new DifferenceRule("Difference", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new NonterminalParser("left", "ExclusiveOr", 2)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new CharParser('-'),
                            new ActionParser("",
                                new ExpectationParser(
                                    new NonterminalParser("right", "ExclusiveOr", 2))))))));
            AddRule(new ExclusiveOrRule("ExclusiveOr", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new NonterminalParser("left", "Intersection", 2)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new CharParser('^'),
                            new ActionParser("",
                                new ExpectationParser(
                                    new NonterminalParser("right", "Intersection", 2))))))));
            AddRule(new IntersectionRule("Intersection", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new NonterminalParser("left", "List", 2)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new CharParser('&'),
                            new ActionParser("",
                                new NonterminalParser("right", "List", 2)))))));
            AddRule(new ListRule("List", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new NonterminalParser("left", "Postfix", 2)),
                    new OptionalParser(
                        new SequenceParser(
                            new CharParser('%'),
                            new ActionParser("",
                                new NonterminalParser("right", "Postfix", 2)))))));
            AddRule(new PostfixRule("Postfix", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new NonterminalParser("Primary", "Primary", 2)),
                    new OptionalParser(
                        new AlternativeParser(
                            new AlternativeParser(
                                new ActionParser("",
                                    new CharParser('*')),
                                new ActionParser("",
                                    new CharParser('+'))),
                            new ActionParser("",
                                new CharParser('?')))))));
        }
    }
}
