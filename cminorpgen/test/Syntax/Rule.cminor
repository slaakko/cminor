using System;
using System.Collections.Generic;
using System.Text.Parsing;
using Code;

namespace Syntax
{
    public class RuleGrammar : System.Text.Parsing.Grammar
    {
        public RuleGrammar() : this(new ParsingDomain())
        {
        }
        public RuleGrammar(ParsingDomain parsingDomain) : base("RuleGrammar", parsingDomain.GetNamespaceScope("Syntax"), parsingDomain)
        {
            Owner = 0;
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public RuleParser Parse(string content, int fileIndex, string fileName, Scope enclosingScope, ParsingContext ctx)
        {
            Stack<object> stack = new Stack<object>();
            Scanner scanner = new Scanner(content, fileIndex, fileName, SkipRule);
            ParsingData parsingData = new ParsingData(Domain.NumRules);
            scanner.Data = parsingData;
            System.IO.StreamWriter log = Log;
            XmlLog xmlLog = null;
            try
            {
                if (log != null)
                {
                    xmlLog = new XmlLog(log);
                    scanner.Log = xmlLog;
                    xmlLog.WriteBeginRule("parse");
                    xmlLog.IncIndent();
                }
                stack.Push(enclosingScope);
                stack.Push(ctx);
                Match match = Parse(scanner, stack, parsingData);
                Span stop = scanner.SpanValue;
                if (log != null)
                {
                    xmlLog.DecIndent();
                    xmlLog.WriteEndRule("parse");
                }
                if (!match.Hit || stop.Start != content.Length)
                {
                    RuleParser startRule = StartRule;
                    if (startRule != null)
                    {
                        throw new ExpectationFailure(startRule.Info, fileName, stop, content);
                    }
                    else
                    {
                        throw new Exception("grammar '" + Name + "' has no start rule");
                    }
                }
            }
            finally
            {
                if (xmlLog != null)
                {
                    xmlLog.Close();
                }
            }
            RuleParser result = cast<RuleParser>(stack.Pop());
            return result;
        }
        public class RuleRule : System.Text.Parsing.RuleParser
        {
            public RuleRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "RuleParser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                NonterminalParser ruleHeaderNonterminalParser = GetNonterminal("RuleHeader");
                ruleHeaderNonterminalParser.Pre = PreRuleHeader;
                ruleHeaderNonterminalParser.Post = PostRuleHeader;
                NonterminalParser ruleBodyNonterminalParser = GetNonterminal("RuleBody");
                ruleBodyNonterminalParser.Pre = PreRuleBody;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = context.fromRuleHeader;
            }
            public void PreRuleHeader(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.enclosingScope);
                stack.Push(context.ctx);
            }
            public void PostRuleHeader(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromRuleHeader = cast<RuleParser>(stack.Pop());
                }
            }
            public void PreRuleBody(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.value);
                stack.Push(context.ctx);
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public RuleParser value;
                public RuleParser fromRuleHeader;
            }
        }
        public class RuleHeaderRule : System.Text.Parsing.RuleParser
        {
            public RuleHeaderRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "RuleParser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                NonterminalParser nameNonterminalParser = GetNonterminal("name");
                nameNonterminalParser.Post = Postname;
                NonterminalParser signatureNonterminalParser = GetNonterminal("Signature");
                signatureNonterminalParser.Pre = PreSignature;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = new RuleParser(context.fromname, context.enclosingScope);
                context.value.SpanValue = span;
            }
            public void Postname(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromname = cast<string>(stack.Pop());
                }
            }
            public void PreSignature(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.value);
                stack.Push(context.ctx);
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public RuleParser value;
                public string fromname;
            }
        }
        public class RuleBodyRule : System.Text.Parsing.RuleParser
        {
            public RuleBodyRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("RuleParser", "rule"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.rule = cast<RuleParser>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                NonterminalParser definitionNonterminalParser = GetNonterminal("definition");
                definitionNonterminalParser.Pre = Predefinition;
                definitionNonterminalParser.Post = Postdefinition;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.rule.Definition = context.fromdefinition;
            }
            public void Predefinition(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.rule.GetScope());
                stack.Push(context.ctx);
            }
            public void Postdefinition(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromdefinition = cast<Parser>(stack.Pop());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public RuleParser rule;
                public ParsingContext ctx;
                public Parser fromdefinition;
            }
        }
        public override void GetReferencedGrammars()
        {
            ParsingDomain parsingDomain = Domain;
            Grammar grammar0 = parsingDomain.GetGrammar("Syntax.ElementGrammar");
            if (grammar0 == null)
            {
                grammar0 = new Syntax.ElementGrammar(parsingDomain);
            }
            ReferencedGrammars.Add(grammar0);
            Grammar grammar1 = parsingDomain.GetGrammar("Syntax.CompositeGrammar");
            if (grammar1 == null)
            {
                grammar1 = new Syntax.CompositeGrammar(parsingDomain);
            }
            ReferencedGrammars.Add(grammar1);
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("Identifier", this, "ElementGrammar.Identifier"));
            AddRuleLink(new RuleLink("Signature", this, "ElementGrammar.Signature"));
            AddRuleLink(new RuleLink("Alternative", this, "CompositeGrammar.Alternative"));
            AddRule(new RuleRule("Rule", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new ActionParser("A0",
                            new NonterminalParser("RuleHeader", "RuleHeader", 2)),
                        new StringParser("::=")),
                    new NonterminalParser("RuleBody", "RuleBody", 2))));
            AddRule(new RuleHeaderRule("RuleHeader", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("A0",
                        new NonterminalParser("name", "Identifier", 0)),
                    new NonterminalParser("Signature", "Signature", 2))));
            AddRule(new RuleBodyRule("RuleBody", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("A0",
                    new SequenceParser(
                        new ExpectationParser(
                            new NonterminalParser("definition", "Alternative", 2)),
                        new ExpectationParser(
                            new CharParser(';'))))));
        }
    }
}
