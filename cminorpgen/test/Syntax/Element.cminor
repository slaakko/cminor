using System;
using System.Collections.Generic;
using System.Text.Parsing;
using Code;
using System.Text.Parsing.CodeDom;

namespace Syntax
{
    public class ElementGrammar : System.Text.Parsing.Grammar
    {
        public ElementGrammar() : this(new ParsingDomain())
        {
        }
        public ElementGrammar(ParsingDomain parsingDomain) : base("ElementGrammar", parsingDomain.GetNamespaceScope("Syntax"), parsingDomain)
        {
            Owner = 0;
            keywords0 = new List<string>();
            keywords0.Add("var");
            keywords0.Add("skip");
            keywords0.Add("token");
            keywords0.Add("grammar");
            keywords0.Add("letter");
            keywords0.Add("keyword");
            keywords0.Add("start");
            keywords0.Add("punctuation");
            keywords0.Add("hexdigit");
            keywords0.Add("digit");
            keywords0.Add("empty");
            keywords0.Add("keyword_list");
            keywords0.Add("anychar");
            keywords0.Add("using");
            keywords0.Add("space");
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public class RuleLinkRule : System.Text.Parsing.RuleParser
        {
            public RuleLinkRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Grammar", "grammar"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.grammar = cast<Grammar>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Grammar grammar;
            }
        }
        public class SignatureRule : System.Text.Parsing.RuleParser
        {
            public SignatureRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("RuleParser", "rule"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.rule = cast<RuleParser>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public RuleParser rule;
                public ParsingContext ctx;
            }
        }
        public class ParameterListRule : System.Text.Parsing.RuleParser
        {
            public ParameterListRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("RuleParser", "rule"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.rule = cast<RuleParser>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public RuleParser rule;
                public ParsingContext ctx;
            }
        }
        public class VariableRule : System.Text.Parsing.RuleParser
        {
            public VariableRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("RuleParser", "rule"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.rule = cast<RuleParser>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public RuleParser rule;
                public ParsingContext ctx;
            }
        }
        public class ParameterRule : System.Text.Parsing.RuleParser
        {
            public ParameterRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("RuleParser", "rule"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.rule = cast<RuleParser>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public RuleParser rule;
                public ParsingContext ctx;
            }
        }
        public class ReturnTypeRule : System.Text.Parsing.RuleParser
        {
            public ReturnTypeRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("RuleParser", "rule"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.rule = cast<RuleParser>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public RuleParser rule;
                public ParsingContext ctx;
            }
        }
        public class IdentifierRule : System.Text.Parsing.RuleParser
        {
            public IdentifierRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "string";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public string value;
            }
        }
        public class QualifiedIdRule : System.Text.Parsing.RuleParser
        {
            public QualifiedIdRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "string";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public string value;
            }
        }
        public class StringArrayRule : System.Text.Parsing.RuleParser
        {
            public StringArrayRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("List<string>", "array"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.array = cast<List<string>>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public List<string> array;
            }
        }
        public override void GetReferencedGrammars()
        {
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("qualified_id", this, "System.Text.Parsing.stdlib.qualified_id"));
            AddRuleLink(new RuleLink("identifier", this, "System.Text.Parsing.stdlib.identifier"));
            AddRuleLink(new RuleLink("string", this, "System.Text.Parsing.stdlib.string"));
            AddRuleLink(new RuleLink("Declarator", this, "Code.IdentifierGrammar.Identifier"));
            AddRuleLink(new RuleLink("TypeExpr", this, "Code.TypeExprGrammar.TypeExpr"));
            AddRule(new RuleLinkRule("RuleLink", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new ActionParser("",
                        new SequenceParser(
                            new SequenceParser(
                                new SequenceParser(
                                    new SequenceParser(
                                        new KeywordParser("using"),
                                        new NonterminalParser("aliasName", "identifier", 0)),
                                    new CharParser('=')),
                                new NonterminalParser("ruleName", "qualified_id", 0)),
                            new CharParser(';'))),
                    new ActionParser("",
                        new SequenceParser(
                            new SequenceParser(
                                new KeywordParser("using"),
                                new NonterminalParser("qualified_id", "qualified_id", 0)),
                            new CharParser(';'))))));
            AddRule(new SignatureRule("Signature", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new OptionalParser(
                        new NonterminalParser("ParameterList", "ParameterList", 2)),
                    new OptionalParser(
                        new NonterminalParser("ReturnType", "ReturnType", 2)))));
            AddRule(new ParameterListRule("ParameterList", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new CharParser('('),
                        new ListParser(
                            new AlternativeParser(
                                new NonterminalParser("Variable", "Variable", 2),
                                new NonterminalParser("Parameter", "Parameter", 2)),
                            new CharParser(','))),
                    new ExpectationParser(
                        new CharParser(')')))));
            AddRule(new VariableRule("Variable", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new KeywordParser("var"),
                        new NonterminalParser("TypeExpr", "TypeExpr", 1)),
                    new ActionParser("",
                        new NonterminalParser("Declarator", "Declarator", 0)))));
            AddRule(new ParameterRule("Parameter", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new NonterminalParser("TypeExpr", "TypeExpr", 1),
                    new ActionParser("",
                        new NonterminalParser("Declarator", "Declarator", 0)))));
            AddRule(new ReturnTypeRule("ReturnType", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new CharParser(':'),
                    new ActionParser("",
                        new NonterminalParser("TypeExpr", "TypeExpr", 1)))));
            AddRule(new RuleParser("Keyword", GetScope(), Domain.GetNextRuleId(),
                new KeywordListParser("identifier", keywords0)));
            AddRule(new IdentifierRule("Identifier", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new DifferenceParser(
                        new NonterminalParser("identifier", "identifier", 0),
                        new NonterminalParser("Keyword", "Keyword", 0)))));
            AddRule(new QualifiedIdRule("QualifiedId", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new SequenceParser(
                            new NonterminalParser("first", "Identifier", 0),
                            new KleeneStarParser(
                                new SequenceParser(
                                    new CharParser('.'),
                                    new NonterminalParser("rest", "Identifier", 0))))))));
            AddRule(new StringArrayRule("StringArray", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new CharParser('['),
                        new ListParser(
                            new ActionParser("",
                                new NonterminalParser("str", "string", 0)),
                            new CharParser(','))),
                    new ExpectationParser(
                        new CharParser(']')))));
        }
        private List<string> keywords0;
    }
}
