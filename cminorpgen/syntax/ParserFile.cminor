using System;
using System.Collections.Generic;
using System.Text.Parsing;
using Code;
using System.Text.Parsing.CodeDom;

namespace Syntax
{
    public class ParserFileGrammar : System.Text.Parsing.Grammar
    {
        public ParserFileGrammar() : this(new ParsingDomain())
        {
        }
        public ParserFileGrammar(ParsingDomain parsingDomain) : base("ParserFileGrammar", parsingDomain.GetNamespaceScope("Syntax"), parsingDomain)
        {
            Owner = 0;
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public class ParserFileRule : System.Text.Parsing.RuleParser
        {
            public ParserFileRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("int", "id_"));
                InheritedAttributes.Add(new AttrOrVar("ParsingDomain", "parsingDomain_"));
                ValueTypeName = "ParserFileContent";
                LocalVariables.Add(new AttrOrVar("ParsingContext", "ctx"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.parsingDomain_ = cast<ParsingDomain>(stack.Pop());
                context.id_ = cast<int>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public int id_;
                public ParsingDomain parsingDomain_;
                public ParserFileContent value;
                public ParsingContext ctx;
            }
        }
        public class UsingDeclarationsRule : System.Text.Parsing.RuleParser
        {
            public UsingDeclarationsRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParserFileContent", "parserFileContent"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.parserFileContent = cast<ParserFileContent>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParserFileContent parserFileContent;
            }
        }
        public class UsingDeclarationRule : System.Text.Parsing.RuleParser
        {
            public UsingDeclarationRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParserFileContent", "parserFileContent"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.parserFileContent = cast<ParserFileContent>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParserFileContent parserFileContent;
            }
        }
        public class NamespaceContentRule : System.Text.Parsing.RuleParser
        {
            public NamespaceContentRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParserFileContent", "parserFileContent"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.parserFileContent = cast<ParserFileContent>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParserFileContent parserFileContent;
                public ParsingContext ctx;
            }
        }
        public class NamespaceRule : System.Text.Parsing.RuleParser
        {
            public NamespaceRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParserFileContent", "parserFileContent"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.parserFileContent = cast<ParserFileContent>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParserFileContent parserFileContent;
                public ParsingContext ctx;
            }
        }
        public override void GetReferencedGrammars()
        {
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("spaces_and_comments", this, "System.Text.Parsing.stdlib.spaces_and_comments"));
            AddRuleLink(new RuleLink("newline", this, "System.Text.Parsing.stdlib.newline"));
            AddRuleLink(new RuleLink("qualified_id", this, "System.Text.Parsing.stdlib.qualified_id"));
            AddRuleLink(new RuleLink("Grammar", this, "GrammarGrammar.Grammar"));
            AddRuleLink(new RuleLink("NamespaceImport", this, "Code.NamespaceGrammar.NamespaceImport"));
            AddRuleLink(new RuleLink("Alias", this, "Code.NamespaceGrammar.Alias"));
            AddRule(new ParserFileRule("ParserFile", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new EmptyParser()),
                    new NonterminalParser("NamespaceContent", "NamespaceContent", 2))));
            AddRule(new UsingDeclarationsRule("UsingDeclarations", GetScope(), Domain.GetNextRuleId(),
                new PositiveParser(
                    new NonterminalParser("UsingDeclaration", "UsingDeclaration", 1))));
            AddRule(new UsingDeclarationRule("UsingDeclaration", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new ActionParser("",
                        new NonterminalParser("NamespaceImport", "NamespaceImport", 0)),
                    new ActionParser("",
                        new NonterminalParser("Alias", "Alias", 0)))));
            AddRule(new NamespaceContentRule("NamespaceContent", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new OptionalParser(
                        new NonterminalParser("UsingDeclarations", "UsingDeclarations", 1)),
                    new KleeneStarParser(
                        new AlternativeParser(
                            new ActionParser("",
                                new NonterminalParser("Grammar", "Grammar", 2)),
                            new NonterminalParser("Namespace", "Namespace", 2))))));
            AddRule(new NamespaceRule("Namespace", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new KeywordParser("namespace"),
                                new ActionParser("",
                                    new ExpectationParser(
                                        new NonterminalParser("ns", "qualified_id", 0)))),
                            new ExpectationParser(
                                new CharParser('{'))),
                        new NonterminalParser("NamespaceContent", "NamespaceContent", 2)),
                    new ActionParser("",
                        new ExpectationParser(
                            new CharParser('}'))))));
            SkipRuleName = "spaces_and_comments";
        }
    }
}
