using System;
using System.Collections.Generic;
using System.Text.Parsing;
using System.Text;

namespace Syntax
{
    public class PrimitiveGrammar : System.Text.Parsing.Grammar
    {
        public PrimitiveGrammar() : this(new ParsingDomain())
        {
        }
        public PrimitiveGrammar(ParsingDomain parsingDomain) : base("PrimitiveGrammar", parsingDomain.GetNamespaceScope("Syntax"), parsingDomain)
        {
            Owner = 0;
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public class PrimitiveRule : System.Text.Parsing.RuleParser
        {
            public PrimitiveRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Parser value;
            }
        }
        public class CharRule : System.Text.Parsing.RuleParser
        {
            public CharRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Parser value;
            }
        }
        public class StringRule : System.Text.Parsing.RuleParser
        {
            public StringRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Parser value;
            }
        }
        public class CharSetRule : System.Text.Parsing.RuleParser
        {
            public CharSetRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Parser";
                LocalVariables.Add(new AttrOrVar("bool", "inverse"));
                LocalVariables.Add(new AttrOrVar("StringBuilder", "s"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Parser value;
                public bool inverse;
                public StringBuilder s;
            }
        }
        public class CharSetRangeRule : System.Text.Parsing.RuleParser
        {
            public CharSetRangeRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "string";
                LocalVariables.Add(new AttrOrVar("StringBuilder", "s"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public string value;
                public StringBuilder s;
            }
        }
        public class CharSetCharRule : System.Text.Parsing.RuleParser
        {
            public CharSetCharRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "char";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public char value;
            }
        }
        public class KeywordRule : System.Text.Parsing.RuleParser
        {
            public KeywordRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Parser value;
            }
        }
        public class KeywordBodyRule : System.Text.Parsing.RuleParser
        {
            public KeywordBodyRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Parser value;
            }
        }
        public class KeywordListRule : System.Text.Parsing.RuleParser
        {
            public KeywordListRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Parser value;
            }
        }
        public class KeywordListBodyRule : System.Text.Parsing.RuleParser
        {
            public KeywordListBodyRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Parser";
                LocalVariables.Add(new AttrOrVar("List<string>", "keywords"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Parser value;
                public List<string> keywords;
            }
        }
        public class EmptyRule : System.Text.Parsing.RuleParser
        {
            public EmptyRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Parser value;
            }
        }
        public class SpaceRule : System.Text.Parsing.RuleParser
        {
            public SpaceRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Parser value;
            }
        }
        public class AnyCharRule : System.Text.Parsing.RuleParser
        {
            public AnyCharRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Parser value;
            }
        }
        public class LetterRule : System.Text.Parsing.RuleParser
        {
            public LetterRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Parser value;
            }
        }
        public class DigitRule : System.Text.Parsing.RuleParser
        {
            public DigitRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Parser value;
            }
        }
        public class HexDigitRule : System.Text.Parsing.RuleParser
        {
            public HexDigitRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Parser value;
            }
        }
        public class PunctuationRule : System.Text.Parsing.RuleParser
        {
            public PunctuationRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Parser value;
            }
        }
        public override void GetReferencedGrammars()
        {
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("char", this, "System.Text.Parsing.stdlib.char"));
            AddRuleLink(new RuleLink("string", this, "System.Text.Parsing.stdlib.string"));
            AddRuleLink(new RuleLink("escape", this, "System.Text.Parsing.stdlib.escape"));
            AddRuleLink(new RuleLink("QualifiedId", this, "ElementGrammar.QualifiedId"));
            AddRuleLink(new RuleLink("StringArray", this, "ElementGrammar.StringArray"));
            AddRule(new PrimitiveRule("Primitive", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new AlternativeParser(
                        new AlternativeParser(
                            new AlternativeParser(
                                new AlternativeParser(
                                    new AlternativeParser(
                                        new AlternativeParser(
                                            new AlternativeParser(
                                                new AlternativeParser(
                                                    new AlternativeParser(
                                                        new AlternativeParser(
                                                            new ActionParser("",
                                                                new NonterminalParser("Char", "Char", 0)),
                                                            new ActionParser("",
                                                                new NonterminalParser("String", "String", 0))),
                                                        new ActionParser("",
                                                            new NonterminalParser("CharSet", "CharSet", 0))),
                                                    new ActionParser("",
                                                        new NonterminalParser("Keyword", "Keyword", 0))),
                                                new ActionParser("",
                                                    new NonterminalParser("KeywordList", "KeywordList", 0))),
                                            new ActionParser("",
                                                new NonterminalParser("Empty", "Empty", 0))),
                                        new ActionParser("",
                                            new NonterminalParser("Space", "Space", 0))),
                                    new ActionParser("",
                                        new NonterminalParser("AnyChar", "AnyChar", 0))),
                                new ActionParser("",
                                    new NonterminalParser("Letter", "Letter", 0))),
                            new ActionParser("",
                                new NonterminalParser("Digit", "Digit", 0))),
                        new ActionParser("",
                            new NonterminalParser("HexDigit", "HexDigit", 0))),
                    new ActionParser("",
                        new NonterminalParser("Punctuation", "Punctuation", 0)))));
            AddRule(new CharRule("Char", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new NonterminalParser("chr", "char", 0))));
            AddRule(new StringRule("String", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new NonterminalParser("str", "string", 0))));
            AddRule(new CharSetRule("CharSet", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new TokenParser(
                        new SequenceParser(
                            new SequenceParser(
                                new SequenceParser(
                                    new ActionParser("",
                                        new CharParser('[')),
                                    new OptionalParser(
                                        new ActionParser("",
                                            new CharParser('^')))),
                                new KleeneStarParser(
                                    new ActionParser("",
                                        new NonterminalParser("CharSetRange", "CharSetRange", 0)))),
                            new ExpectationParser(
                                new CharParser(']')))))));
            AddRule(new CharSetRangeRule("CharSetRange", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new NonterminalParser("first", "CharSetChar", 0)),
                    new ActionParser("",
                        new AlternativeParser(
                            new SequenceParser(
                                new CharParser('-'),
                                new ActionParser("",
                                    new NonterminalParser("last", "CharSetChar", 0))),
                            new ActionParser("",
                                new EmptyParser()))))));
            AddRule(new CharSetCharRule("CharSetChar", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new ActionParser("",
                        new CharSetParser("\\]", true)),
                    new ActionParser("",
                        new NonterminalParser("escape", "escape", 0)))));
            AddRule(new KeywordRule("Keyword", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new SequenceParser(
                            new KeywordParser("keyword"),
                            new ExpectationParser(
                                new CharParser('('))),
                        new ExpectationParser(
                            new NonterminalParser("KeywordBody", "KeywordBody", 0))),
                    new ActionParser("",
                        new ExpectationParser(
                            new CharParser(')'))))));
            AddRule(new KeywordBodyRule("KeywordBody", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new NonterminalParser("str", "string", 0),
                    new AlternativeParser(
                        new SequenceParser(
                            new CharParser(','),
                            new ActionParser("",
                                new ExpectationParser(
                                    new NonterminalParser("continuation", "QualifiedId", 0)))),
                        new ActionParser("",
                            new EmptyParser())))));
            AddRule(new KeywordListRule("KeywordList", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new SequenceParser(
                            new KeywordParser("keyword_list"),
                            new ExpectationParser(
                                new CharParser('('))),
                        new ExpectationParser(
                            new NonterminalParser("KeywordListBody", "KeywordListBody", 0))),
                    new ActionParser("",
                        new ExpectationParser(
                            new CharParser(')'))))));
            AddRule(new KeywordListBodyRule("KeywordListBody", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new ActionParser("",
                            new ExpectationParser(
                                new NonterminalParser("selector", "QualifiedId", 0))),
                        new ExpectationParser(
                            new CharParser(','))),
                    new ActionParser("",
                        new ExpectationParser(
                            new NonterminalParser("StringArray", "StringArray", 1))))));
            AddRule(new EmptyRule("Empty", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new KeywordParser("empty"))));
            AddRule(new SpaceRule("Space", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new KeywordParser("space"))));
            AddRule(new AnyCharRule("AnyChar", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new KeywordParser("anychar"))));
            AddRule(new LetterRule("Letter", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new KeywordParser("letter"))));
            AddRule(new DigitRule("Digit", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new KeywordParser("digit"))));
            AddRule(new HexDigitRule("HexDigit", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new KeywordParser("hexdigit"))));
            AddRule(new PunctuationRule("Punctuation", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new KeywordParser("punctuation"))));
        }
    }
}
