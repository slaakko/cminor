using System;
using System.Collections.Generic;
using System.Text.Parsing;
using Code;
using System.Text.Parsing.CodeDom;

namespace Syntax
{
    public class PrimaryGrammar : System.Text.Parsing.Grammar
    {
        public PrimaryGrammar() : this(new ParsingDomain())
        {
        }
        public PrimaryGrammar(ParsingDomain parsingDomain) : base("PrimaryGrammar", parsingDomain.GetNamespaceScope("Syntax"), parsingDomain)
        {
            Owner = 0;
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public class PrimaryRule : System.Text.Parsing.RuleParser
        {
            public PrimaryRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public Parser value;
            }
        }
        public class RuleCallRule : System.Text.Parsing.RuleParser
        {
            public RuleCallRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Parser";
                LocalVariables.Add(new AttrOrVar("NonterminalParser", "nt"));
                LocalVariables.Add(new AttrOrVar("NonterminalArgumentAdder", "adder"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public ParsingContext ctx;
                public Parser value;
                public NonterminalParser nt;
                public NonterminalArgumentAdder adder;
            }
        }
        public class NonterminalRule : System.Text.Parsing.RuleParser
        {
            public NonterminalRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "string";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public string value;
            }
        }
        public class AliasRule : System.Text.Parsing.RuleParser
        {
            public AliasRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "string";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public string value;
            }
        }
        public class GroupingRule : System.Text.Parsing.RuleParser
        {
            public GroupingRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public Parser value;
            }
        }
        public class TokenRule : System.Text.Parsing.RuleParser
        {
            public TokenRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public Parser value;
            }
        }
        public class ExpectationRule : System.Text.Parsing.RuleParser
        {
            public ExpectationRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Parser", "child"));
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.child = cast<Parser>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Parser child;
                public Parser value;
            }
        }
        public class ActionRule : System.Text.Parsing.RuleParser
        {
            public ActionRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Parser", "child"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "ActionParser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.child = cast<Parser>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
            }
            public class Context : System.Text.Parsing.Context
            {
                public Parser child;
                public ParsingContext ctx;
                public ActionParser value;
            }
        }
        public override void GetReferencedGrammars()
        {
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("Primitive", this, "PrimitiveGrammar.Primitive"));
            AddRuleLink(new RuleLink("Identifier", this, "ElementGrammar.Identifier"));
            AddRuleLink(new RuleLink("Alternative", this, "CompositeGrammar.Alternative"));
            AddRuleLink(new RuleLink("ArgumentList", this, "Code.ExpressionGrammar.ArgumentList"));
            AddRuleLink(new RuleLink("CompoundStatement", this, "Code.StatementGrammar.CompoundStatement"));
            AddRule(new PrimaryRule("Primary", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new AlternativeParser(
                            new AlternativeParser(
                                new AlternativeParser(
                                    new ActionParser("",
                                        new NonterminalParser("RuleCall", "RuleCall", 1)),
                                    new ActionParser("",
                                        new NonterminalParser("Primitive", "Primitive", 0))),
                                new ActionParser("",
                                    new NonterminalParser("Grouping", "Grouping", 2))),
                            new ActionParser("",
                                new NonterminalParser("Token", "Token", 2))),
                        new OptionalParser(
                            new ActionParser("",
                                new NonterminalParser("Expectation", "Expectation", 1)))),
                    new OptionalParser(
                        new ActionParser("",
                            new NonterminalParser("Action", "Action", 2))))));
            AddRule(new RuleCallRule("RuleCall", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("",
                        new EmptyParser()),
                    new ActionParser("",
                        new SequenceParser(
                            new AlternativeParser(
                                new SequenceParser(
                                    new SequenceParser(
                                        new TokenParser(
                                            new SequenceParser(
                                                new NonterminalParser("ntWithArgs", "Nonterminal", 0),
                                                new CharParser('('))),
                                        new NonterminalParser("ArgumentList", "ArgumentList", 2)),
                                    new CharParser(')')),
                                new NonterminalParser("ntNoArgs", "Nonterminal", 0)),
                            new OptionalParser(
                                new NonterminalParser("Alias", "Alias", 0)))))));
            AddRule(new NonterminalRule("Nonterminal", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new NonterminalParser("Identifier", "Identifier", 0))));
            AddRule(new AliasRule("Alias", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new CharParser(':'),
                    new ActionParser("",
                        new ExpectationParser(
                            new NonterminalParser("Identifier", "Identifier", 0))))));
            AddRule(new GroupingRule("Grouping", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new CharParser('('),
                        new ExpectationParser(
                            new NonterminalParser("Alternative", "Alternative", 2))),
                    new ActionParser("",
                        new ExpectationParser(
                            new CharParser(')'))))));
            AddRule(new TokenRule("Token", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new SequenceParser(
                            new KeywordParser("token"),
                            new ExpectationParser(
                                new CharParser('('))),
                        new ExpectationParser(
                            new NonterminalParser("Alternative", "Alternative", 2))),
                    new ActionParser("",
                        new ExpectationParser(
                            new CharParser(')'))))));
            AddRule(new ExpectationRule("Expectation", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new CharParser('!'))));
            AddRule(new ActionRule("Action", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("",
                    new SequenceParser(
                        new NonterminalParser("action", "CompoundStatement", 1),
                        new OptionalParser(
                            new SequenceParser(
                                new CharParser('/'),
                                new NonterminalParser("failureAction", "CompoundStatement", 1)))))));
        }
    }
}
