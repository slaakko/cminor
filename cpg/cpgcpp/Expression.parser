/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/

    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

[cpp]#include <cminor/cpg/cpgcpp/Declaration.hpp>
[cpp]#include <cminor/cpg/cpgcpp/Declarator.hpp>
[cpp]#include <cminor/cpg/cpgcpp/Literal.hpp>
[cpp]#include <cminor/cpg/cpgcpp/Identifier.hpp>
[cpp]#include <cminor/machine/TextUtils.hpp>
[hpp]#include <cminor/cpg/cpgcpp/Expression.hpp>
[cpp]#include <cminor/cpg/cpgcpp/Type.hpp>

namespace cpg.cpp
{
    [cpp]using namespace cminor::pom;
    [cpp]using cminor::machine::Trim;

    grammar ExpressionGrammar
    {
        using LiteralGrammar.Literal;
        using DeclaratorGrammar.TypeId;
        using DeclaratorGrammar.TypeSpecifierSeq;
        using DeclaratorGrammar.PtrOperator;
        using IdentifierGrammar.QualifiedId;
        using DeclarationGrammar.SimpleTypeSpecifier;
        using DeclarationGrammar.TypeName;

        Expression: cminor::pom::CppObject*
                            ::= AssignmentExpression:left{ value = left; } (',' AssignmentExpression:right{ value = new BinaryOpExpr(value, comma, 0, right); })*
                            ;

        ConstantExpression: cminor::pom::CppObject*
                            ::= Expression{ value = Expression; }
                            ;

        AssignmentExpression(var std::unique_ptr<CppObject> lor): cminor::pom::CppObject*
                            ::= (LogicalOrExpression{ lor.reset(LogicalOrExpression); } AssingmentOp AssignmentExpression!){ value = new BinaryOpExpr(lor.release(), AssingmentOp, 1, AssignmentExpression); }
                            |   ConditionalExpression{ value = ConditionalExpression; }
                            |   ThrowExpression{ value = ThrowExpression; }
                            ;

        AssingmentOp: Operator
                            ::= ('=' | "*=" | "/=" | "%=" | "+=" | "-=" | ">>=" | "<<=" | "&=" | "^=" | "|="){ value = GetOperator(std::string(matchBegin, matchEnd)); }
                            ;

        ThrowExpression: cminor::pom::CppObject*
                            ::= (keyword("throw") AssignmentExpression?){ value = new ThrowExpr(AssignmentExpression); }
                            ;

        ConditionalExpression: cminor::pom::CppObject*
                            ::= LogicalOrExpression:left{ value = left; } (('?' Expression! ':' AssignmentExpression!){ value = new ConditionalExpr(value, Expression, AssignmentExpression); })?
                            ;

        LogicalOrExpression: cminor::pom::CppObject*
                            ::= LogicalAndExpression:left{ value = left; } ("||" LogicalAndExpression:right!{ value = new BinaryOpExpr(value, Operator::or_, 2, right); })*
                            ;

        LogicalAndExpression: cminor::pom::CppObject*
                            ::= InclusiveOrExpression:left{ value = left; } ("&&" InclusiveOrExpression:right!{ value = new BinaryOpExpr(value, Operator::and_, 3, right); })*
                            ;

        InclusiveOrExpression: cminor::pom::CppObject*
                            ::= ExclusiveOrExpression:left{ value = left; } (('|' - "||") ExclusiveOrExpression:right!{ value = new BinaryOpExpr(value, Operator::bitor_, 4, right); })*
                            ;

        ExclusiveOrExpression: cminor::pom::CppObject*
                            ::= AndExpression:left{ value = left; } ('^' AndExpression:right!{ value = new BinaryOpExpr(value, Operator::bitxor, 5, right); })*
                            ;

        AndExpression: cminor::pom::CppObject*
                            ::= EqualityExpression:left{ value = left; } (('&' - "&&") EqualityExpression:right!{ value = new BinaryOpExpr(value, Operator::bitand_, 6, right); })*
                            ;

        EqualityExpression: cminor::pom::CppObject*
                            ::= RelationalExpression:left{ value = left; } (EqOp RelationalExpression:right!{ value = new BinaryOpExpr(value, EqOp, 7, right); })*
                            ;

        EqOp: Operator      ::= "=="{ value = Operator::eq; }
                            |   "!="{ value = Operator::notEq; }
                            ;

        RelationalExpression: cminor::pom::CppObject*
                            ::= ShiftExpression:left{ value = left; } (RelOp ShiftExpression:right!{ value = new BinaryOpExpr(value, RelOp, 8, right); })*
                            ;

        RelOp: Operator     ::= "<="{ value = Operator::lessOrEq; }
                            |   ">="{ value = Operator::greaterOrEq; }
                            |   ('<' - "<<"){ value = Operator::less; }
                            |   ('>' - ">>"){ value = Operator::greater; }
                            ;

        ShiftExpression: cminor::pom::CppObject*
                            ::= AdditiveExpression:left{ value = left; } (ShiftOp AdditiveExpression:right!{ value = new BinaryOpExpr(value, ShiftOp, 9, right); })*
                            ;

        ShiftOp: Operator   ::= ("<<" - "<<="){ value = Operator::shiftLeft; }
                            |   (">>" - ">>="){ value = Operator::shiftRight; }
                            ;

        AdditiveExpression: cminor::pom::CppObject*
                            ::= MultiplicativeExpression:left{ value = left; } (AddOp MultiplicativeExpression:right!{ value = new BinaryOpExpr(value, AddOp, 10, right); })*
                            ;

        AddOp: Operator     ::= ('+' - "+="){ value = Operator::plus; }
                            |   ('-' - ("-=" | "->")){ value = Operator::minus; }
                            ;

        MultiplicativeExpression: cminor::pom::CppObject*
                            ::= PmExpression:left{ value = left; } (MulOp PmExpression:right!{ value = new BinaryOpExpr(value, MulOp, 11, right); })*
                            ;

        MulOp: Operator     ::= ('*' - "*="){ value = Operator::mul; }
                            |   ('/' - "/="){ value = Operator::div; }
                            |   ('%' - "%="){ value = Operator::rem; }
                            ;

        PmExpression: cminor::pom::CppObject*
                            ::= CastExpression:left{ value = left; } (PmOp CastExpression:right!{ value = new BinaryOpExpr(value, PmOp, 12, right); })*
                            ;

        PmOp: Operator      ::= ".*"{ value = Operator::dotStar; }
                            | "->*"{ value = Operator::arrowStar; }
                            ;

        CastExpression(var std::unique_ptr<CppObject> ce, var std::unique_ptr<CppObject> ti): cminor::pom::CppObject*
                            ::= 
                            (    ('(' TypeId{ ti.reset(TypeId); } ')' CastExpression){ ce.reset(new CastExpr(ti.release(), CastExpression)); }
                            |   UnaryExpression{ ce.reset(UnaryExpression); }
                            )
                            {
                                value = ce.release();
                            }
                            ;

        UnaryExpression(var std::unique_ptr<CppObject> ue): cminor::pom::CppObject*
                            ::= 
                            (    (PostfixExpression{ ue.reset(PostfixExpression); } | PostCastExpression{ ue.reset(PostCastExpression); })
                            |   ("++" UnaryExpression:e1!){ ue.reset(new PreIncrementExpr(e1)); }
                            |   ("--" UnaryExpression:e2!){ ue.reset(new PreDecrementExpr(e2)); }
                            |   (UnaryOperator CastExpression!){ ue.reset(new UnaryOpExpr(UnaryOperator, CastExpression)); }
                            |   (keyword("sizeof") '(' TypeId! ')'!){ ue.reset(new SizeOfExpr(TypeId, true)); }
                            |   (keyword("sizeof") UnaryExpression:e3!){ ue.reset(new SizeOfExpr(e3, false)); }
                            |   NewExpression{ ue.reset(NewExpression); }
                            |   DeleteExpression{ ue.reset(DeleteExpression); }
                            )
                            {
                                value = ue.release();
                            }
                            ;

        UnaryOperator: Operator
                            ::= ('*' - "*="){ value = Operator::deref; }
                            |   ('&' - "&="){ value = Operator::addrOf; }
                            |   ('+' - "+="){ value = Operator::plus; }
                            |   ('-' - "-="){ value = Operator::minus; }
                            |   ('!' - "!="){ value = Operator::not_; }
                            |   '~'{ value = Operator::neg; }
                            ;

        NewExpression(var bool global, var TypeId* typeId, var bool parens): cminor::pom::CppObject*
                            ::= (("::"{ global = true; })? keyword("new") NewPlacement?
                                (   NewTypeId{ typeId = NewTypeId; parens = false; }
                                |   '(' TypeId{ typeId = TypeId; parens = true; } ')'
                                )   NewInitializer?
                            )
                            {
                                value = new NewExpr(global, NewPlacement, typeId, parens, NewInitializer);
                            }
                            ;

        NewTypeId(var std::unique_ptr<TypeId> ti): cminor::pom::TypeId*
                            ::= empty{ ti.reset(new TypeId()); }
                                ((TypeSpecifierSeq(ti.get()) | TypeName{ ti->Add(TypeName); }) (NewDeclarator{ ti->Declarator() = NewDeclarator; })?){ value = ti.release(); }
                            ;

        NewDeclarator: std::string
                            ::=
                            (   PtrOperator NewDeclarator?
                            |   DirectNewDeclarator
                            )
                            {
                                value = Trim(std::string(matchBegin, matchEnd));
                            }
                            ;

        DirectNewDeclarator(var std::unique_ptr<CppObject> e) 
                            ::= '[' Expression{ e.reset(Expression); } ']' ('[' ConstantExpression{ e.reset(ConstantExpression); } ']')*
                            ;

        NewPlacement: std::vector<cminor::pom::CppObject*>
                            ::= ('(' ExpressionList ')'){ value = ExpressionList; }
                            ;

        NewInitializer: std::vector<cminor::pom::CppObject*>
                            ::= ('(' ExpressionList? ')'){ value = ExpressionList; }
                            ;

        DeleteExpression(var bool global, var bool array): cminor::pom::CppObject*
                            ::= (("::"{ global = true; })? keyword("delete") ('[' ']'{ array = true; })? CastExpression)
                            {
                                value = new DeleteExpr(global, array, CastExpression);
                            }
                            ;

        PostfixExpression(var std::unique_ptr<CppObject> pe): cminor::pom::CppObject*
                            ::= 
                            (    PrimaryExpression{ pe.reset(PrimaryExpression); }
                                (   ('[' Expression:index! ']'!){ pe.reset(new IndexExpr(pe.release(), index)); }
                                |   ('(' (ExpressionList:invoke)? ')'!){ pe.reset(new InvokeExpr(pe.release(), invoke)); }
                                |   (('.' - ".*") IdExpression:member!){ pe.reset(new MemberAccessExpr(pe.release(), member)); }
                                |   (("->" - "->*") IdExpression:ptrmember!){ pe.reset(new PtrMemberAccessExpr(pe.release(), ptrmember)); }
                                |   "++"{ pe.reset(new PostIncrementExpr(pe.release())); }
                                |   "--"{ pe.reset(new PostDecrementExpr(pe.release())); }
                                )
                                *
                                |   (TypeSpecifierOrTypeName '(' ExpressionList:typeConstruction? ')') { pe.reset(new InvokeExpr(TypeSpecifierOrTypeName, typeConstruction)); }
                            )
                            {
                                value = pe.release();
                            }
                            ;

        TypeSpecifierOrTypeName: cminor::pom::CppObject*
                            ::= SimpleTypeSpecifier{ value = SimpleTypeSpecifier; }
                            |   TypeName{ value = TypeName; }
                            ;

        PostCastExpression: cminor::pom::CppObject*
                            ::= (keyword("dynamic_cast") '<'! TypeId:dct! '>'! '('! Expression:dce! ')'!){ value = new PostCastExpr("dynamic_cast", dct, dce); }
                            |   (keyword("static_cast") '<'! TypeId:sct! '>'! '('! Expression:sce! ')'!){ value = new PostCastExpr("static_cast", sct, sce); }
                            |   (keyword("reinterpret_cast") '<'! TypeId:rct! '>'! '('! Expression:rce! ')'!){ value = new PostCastExpr("reinterpret_cast", rct, rce); }
                            |   (keyword("const_cast") '<'! TypeId:cct! '>'! '('! Expression:cce! ')'!){ value = new PostCastExpr("const_cast", cct, cce); }
                            |   (keyword("typeid") '('! Expression:typeidExpr! ')'!){ value = new TypeIdExpr(typeidExpr); }
                            ;

        ExpressionList: std::vector<cminor::pom::CppObject*>
                            ::= AssignmentExpression{ value.push_back(AssignmentExpression); } % ','
                            ;

        PrimaryExpression(var std::unique_ptr<CppObject> pe): cminor::pom::CppObject*
                            ::= 
                            (    Literal{ pe.reset(Literal); }
                            |   keyword("this"){ pe.reset(new ThisAccess()); }
                            |   '(' Expression ')'!{ pe.reset(Expression); }
                            |   IdExpression{ pe.reset(IdExpression); }
                            )
                            {
                                value = pe.release();
                            }
                            ;

        IdExpression: cminor::pom::IdExpr*
                            ::= token(QualifiedId:id1 "::" OperatorFunctionId){ value = new IdExpr(std::string(matchBegin, matchEnd)); }
                            |   token("::"? OperatorFunctionId){ value = new IdExpr(std::string(matchBegin, matchEnd)); }
                            |   QualifiedId:id2{ value = new IdExpr(std::string(matchBegin, matchEnd)); }
                            ;

        OperatorFunctionId  ::= keyword("operator") Operator
                            ;

        Operator            ::= '[' ']'
                            |   '(' ')'
                            |   "->*"
                            |   "->"
                            |   ','
                            |   "--"
                            |   "++"
                            |   "||"
                            |   "&&"
                            |   "<="
                            |   ">="
                            |   "!="
                            |   "=="
                            |   "<<="
                            |   ">>="
                            |   "<<"
                            |   ">>"
                            |   "|="
                            |   "&="
                            |   "^="
                            |   "%="
                            |   "/="
                            |   "*="
                            |   "-="
                            |   "+="
                            |   '<'
                            |   '>'
                            |   '='
                            |   '!'
                            |   '~'
                            |   '|'
                            |   '&'
                            |   '^'
                            |   '%'
                            |   '/'
                            |   '*'
                            |   '-'
                            |   '+'
                            |   keyword("new") '[' ']'
                            |   keyword("delete") '[' ']'
                            |   keyword("new")
                            |   keyword("delete")
                            ;
    }
}
