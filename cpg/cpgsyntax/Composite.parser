/*========================================================================
    Copyright (c) 2012-2016 Seppo Laakko
    http://sourceforge.net/projects/cmajor/
 
    Distributed under the GNU General Public License, version 3 (GPLv3).
    (See accompanying LICENSE.txt or http://www.gnu.org/licenses/gpl.html)

 ========================================================================*/

[hpp]#include <../pl/Scope.hpp>
[hpp]#include <../pl/Parser.hpp>
[cpp]#include <../pl/Composite.hpp>
[cpp]#include <cpgsyntax/Primary.hpp>

namespace cpg.syntax
{
    grammar CompositeGrammar
    {
        using PrimaryGrammar.Primary;

        Alternative(cminor::parsing::Scope* enclosingScope): cminor::parsing::Parser*
                        ::= Sequence(enclosingScope):left{ value = left; } ('|' Sequence(enclosingScope):right!{ value = new AlternativeParser(value, right); })*
                        ;

        Sequence(cminor::parsing::Scope* enclosingScope): cminor::parsing::Parser*
                        ::= Difference(enclosingScope):left{ value = left; } (Difference(enclosingScope):right{ value = new SequenceParser(value, right); })*
                        ;

        Difference(cminor::parsing::Scope* enclosingScope): cminor::parsing::Parser*
                        ::= ExclusiveOr(enclosingScope):left{ value = left; } ('-' ExclusiveOr(enclosingScope):right!{ value = new DifferenceParser(value, right); })*
                        ;

        ExclusiveOr(cminor::parsing::Scope* enclosingScope): cminor::parsing::Parser*
                        ::= Intersection(enclosingScope):left{ value = left; } ('^' Intersection(enclosingScope):right!{ value = new ExclusiveOrParser(value, right); })*
                        ;

        Intersection(cminor::parsing::Scope* enclosingScope): cminor::parsing::Parser*
                        ::= List(enclosingScope):left{ value = left; } ('&' List(enclosingScope):right{ value = new IntersectionParser(value, right); })*
                        ;

        List(cminor::parsing::Scope* enclosingScope): cminor::parsing::Parser* 
                        ::= Postfix(enclosingScope):left{ value = left; } ('%' Postfix(enclosingScope):right{ value = new ListParser(value, right); })?
                        ;

        Postfix(cminor::parsing::Scope* enclosingScope): cminor::parsing::Parser*
                        ::= Primary(enclosingScope){ value = Primary; }
                        (   '*'{ value = new KleeneStarParser(value); }
                        |   '+'{ value = new PositiveParser(value); }
                        |   '?'{ value = new OptionalParser(value); }
                        )?
                        ;
    }
}
