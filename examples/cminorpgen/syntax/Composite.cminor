using System;
using System.Collections.Generic;
using System.Text.Parsing;
using Code;

namespace Syntax
{
    public class CompositeGrammar : System.Text.Parsing.Grammar
    {
        public CompositeGrammar() : this(new ParsingDomain())
        {
        }
        public CompositeGrammar(ParsingDomain parsingDomain) : base("CompositeGrammar", parsingDomain.GetNamespaceScope("Syntax"), parsingDomain)
        {
            Owner = 0;
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public Parser Parse(string content, int fileIndex, string fileName, Scope enclosingScope, ParsingContext ctx)
        {
            Stack<object> stack = new Stack<object>();
            Scanner scanner = new Scanner(content, fileIndex, fileName, SkipRule);
            ParsingData parsingData = new ParsingData(Domain.NumRules);
            scanner.Data = parsingData;
            System.IO.StreamWriter log = Log;
            XmlLog xmlLog = null;
            try
            {
                if (log != null)
                {
                    xmlLog = new XmlLog(log);
                    xmlLog.MaxLineLength = MaxLogLineLength;
                    scanner.Log = xmlLog;
                    xmlLog.WriteBeginRule("parse");
                    xmlLog.IncIndent();
                }
                stack.Push(enclosingScope);
                stack.Push(ctx);
                Match match = Parse(scanner, stack, parsingData);
                Span stop = scanner.SpanValue;
                if (log != null)
                {
                    xmlLog.DecIndent();
                    xmlLog.WriteEndRule("parse");
                }
                if (!match.Hit || stop.Start != content.Length)
                {
                    RuleParser startRule = StartRule;
                    if (startRule != null)
                    {
                        throw new ExpectationFailure(startRule.Info, fileName, stop, content);
                    }
                    else
                    {
                        throw new Exception("grammar '" + Name + "' has no start rule");
                    }
                }
            }
            finally
            {
                if (xmlLog != null)
                {
                    xmlLog.Close();
                }
            }
            Parser result = cast<Parser>(stack.Pop());
            return result;
        }
        public class AlternativeRule : System.Text.Parsing.RuleParser
        {
            public AlternativeRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                ActionParser a1ActionParser = GetAction("A1");
                a1ActionParser.Action = A1Action;
                NonterminalParser leftNonterminalParser = GetNonterminal("left");
                leftNonterminalParser.Pre = Preleft;
                leftNonterminalParser.Post = Postleft;
                NonterminalParser rightNonterminalParser = GetNonterminal("right");
                rightNonterminalParser.Pre = Preright;
                rightNonterminalParser.Post = Postright;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = context.fromleft;
            }
            public void A1Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = new AlternativeParser(context.value, context.fromright);
            }
            public void Preleft(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.enclosingScope);
                stack.Push(context.ctx);
            }
            public void Postleft(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromleft = cast<Parser>(stack.Pop());
                }
            }
            public void Preright(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.enclosingScope);
                stack.Push(context.ctx);
            }
            public void Postright(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromright = cast<Parser>(stack.Pop());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public Parser value;
                public Parser fromleft;
                public Parser fromright;
            }
        }
        public class SequenceRule : System.Text.Parsing.RuleParser
        {
            public SequenceRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                ActionParser a1ActionParser = GetAction("A1");
                a1ActionParser.Action = A1Action;
                NonterminalParser leftNonterminalParser = GetNonterminal("left");
                leftNonterminalParser.Pre = Preleft;
                leftNonterminalParser.Post = Postleft;
                NonterminalParser rightNonterminalParser = GetNonterminal("right");
                rightNonterminalParser.Pre = Preright;
                rightNonterminalParser.Post = Postright;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = context.fromleft;
            }
            public void A1Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = new SequenceParser(context.value, context.fromright);
            }
            public void Preleft(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.enclosingScope);
                stack.Push(context.ctx);
            }
            public void Postleft(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromleft = cast<Parser>(stack.Pop());
                }
            }
            public void Preright(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.enclosingScope);
                stack.Push(context.ctx);
            }
            public void Postright(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromright = cast<Parser>(stack.Pop());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public Parser value;
                public Parser fromleft;
                public Parser fromright;
            }
        }
        public class DifferenceRule : System.Text.Parsing.RuleParser
        {
            public DifferenceRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                ActionParser a1ActionParser = GetAction("A1");
                a1ActionParser.Action = A1Action;
                NonterminalParser leftNonterminalParser = GetNonterminal("left");
                leftNonterminalParser.Pre = Preleft;
                leftNonterminalParser.Post = Postleft;
                NonterminalParser rightNonterminalParser = GetNonterminal("right");
                rightNonterminalParser.Pre = Preright;
                rightNonterminalParser.Post = Postright;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = context.fromleft;
            }
            public void A1Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = new DifferenceParser(context.value, context.fromright);
            }
            public void Preleft(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.enclosingScope);
                stack.Push(context.ctx);
            }
            public void Postleft(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromleft = cast<Parser>(stack.Pop());
                }
            }
            public void Preright(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.enclosingScope);
                stack.Push(context.ctx);
            }
            public void Postright(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromright = cast<Parser>(stack.Pop());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public Parser value;
                public Parser fromleft;
                public Parser fromright;
            }
        }
        public class ExclusiveOrRule : System.Text.Parsing.RuleParser
        {
            public ExclusiveOrRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                ActionParser a1ActionParser = GetAction("A1");
                a1ActionParser.Action = A1Action;
                NonterminalParser leftNonterminalParser = GetNonterminal("left");
                leftNonterminalParser.Pre = Preleft;
                leftNonterminalParser.Post = Postleft;
                NonterminalParser rightNonterminalParser = GetNonterminal("right");
                rightNonterminalParser.Pre = Preright;
                rightNonterminalParser.Post = Postright;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = context.fromleft;
            }
            public void A1Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = new ExclusiveOrParser(context.value, context.fromright);
            }
            public void Preleft(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.enclosingScope);
                stack.Push(context.ctx);
            }
            public void Postleft(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromleft = cast<Parser>(stack.Pop());
                }
            }
            public void Preright(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.enclosingScope);
                stack.Push(context.ctx);
            }
            public void Postright(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromright = cast<Parser>(stack.Pop());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public Parser value;
                public Parser fromleft;
                public Parser fromright;
            }
        }
        public class IntersectionRule : System.Text.Parsing.RuleParser
        {
            public IntersectionRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                ActionParser a1ActionParser = GetAction("A1");
                a1ActionParser.Action = A1Action;
                NonterminalParser leftNonterminalParser = GetNonterminal("left");
                leftNonterminalParser.Pre = Preleft;
                leftNonterminalParser.Post = Postleft;
                NonterminalParser rightNonterminalParser = GetNonterminal("right");
                rightNonterminalParser.Pre = Preright;
                rightNonterminalParser.Post = Postright;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = context.fromleft;
            }
            public void A1Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = new IntersectionParser(context.value, context.fromright);
            }
            public void Preleft(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.enclosingScope);
                stack.Push(context.ctx);
            }
            public void Postleft(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromleft = cast<Parser>(stack.Pop());
                }
            }
            public void Preright(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.enclosingScope);
                stack.Push(context.ctx);
            }
            public void Postright(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromright = cast<Parser>(stack.Pop());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public Parser value;
                public Parser fromleft;
                public Parser fromright;
            }
        }
        public class ListRule : System.Text.Parsing.RuleParser
        {
            public ListRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                ActionParser a1ActionParser = GetAction("A1");
                a1ActionParser.Action = A1Action;
                NonterminalParser leftNonterminalParser = GetNonterminal("left");
                leftNonterminalParser.Pre = Preleft;
                leftNonterminalParser.Post = Postleft;
                NonterminalParser rightNonterminalParser = GetNonterminal("right");
                rightNonterminalParser.Pre = Preright;
                rightNonterminalParser.Post = Postright;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = context.fromleft;
            }
            public void A1Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = new ListParser(context.value, context.fromright);
            }
            public void Preleft(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.enclosingScope);
                stack.Push(context.ctx);
            }
            public void Postleft(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromleft = cast<Parser>(stack.Pop());
                }
            }
            public void Preright(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.enclosingScope);
                stack.Push(context.ctx);
            }
            public void Postright(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromright = cast<Parser>(stack.Pop());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public Parser value;
                public Parser fromleft;
                public Parser fromright;
            }
        }
        public class PostfixRule : System.Text.Parsing.RuleParser
        {
            public PostfixRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("Scope", "enclosingScope"));
                InheritedAttributes.Add(new AttrOrVar("ParsingContext", "ctx"));
                ValueTypeName = "Parser";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.ctx = cast<ParsingContext>(stack.Pop());
                context.enclosingScope = cast<Scope>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                ActionParser a1ActionParser = GetAction("A1");
                a1ActionParser.Action = A1Action;
                ActionParser a2ActionParser = GetAction("A2");
                a2ActionParser.Action = A2Action;
                ActionParser a3ActionParser = GetAction("A3");
                a3ActionParser.Action = A3Action;
                NonterminalParser primaryNonterminalParser = GetNonterminal("Primary");
                primaryNonterminalParser.Pre = PrePrimary;
                primaryNonterminalParser.Post = PostPrimary;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = context.fromPrimary;
            }
            public void A1Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = new KleeneStarParser(context.value);
            }
            public void A2Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = new PositiveParser(context.value);
            }
            public void A3Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = new OptionalParser(context.value);
            }
            public void PrePrimary(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.enclosingScope);
                stack.Push(context.ctx);
            }
            public void PostPrimary(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromPrimary = cast<Parser>(stack.Pop());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public Scope enclosingScope;
                public ParsingContext ctx;
                public Parser value;
                public Parser fromPrimary;
            }
        }
        public override void GetReferencedGrammars()
        {
            ParsingDomain parsingDomain = Domain;
            Grammar grammar0 = parsingDomain.GetGrammar("Syntax.PrimaryGrammar");
            if (grammar0 == null)
            {
                grammar0 = new Syntax.PrimaryGrammar(parsingDomain);
            }
            ReferencedGrammars.Add(grammar0);
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("Primary", this, "PrimaryGrammar.Primary"));
            AddRule(new AlternativeRule("Alternative", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("A0",
                        new NonterminalParser("left", "Sequence", 2)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new CharParser('|'),
                            new ActionParser("A1",
                                new ExpectationParser(
                                    new NonterminalParser("right", "Sequence", 2))))))));
            AddRule(new SequenceRule("Sequence", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("A0",
                        new NonterminalParser("left", "Difference", 2)),
                    new KleeneStarParser(
                        new ActionParser("A1",
                            new NonterminalParser("right", "Difference", 2))))));
            AddRule(new DifferenceRule("Difference", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("A0",
                        new NonterminalParser("left", "ExclusiveOr", 2)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new CharParser('-'),
                            new ActionParser("A1",
                                new ExpectationParser(
                                    new NonterminalParser("right", "ExclusiveOr", 2))))))));
            AddRule(new ExclusiveOrRule("ExclusiveOr", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("A0",
                        new NonterminalParser("left", "Intersection", 2)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new CharParser('^'),
                            new ActionParser("A1",
                                new ExpectationParser(
                                    new NonterminalParser("right", "Intersection", 2))))))));
            AddRule(new IntersectionRule("Intersection", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("A0",
                        new NonterminalParser("left", "List", 2)),
                    new KleeneStarParser(
                        new SequenceParser(
                            new CharParser('&'),
                            new ActionParser("A1",
                                new NonterminalParser("right", "List", 2)))))));
            AddRule(new ListRule("List", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("A0",
                        new NonterminalParser("left", "Postfix", 2)),
                    new OptionalParser(
                        new SequenceParser(
                            new CharParser('%'),
                            new ActionParser("A1",
                                new NonterminalParser("right", "Postfix", 2)))))));
            AddRule(new PostfixRule("Postfix", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("A0",
                        new NonterminalParser("Primary", "Primary", 2)),
                    new OptionalParser(
                        new AlternativeParser(
                            new AlternativeParser(
                                new ActionParser("A1",
                                    new CharParser('*')),
                                new ActionParser("A2",
                                    new CharParser('+'))),
                            new ActionParser("A3",
                                new CharParser('?')))))));
        }
    }
}
