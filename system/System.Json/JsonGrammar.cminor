using System;
using System.Collections.Generic;
using System.Text.Parsing;

namespace System.Json
{
    public class JsonGrammar : System.Text.Parsing.Grammar
    {
        public JsonGrammar() : this(new ParsingDomain())
        {
        }
        public JsonGrammar(ParsingDomain parsingDomain) : base("JsonGrammar", parsingDomain.GetNamespaceScope("System.Json"), parsingDomain)
        {
            Owner = 0;
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public System.Json.Value Parse(string content, int fileIndex, string fileName)
        {
            Stack<object> stack = new Stack<object>();
            Scanner scanner = new Scanner(content, fileIndex, fileName, SkipRule);
            ParsingData parsingData = new ParsingData(Domain.NumRules);
            scanner.Data = parsingData;
            System.IO.StreamWriter log = Log;
            XmlLog xmlLog = null;
            try
            {
                if (log != null)
                {
                    xmlLog = new XmlLog(log);
                    scanner.Log = xmlLog;
                    xmlLog.WriteBeginRule("parse");
                    xmlLog.IncIndent();
                }
                Match match = Parse(scanner, stack, parsingData);
                Span stop = scanner.SpanValue;
                if (log != null)
                {
                    xmlLog.DecIndent();
                    xmlLog.WriteEndRule("parse");
                }
                if (!match.Hit || stop.Start != content.Length)
                {
                    RuleParser startRule = StartRule;
                    if (startRule != null)
                    {
                        throw new ExpectationFailure(startRule.Info, fileName, stop, content);
                    }
                    else
                    {
                        throw new Exception("grammar '" + Name + "' has no start rule");
                    }
                }
            }
            finally
            {
                if (xmlLog != null)
                {
                    xmlLog.Close();
                }
            }
            System.Json.Value result = cast<System.Json.Value>(stack.Pop());
            return result;
        }
        public class ValueRule : System.Text.Parsing.RuleParser
        {
            public ValueRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "System.Json.Value";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                ActionParser a1ActionParser = GetAction("A1");
                a1ActionParser.Action = A1Action;
                ActionParser a2ActionParser = GetAction("A2");
                a2ActionParser.Action = A2Action;
                ActionParser a3ActionParser = GetAction("A3");
                a3ActionParser.Action = A3Action;
                ActionParser a4ActionParser = GetAction("A4");
                a4ActionParser.Action = A4Action;
                ActionParser a5ActionParser = GetAction("A5");
                a5ActionParser.Action = A5Action;
                ActionParser a6ActionParser = GetAction("A6");
                a6ActionParser.Action = A6Action;
                NonterminalParser sNonterminalParser = GetNonterminal("s");
                sNonterminalParser.Post = Posts;
                NonterminalParser nNonterminalParser = GetNonterminal("n");
                nNonterminalParser.Post = Postn;
                NonterminalParser oNonterminalParser = GetNonterminal("o");
                oNonterminalParser.Post = Posto;
                NonterminalParser aNonterminalParser = GetNonterminal("a");
                aNonterminalParser.Post = Posta;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = context.froms;
            }
            public void A1Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = context.fromn;
            }
            public void A2Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = context.fromo;
            }
            public void A3Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = context.froma;
            }
            public void A4Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = new System.Json.Bool(true);
            }
            public void A5Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = new System.Json.Bool(false);
            }
            public void A6Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = null;
            }
            public void Posts(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.froms = cast<System.Json.String>(stack.Pop());
                }
            }
            public void Postn(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromn = cast<System.Json.Number>(stack.Pop());
                }
            }
            public void Posto(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromo = cast<System.Json.Object>(stack.Pop());
                }
            }
            public void Posta(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.froma = cast<System.Json.Array>(stack.Pop());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public System.Json.Value value;
                public System.Json.String froms;
                public System.Json.Number fromn;
                public System.Json.Object fromo;
                public System.Json.Array froma;
            }
        }
        public class ObjectRule : System.Text.Parsing.RuleParser
        {
            public ObjectRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "System.Json.Object";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                NonterminalParser fieldNonterminalParser = GetNonterminal("Field");
                fieldNonterminalParser.Pre = PreField;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = new System.Json.Object();
            }
            public void PreField(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.value);
            }
            public class Context : System.Text.Parsing.Context
            {
                public System.Json.Object value;
            }
        }
        public class FieldRule : System.Text.Parsing.RuleParser
        {
            public FieldRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("System.Json.Object", "o"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.o = cast<System.Json.Object>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                NonterminalParser nNonterminalParser = GetNonterminal("n");
                nNonterminalParser.Post = Postn;
                NonterminalParser vNonterminalParser = GetNonterminal("v");
                vNonterminalParser.Post = Postv;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.o[context.fromn.Val] = context.fromv;
            }
            public void Postn(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromn = cast<System.Json.String>(stack.Pop());
                }
            }
            public void Postv(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromv = cast<System.Json.Value>(stack.Pop());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public System.Json.Object o;
                public System.Json.String fromn;
                public System.Json.Value fromv;
            }
        }
        public class ArrayRule : System.Text.Parsing.RuleParser
        {
            public ArrayRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "System.Json.Array";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                ActionParser a1ActionParser = GetAction("A1");
                a1ActionParser.Action = A1Action;
                NonterminalParser vNonterminalParser = GetNonterminal("v");
                vNonterminalParser.Post = Postv;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = new System.Json.Array();
            }
            public void A1Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value.Add(context.fromv);
            }
            public void Postv(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromv = cast<System.Json.Value>(stack.Pop());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public System.Json.Array value;
                public System.Json.Value fromv;
            }
        }
        public class StringRule : System.Text.Parsing.RuleParser
        {
            public StringRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "System.Json.String";
                LocalVariables.Add(new AttrOrVar("System.Text.StringBuilder", "s"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                ActionParser a1ActionParser = GetAction("A1");
                a1ActionParser.Action = A1Action;
                ActionParser a2ActionParser = GetAction("A2");
                a2ActionParser.Action = A2Action;
                ActionParser a3ActionParser = GetAction("A3");
                a3ActionParser.Action = A3Action;
                NonterminalParser escapeNonterminalParser = GetNonterminal("Escape");
                escapeNonterminalParser.Post = PostEscape;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = new System.Json.String(Utf16ToUtf32String(context.s.ToString()));
            }
            public void A1Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.s = new System.Text.StringBuilder();
            }
            public void A2Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.s.Append(match[0]);
            }
            public void A3Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.s.Append(context.fromEscape);
            }
            public void PostEscape(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromEscape = cast<char>(stack.Pop());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public System.Json.String value;
                public System.Text.StringBuilder s;
                public char fromEscape;
            }
        }
        public class EscapeRule : System.Text.Parsing.RuleParser
        {
            public EscapeRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "char";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                ActionParser a1ActionParser = GetAction("A1");
                a1ActionParser.Action = A1Action;
                ActionParser a2ActionParser = GetAction("A2");
                a2ActionParser.Action = A2Action;
                ActionParser a3ActionParser = GetAction("A3");
                a3ActionParser.Action = A3Action;
                ActionParser a4ActionParser = GetAction("A4");
                a4ActionParser.Action = A4Action;
                ActionParser a5ActionParser = GetAction("A5");
                a5ActionParser.Action = A5Action;
                ActionParser a6ActionParser = GetAction("A6");
                a6ActionParser.Action = A6Action;
                ActionParser a7ActionParser = GetAction("A7");
                a7ActionParser.Action = A7Action;
                ActionParser a8ActionParser = GetAction("A8");
                a8ActionParser.Action = A8Action;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = '"';
            }
            public void A1Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = '\\';
            }
            public void A2Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = '/';
            }
            public void A3Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = '\b';
            }
            public void A4Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = '\f';
            }
            public void A5Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = '\n';
            }
            public void A6Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = '\r';
            }
            public void A7Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = '\t';
            }
            public void A8Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = cast<char>(ushort.ParseHex(match));
            }
            public class Context : System.Text.Parsing.Context
            {
                public char value;
            }
        }
        public class NumberRule : System.Text.Parsing.RuleParser
        {
            public NumberRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "System.Json.Number";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = new System.Json.Number(double.Parse(match));
            }
            public class Context : System.Text.Parsing.Context
            {
                public System.Json.Number value;
            }
        }
        public override void GetReferencedGrammars()
        {
            ParsingDomain parsingDomain = Domain;
            Grammar grammar0 = parsingDomain.GetGrammar("System.Text.Parsing.stdlib");
            if (grammar0 == null)
            {
                grammar0 = new System.Text.Parsing.stdlib(parsingDomain);
            }
            ReferencedGrammars.Add(grammar0);
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("spaces", this, "System.Text.Parsing.stdlib.spaces"));
            AddRule(new ValueRule("Value", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new AlternativeParser(
                        new AlternativeParser(
                            new AlternativeParser(
                                new AlternativeParser(
                                    new AlternativeParser(
                                        new ActionParser("A0",
                                            new NonterminalParser("s", "String", 0)),
                                        new ActionParser("A1",
                                            new NonterminalParser("n", "Number", 0))),
                                    new ActionParser("A2",
                                        new NonterminalParser("o", "Object", 0))),
                                new ActionParser("A3",
                                    new NonterminalParser("a", "Array", 0))),
                            new ActionParser("A4",
                                new KeywordParser("true"))),
                        new ActionParser("A5",
                            new KeywordParser("false"))),
                    new ActionParser("A6",
                        new KeywordParser("null")))));
            AddRule(new ObjectRule("Object", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new ActionParser("A0",
                            new CharParser('{')),
                        new KleeneStarParser(
                            new ListParser(
                                new NonterminalParser("Field", "Field", 1),
                                new CharParser(',')))),
                    new CharParser('}'))));
            AddRule(new FieldRule("Field", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("A0",
                    new SequenceParser(
                        new SequenceParser(
                            new NonterminalParser("n", "String", 0),
                            new CharParser(':')),
                        new NonterminalParser("v", "Value", 0)))));
            AddRule(new ArrayRule("Array", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new ActionParser("A0",
                            new CharParser('[')),
                        new ListParser(
                            new ActionParser("A1",
                                new NonterminalParser("v", "Value", 0)),
                            new CharParser(','))),
                    new CharParser(']'))));
            AddRule(new StringRule("String", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("A0",
                    new TokenParser(
                        new SequenceParser(
                            new SequenceParser(
                                new ActionParser("A1",
                                    new CharParser('"')),
                                new KleeneStarParser(
                                    new AlternativeParser(
                                        new ActionParser("A2",
                                            new CharSetParser("\"\\", true)),
                                        new ActionParser("A3",
                                            new NonterminalParser("Escape", "Escape", 0))))),
                            new CharParser('"'))))));
            AddRule(new EscapeRule("Escape", GetScope(), Domain.GetNextRuleId(),
                new TokenParser(
                    new SequenceParser(
                        new CharParser('\\'),
                        new AlternativeParser(
                            new AlternativeParser(
                                new AlternativeParser(
                                    new AlternativeParser(
                                        new AlternativeParser(
                                            new AlternativeParser(
                                                new AlternativeParser(
                                                    new AlternativeParser(
                                                        new ActionParser("A0",
                                                            new CharParser('"')),
                                                        new ActionParser("A1",
                                                            new CharParser('\\'))),
                                                    new ActionParser("A2",
                                                        new CharParser('/'))),
                                                new ActionParser("A3",
                                                    new CharParser('b'))),
                                            new ActionParser("A4",
                                                new CharParser('f'))),
                                        new ActionParser("A5",
                                            new CharParser('n'))),
                                    new ActionParser("A6",
                                        new CharParser('r'))),
                                new ActionParser("A7",
                                    new CharParser('t'))),
                            new SequenceParser(
                                new CharParser('u'),
                                new ActionParser("A8",
                                    new SequenceParser(
                                        new SequenceParser(
                                            new SequenceParser(
                                                new HexDigitParser(),
                                                new HexDigitParser()),
                                            new HexDigitParser()),
                                        new HexDigitParser()))))))));
            AddRule(new NumberRule("Number", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("A0",
                    new TokenParser(
                        new SequenceParser(
                            new SequenceParser(
                                new SequenceParser(
                                    new OptionalParser(
                                        new CharParser('-')),
                                    new PositiveParser(
                                        new DigitParser())),
                                new OptionalParser(
                                    new SequenceParser(
                                        new CharParser('.'),
                                        new PositiveParser(
                                            new DigitParser())))),
                            new OptionalParser(
                                new SequenceParser(
                                    new SequenceParser(
                                        new CharSetParser("eE"),
                                        new OptionalParser(
                                            new CharSetParser("+-"))),
                                    new PositiveParser(
                                        new DigitParser()))))))));
            SkipRuleName = "spaces";
        }
    }
}
