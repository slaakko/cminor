using System;
using System.Collections.Generic;
using System.Text.Parsing;

namespace System.Net.Http
{
    public class MediaTypeGrammar : System.Text.Parsing.Grammar
    {
        public MediaTypeGrammar() : this(new ParsingDomain())
        {
        }
        public MediaTypeGrammar(ParsingDomain parsingDomain) : base("MediaTypeGrammar", parsingDomain.GetNamespaceScope("System.Net.Http"), parsingDomain)
        {
            Owner = 0;
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public MimeType Parse(string content, int fileIndex, string fileName)
        {
            Stack<object> stack = new Stack<object>();
            Scanner scanner = new Scanner(content, fileIndex, fileName, SkipRule);
            ParsingData parsingData = new ParsingData(Domain.NumRules);
            scanner.Data = parsingData;
            System.IO.StreamWriter log = Log;
            XmlLog xmlLog = null;
            try
            {
                if (log != null)
                {
                    xmlLog = new XmlLog(log);
                    scanner.Log = xmlLog;
                    xmlLog.WriteBeginRule("parse");
                    xmlLog.IncIndent();
                }
                Match match = Parse(scanner, stack, parsingData);
                Span stop = scanner.SpanValue;
                if (log != null)
                {
                    xmlLog.DecIndent();
                    xmlLog.WriteEndRule("parse");
                }
                if (!match.Hit || stop.Start != content.Length)
                {
                    RuleParser startRule = StartRule;
                    if (startRule != null)
                    {
                        throw new ExpectationFailure(startRule.Info, fileName, stop, content);
                    }
                    else
                    {
                        throw new Exception("grammar '" + Name + "' has no start rule");
                    }
                }
            }
            finally
            {
                if (xmlLog != null)
                {
                    xmlLog.Close();
                }
            }
            MimeType result = cast<MimeType>(stack.Pop());
            return result;
        }
        public class MimeTypeRule : System.Text.Parsing.RuleParser
        {
            public MimeTypeRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "MimeType";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                NonterminalParser typeNonterminalParser = GetNonterminal("type");
                typeNonterminalParser.Pre = Pretype;
                NonterminalParser subtypeNonterminalParser = GetNonterminal("subtype");
                subtypeNonterminalParser.Pre = Presubtype;
                NonterminalParser parameterNonterminalParser = GetNonterminal("parameter");
                parameterNonterminalParser.Pre = Preparameter;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = new MimeType();
            }
            public void Pretype(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.value);
            }
            public void Presubtype(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.value);
            }
            public void Preparameter(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.value);
            }
            public class Context : System.Text.Parsing.Context
            {
                public MimeType value;
            }
        }
        public class MediaRangesRule : System.Text.Parsing.RuleParser
        {
            public MediaRangesRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "List<MediaRange>";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                ActionParser a1ActionParser = GetAction("A1");
                a1ActionParser.Action = A1Action;
                NonterminalParser mediaRangeNonterminalParser = GetNonterminal("mediaRange");
                mediaRangeNonterminalParser.Post = PostmediaRange;
                NonterminalParser acceptParamsNonterminalParser = GetNonterminal("AcceptParams");
                acceptParamsNonterminalParser.Pre = PreAcceptParams;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = new List<MediaRange>();
            }
            public void A1Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value.Add(context.frommediaRange);
            }
            public void PostmediaRange(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.frommediaRange = cast<MediaRange>(stack.Pop());
                }
            }
            public void PreAcceptParams(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.frommediaRange);
            }
            public class Context : System.Text.Parsing.Context
            {
                public List<MediaRange> value;
                public MediaRange frommediaRange;
            }
        }
        public class AcceptParamsRule : System.Text.Parsing.RuleParser
        {
            public AcceptParamsRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("MediaRange", "mediaRange"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.mediaRange = cast<MediaRange>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                NonterminalParser qvalueNonterminalParser = GetNonterminal("qvalue");
                qvalueNonterminalParser.Post = Postqvalue;
                NonterminalParser acceptExtensionNonterminalParser = GetNonterminal("AcceptExtension");
                acceptExtensionNonterminalParser.Pre = PreAcceptExtension;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.mediaRange.Quality = context.fromqvalue;
            }
            public void Postqvalue(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromqvalue = cast<double>(stack.Pop());
                }
            }
            public void PreAcceptExtension(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.mediaRange);
            }
            public class Context : System.Text.Parsing.Context
            {
                public MediaRange mediaRange;
                public double fromqvalue;
            }
        }
        public class AcceptExtensionRule : System.Text.Parsing.RuleParser
        {
            public AcceptExtensionRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("MediaRange", "mediaRange"));
                LocalVariables.Add(new AttrOrVar("string", "extattr"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.mediaRange = cast<MediaRange>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                ActionParser a1ActionParser = GetAction("A1");
                a1ActionParser.Action = A1Action;
                ActionParser a2ActionParser = GetAction("A2");
                a2ActionParser.Action = A2Action;
                ActionParser a3ActionParser = GetAction("A3");
                a3ActionParser.Action = A3Action;
                NonterminalParser quoted_stringNonterminalParser = GetNonterminal("quoted_string");
                quoted_stringNonterminalParser.Post = Postquoted_string;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.extattr = match;
            }
            public void A1Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                Map<string, string> acceptParams = context.mediaRange.AcceptParams;
                acceptParams[context.extattr] = match;
            }
            public void A2Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                Map<string, string> acceptParams = context.mediaRange.AcceptParams;
                acceptParams[context.extattr] = context.fromquoted_string;
            }
            public void A3Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                Map<string, string> acceptParams = context.mediaRange.AcceptParams;
                acceptParams[context.extattr] = string.Empty;
            }
            public void Postquoted_string(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromquoted_string = cast<string>(stack.Pop());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public MediaRange mediaRange;
                public string extattr;
                public string fromquoted_string;
            }
        }
        public class MediaRangeRule : System.Text.Parsing.RuleParser
        {
            public MediaRangeRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "MediaRange";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                ActionParser a1ActionParser = GetAction("A1");
                a1ActionParser.Action = A1Action;
                NonterminalParser anysubNonterminalParser = GetNonterminal("anysub");
                anysubNonterminalParser.Pre = Preanysub;
                NonterminalParser specifiedNonterminalParser = GetNonterminal("specified");
                specifiedNonterminalParser.Pre = Prespecified;
                NonterminalParser subtypeNonterminalParser = GetNonterminal("subtype");
                subtypeNonterminalParser.Pre = Presubtype;
                NonterminalParser parameterNonterminalParser = GetNonterminal("parameter");
                parameterNonterminalParser.Pre = Preparameter;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = new MediaRange();
            }
            public void A1Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value.MmeType.SbType = new AnySubtype();
            }
            public void Preanysub(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.value.MmeType);
            }
            public void Prespecified(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.value.MmeType);
            }
            public void Presubtype(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.value.MmeType);
            }
            public void Preparameter(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.value.MmeType);
            }
            public class Context : System.Text.Parsing.Context
            {
                public MediaRange value;
            }
        }
        public class typeRule : System.Text.Parsing.RuleParser
        {
            public typeRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("MimeType", "mimeType"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.mimeType = cast<MimeType>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                NonterminalParser discrete_typeNonterminalParser = GetNonterminal("discrete_type");
                discrete_typeNonterminalParser.Pre = Prediscrete_type;
                NonterminalParser composite_typeNonterminalParser = GetNonterminal("composite_type");
                composite_typeNonterminalParser.Pre = Precomposite_type;
            }
            public void Prediscrete_type(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.mimeType);
            }
            public void Precomposite_type(Stack<object> stack, ParsingData parsingData)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                stack.Push(context.mimeType);
            }
            public class Context : System.Text.Parsing.Context
            {
                public MimeType mimeType;
            }
        }
        public class discrete_typeRule : System.Text.Parsing.RuleParser
        {
            public discrete_typeRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("MimeType", "mimeType"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.mimeType = cast<MimeType>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                ActionParser a1ActionParser = GetAction("A1");
                a1ActionParser.Action = A1Action;
                ActionParser a2ActionParser = GetAction("A2");
                a2ActionParser.Action = A2Action;
                ActionParser a3ActionParser = GetAction("A3");
                a3ActionParser.Action = A3Action;
                ActionParser a4ActionParser = GetAction("A4");
                a4ActionParser.Action = A4Action;
                ActionParser a5ActionParser = GetAction("A5");
                a5ActionParser.Action = A5Action;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.mimeType.MdaType = new TextMediaType();
            }
            public void A1Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.mimeType.MdaType = new ImageMediaType();
            }
            public void A2Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.mimeType.MdaType = new AudioMediaType();
            }
            public void A3Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.mimeType.MdaType = new VideoMediaType();
            }
            public void A4Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.mimeType.MdaType = new ApplicationMediaType();
            }
            public void A5Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.mimeType.MdaType = new MediaType(match);
            }
            public class Context : System.Text.Parsing.Context
            {
                public MimeType mimeType;
            }
        }
        public class composite_typeRule : System.Text.Parsing.RuleParser
        {
            public composite_typeRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("MimeType", "mimeType"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.mimeType = cast<MimeType>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                ActionParser a1ActionParser = GetAction("A1");
                a1ActionParser.Action = A1Action;
                ActionParser a2ActionParser = GetAction("A2");
                a2ActionParser.Action = A2Action;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.mimeType.MdaType = new MessageMediaType();
            }
            public void A1Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.mimeType.MdaType = new MultipartMediaType();
            }
            public void A2Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.mimeType.MdaType = new MediaType(match);
            }
            public class Context : System.Text.Parsing.Context
            {
                public MimeType mimeType;
            }
        }
        public class subtypeRule : System.Text.Parsing.RuleParser
        {
            public subtypeRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("MimeType", "mimeType"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.mimeType = cast<MimeType>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.mimeType.SbType = new Subtype(match);
            }
            public class Context : System.Text.Parsing.Context
            {
                public MimeType mimeType;
            }
        }
        public class parameterRule : System.Text.Parsing.RuleParser
        {
            public parameterRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                InheritedAttributes.Add(new AttrOrVar("MimeType", "mimeType"));
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.mimeType = cast<MimeType>(stack.Pop());
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                NonterminalParser attributeNonterminalParser = GetNonterminal("attribute");
                attributeNonterminalParser.Post = Postattribute;
                NonterminalParser valueNonterminalParser = GetNonterminal("value");
                valueNonterminalParser.Post = Postvalue;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                Map<string, string> parameters = context.mimeType.Parameters;
                parameters[context.fromattribute] = context.fromvalue;
            }
            public void Postattribute(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromattribute = cast<string>(stack.Pop());
                }
            }
            public void Postvalue(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromvalue = cast<string>(stack.Pop());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public MimeType mimeType;
                public string fromattribute;
                public string fromvalue;
            }
        }
        public class attributeRule : System.Text.Parsing.RuleParser
        {
            public attributeRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "string";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = match;
            }
            public class Context : System.Text.Parsing.Context
            {
                public string value;
            }
        }
        public class valueRule : System.Text.Parsing.RuleParser
        {
            public valueRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "string";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                ActionParser a1ActionParser = GetAction("A1");
                a1ActionParser.Action = A1Action;
                NonterminalParser quoted_stringNonterminalParser = GetNonterminal("quoted_string");
                quoted_stringNonterminalParser.Post = Postquoted_string;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = context.fromquoted_string;
            }
            public void A1Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = match;
            }
            public void Postquoted_string(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromquoted_string = cast<string>(stack.Pop());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public string value;
                public string fromquoted_string;
            }
        }
        public class qvalueRule : System.Text.Parsing.RuleParser
        {
            public qvalueRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "double";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = double.Parse(match);
            }
            public class Context : System.Text.Parsing.Context
            {
                public double value;
            }
        }
        public override void GetReferencedGrammars()
        {
            ParsingDomain parsingDomain = Domain;
            Grammar grammar0 = parsingDomain.GetGrammar("System.Net.Http.HttpGrammar");
            if (grammar0 == null)
            {
                grammar0 = new System.Net.Http.HttpGrammar(parsingDomain);
            }
            ReferencedGrammars.Add(grammar0);
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("http_token", this, "HttpGrammar.http_token"));
            AddRuleLink(new RuleLink("quoted_string", this, "HttpGrammar.quoted_string"));
            AddRule(new MimeTypeRule("MimeType", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("A0",
                        new EmptyParser()),
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new NonterminalParser("type", "type", 1),
                                new CharParser('/')),
                            new NonterminalParser("subtype", "subtype", 1)),
                        new KleeneStarParser(
                            new SequenceParser(
                                new CharParser(';'),
                                new NonterminalParser("parameter", "parameter", 1)))))));
            AddRule(new MediaRangesRule("MediaRanges", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new ActionParser("A0",
                        new EmptyParser()),
                    new ListParser(
                        new ActionParser("A1",
                            new SequenceParser(
                                new NonterminalParser("mediaRange", "MediaRange", 0),
                                new OptionalParser(
                                    new NonterminalParser("AcceptParams", "AcceptParams", 1)))),
                        new CharParser(',')))));
            AddRule(new AcceptParamsRule("AcceptParams", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new CharParser(';'),
                        new ActionParser("A0",
                            new SequenceParser(
                                new SequenceParser(
                                    new CharParser('q'),
                                    new CharParser('=')),
                                new NonterminalParser("qvalue", "qvalue", 0)))),
                    new KleeneStarParser(
                        new NonterminalParser("AcceptExtension", "AcceptExtension", 1)))));
            AddRule(new AcceptExtensionRule("AcceptExtension", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new CharParser(';'),
                        new ActionParser("A0",
                            new NonterminalParser("http_token", "http_token", 0))),
                    new AlternativeParser(
                        new SequenceParser(
                            new CharParser('='),
                            new AlternativeParser(
                                new ActionParser("A1",
                                    new NonterminalParser("http_token", "http_token", 0)),
                                new ActionParser("A2",
                                    new NonterminalParser("quoted_string", "quoted_string", 0)))),
                        new ActionParser("A3",
                            new EmptyParser())))));
            AddRule(new MediaRangeRule("MediaRange", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new SequenceParser(
                        new ActionParser("A0",
                            new EmptyParser()),
                        new AlternativeParser(
                            new AlternativeParser(
                                new StringParser("*/*"),
                                new SequenceParser(
                                    new SequenceParser(
                                        new NonterminalParser("anysub", "type", 1),
                                        new CharParser('/')),
                                    new ActionParser("A1",
                                        new CharParser('*')))),
                            new SequenceParser(
                                new SequenceParser(
                                    new NonterminalParser("specified", "type", 1),
                                    new CharParser('/')),
                                new NonterminalParser("subtype", "subtype", 1)))),
                    new KleeneStarParser(
                        new SequenceParser(
                            new CharParser(';'),
                            new NonterminalParser("parameter", "parameter", 1))))));
            AddRule(new typeRule("type", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new NonterminalParser("discrete_type", "discrete_type", 1),
                    new NonterminalParser("composite_type", "composite_type", 1))));
            AddRule(new discrete_typeRule("discrete_type", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new AlternativeParser(
                        new AlternativeParser(
                            new AlternativeParser(
                                new AlternativeParser(
                                    new ActionParser("A0",
                                        new StringParser("text")),
                                    new ActionParser("A1",
                                        new StringParser("image"))),
                                new ActionParser("A2",
                                    new StringParser("audio"))),
                            new ActionParser("A3",
                                new StringParser("video"))),
                        new ActionParser("A4",
                            new StringParser("application"))),
                    new ActionParser("A5",
                        new NonterminalParser("extension_token", "extension_token", 0)))));
            AddRule(new RuleParser("extension_token", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new NonterminalParser("x_token", "x_token", 0),
                    new NonterminalParser("ietf_token", "ietf_token", 0))));
            AddRule(new RuleParser("x_token", GetScope(), Domain.GetNextRuleId(),
                new SequenceParser(
                    new StringParser("x-"),
                    new NonterminalParser("http_token", "http_token", 0))));
            AddRule(new RuleParser("ietf_token", GetScope(), Domain.GetNextRuleId(),
                new NonterminalParser("http_token", "http_token", 0)));
            AddRule(new composite_typeRule("composite_type", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new AlternativeParser(
                        new ActionParser("A0",
                            new StringParser("message")),
                        new ActionParser("A1",
                            new StringParser("multipart"))),
                    new ActionParser("A2",
                        new NonterminalParser("extension_token", "extension_token", 0)))));
            AddRule(new subtypeRule("subtype", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("A0",
                    new NonterminalParser("extension_token", "extension_token", 0))));
            AddRule(new parameterRule("parameter", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("A0",
                    new SequenceParser(
                        new SequenceParser(
                            new DifferenceParser(
                                new NonterminalParser("attribute", "attribute", 0),
                                new StringParser("q")),
                            new CharParser('=')),
                        new NonterminalParser("value", "value", 0)))));
            AddRule(new attributeRule("attribute", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("A0",
                    new NonterminalParser("http_token", "http_token", 0))));
            AddRule(new valueRule("value", GetScope(), Domain.GetNextRuleId(),
                new AlternativeParser(
                    new ActionParser("A0",
                        new NonterminalParser("quoted_string", "quoted_string", 0)),
                    new ActionParser("A1",
                        new NonterminalParser("http_token", "http_token", 0)))));
            AddRule(new qvalueRule("qvalue", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("A0",
                    new AlternativeParser(
                        new SequenceParser(
                            new CharParser('0'),
                            new OptionalParser(
                                new SequenceParser(
                                    new CharParser('.'),
                                    new OptionalParser(
                                        new SequenceParser(
                                            new DigitParser(),
                                            new OptionalParser(
                                                new SequenceParser(
                                                    new DigitParser(),
                                                    new OptionalParser(
                                                        new DigitParser())))))))),
                        new SequenceParser(
                            new CharParser('1'),
                            new OptionalParser(
                                new SequenceParser(
                                    new CharParser('.'),
                                    new OptionalParser(
                                        new SequenceParser(
                                            new CharParser('0'),
                                            new OptionalParser(
                                                new SequenceParser(
                                                    new CharParser('0'),
                                                    new OptionalParser(
                                                        new CharParser('0')))))))))))));
        }
    }
}
