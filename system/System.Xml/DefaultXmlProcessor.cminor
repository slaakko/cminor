using System;
using System.Text;
using System.Collections.Generic;

namespace System.Xml
{
    public class DefaultXmlProcessor : XmlProcessor
    {
        public DefaultXmlProcessor()
        {
            this.content = string.Empty;
            this.contentStack = new Stack<string>();
            this.contentHandler = new XmlContentHandler();
            this.entityResolver = new XmlEntityResolver();
            this.contentParser = null;
            this.externalEntityParser = null;
            this.rootElementName = string.Empty;
            this.tagStack = new Stack<string>();
            this.namespaceUriStack = new Stack<string>();
            this.currentNamespaceUri = string.Empty;
            this.namespacePrefixMap = new HashMap<string, string>();
            this.namespacePrefixStack = new Stack<string>();
            this.currentNamespacePrefix = string.Empty;
            this.entityMap = new HashMap<string, EntityValue>();
            this.paramEntityMap = new HashMap<string, ParameterEntityValue>();
            this.recursiveEntityNames = new HashSet<string>();
            this.elementTypeDeclarationMap = new HashMap<string, ElementContentSpec>();
            this.elementContentSpec = null;
            this.attributeValueBuilder = null;
            this.parsingEntityValue = false;
            this.entityMap["quot"] = new InternalEntity("\"");
            this.entityMap["amp"] = new InternalEntity("&");
            this.entityMap["apos"] = new InternalEntity("'");
            this.entityMap["lt"] = new InternalEntity("<");
            this.entityMap["gt"] = new InternalEntity(">");
        }
        public override void SetContent(string content)
        {
            this.content = content;
        }
        public override void SetContentHandler(XmlContentHandler contentHandler)
        {
            this.contentHandler = contentHandler;
        }
        public override void SetContentParser(XmlContentParser contentParser) 
        {
            this.contentParser = contentParser;
        }
        public override void SetExternalEntityParser(XmlExternalEntityParser externalEntityParser) 
        {
            this.externalEntityParser = externalEntityParser;
        }
        public override void Version(string xmlVersion) 
        {
            contentHandler.XmlVersion(xmlVersion);
        }
        public override void Encoding(string encodingName) 
        {
            contentHandler.Encoding(encodingName);
        }
        public override void StartDocument()
        {
            contentHandler.StartDocument();
        }
        public override void EndDocument()
        {
            contentHandler.EndDocument();
        }
        public override void BeginStartTag(string tagName) 
        {
            tagStack.Push(currentTagName);
            currentTagName = tagName;
            attributes = new Attributes();
            namespaceUriStack.Push(currentNamespaceUri);
            namespacePrefixStack.Push(currentNamespacePrefix);
        }
        public override void BeginAttributeValue(StringBuilder attributeValueBuilder) 
        {
            this.attributeValueBuilder = attributeValueBuilder;
        }
        public override string EndAttributeValue() 
        {
            string attributeValue = attributeValueBuilder.ToString();
            this.attributeValueBuilder = null;
            return attributeValue;
        }
        public override void BeginEntityValue() 
        {
            this.parsingEntityValue = true;
        }
        public override void EndEntityValue() 
        {
            this.parsingEntityValue = false;
        }
        public override void AddAttribute(string attributeName, string attributeValue, System.Text.Parsing.Span span, string systemId)
        {
            string localName;
            string prefix;
            ParseQualifiedName(attributeName, ref localName, ref prefix, span, systemId);
            if (prefix == "xmlns")
            {
                currentNamespacePrefix = localName;
                currentNamespaceUri = attributeValue;
                namespacePrefixMap[currentNamespacePrefix] = currentNamespaceUri;
            }
            else if (localName == "xmlns")
            {   
                currentNamespacePrefix = string.Empty;
                currentNamespaceUri = attributeValue;
            }
            else
            {
                attributes.Add(new Attribute(GetNamespaceUri(prefix, span, systemId), localName, attributeName, attributeValue));
            }
        }
        public override void EndStartTag(System.Text.Parsing.Span span, string systemId)
        {
            string localName;
            string prefix;
            ParseQualifiedName(currentTagName, ref localName, ref prefix, span, systemId);
            if (prefix == "xmlns")
            {
                throw new XmlProcessingException(GetErrorLocationStr(systemId, span) + ": 'xmlns' prefix cannot be declared for an element");
            }
            contentHandler.StartElement(GetNamespaceUri(prefix, span, systemId), localName, currentTagName, attributes);
        }
        public override void EndTag(string tagName, System.Text.Parsing.Span span, string systemId)
        {
            if (tagStack.Count == 0)
            {
                throw new XmlProcessingException(GetErrorLocationStr(systemId, span) + ": end tag '" + tagName + "' has no corresponding start tag");
            }
            if (tagName != currentTagName)
            {
                throw new XmlProcessingException(GetErrorLocationStr(systemId, span) + ": end tag '" + tagName + "' does not match start tag '" + currentTagName + "'");
            }
            string localName;
            string prefix;
            ParseQualifiedName(currentTagName, ref localName, ref prefix, span, systemId);
            if (prefix == "xmlns")
            {
                throw new XmlProcessingException(GetErrorLocationStr(systemId, span) + ": 'xmlns' prefix cannot be declared for an element");
            }
            contentHandler.EndElement(GetNamespaceUri(prefix, span, systemId), localName, currentTagName);
            currentNamespaceUri = namespaceUriStack.Pop();
            namespacePrefixMap.Remove(currentNamespacePrefix);
            currentNamespacePrefix = namespacePrefixStack.Pop();
            namespacePrefixMap[currentNamespacePrefix] = currentNamespaceUri;
            currentTagName = tagStack.Pop();
        }
        public override void EntityRef(string entityName, System.Text.Parsing.Span span, string systemId)
        {
            if (parsingEntityValue)
            {
                return;
            }
            EntityValue entityValue;
            if (entityMap.TryGetValue(entityName, ref entityValue))
            { 
                if (entityValue is InternalEntity)
                {
                    InternalEntity internalEntity = cast<InternalEntity>(entityValue);
                    string value = internalEntity.Value;
                    if (attributeValueBuilder != null)
                    {
                        attributeValueBuilder.Append(value);
                    }
                    else
                    {
                        Text(value);
                    }
                }
                else if (entityValue is ExternalEntity)
                {
                    ExternalEntity externalEntity = cast<ExternalEntity>(entityValue);
                    ExternalID externalId = externalEntity.ExtID;
                    string notation  = externalEntity.Notation;
                    if (string.IsNullOrEmpty(notation))
                    {
                        string publicLiteral = externalId.PublicLiteral;
                        string systemLiteral = externalId.SystemLiteral;
                        string externalEntityContent = entityResolver.ResolveEntity(publicLiteral, ref systemLiteral);
                        if (recursiveEntityNames.Contains(entityName))
                        {
                            throw new XmlProcessingException(GetErrorLocationStr(systemId, span) + ": recursive reference to entity '" + entityName + "' detected");
                        }
                        recursiveEntityNames.Add(entityName);
                        contentStack.Push(content);
                        content = externalEntityContent;
                        externalEntityParser.ParseExternalXmlEntity(externalEntityContent, systemLiteral, this);
                        content = contentStack.Pop();
                        recursiveEntityNames.Remove(entityName);
                    }
                    else
                    {
                        // todo
                    }
                }
                else
                {
                    throw new Exception("logic error");
                }
            }
            else
            {
                contentHandler.SkippedEntity(entityName);
            }
        }
        public override void ParamEntityRef(string paramEntityRefName, System.Text.Parsing.Span span, string systemId) 
        {
            if (parsingEntityValue)
            {
                return;
            }
            ParameterEntityValue paramEntityValue;
            if (paramEntityMap.TryGetValue(paramEntityRefName, ref paramEntityValue))
            {
                // todo
            }
            else
            {
                throw new XmlProcessingException(GetErrorLocationStr(systemId, span) + ": parameter entity '" + paramEntityRefName + "' not found");
            }
        }
        public override void GeneralEntity(string entityName, EntityValue entityValue) 
        {
            entityMap[entityName] = entityValue;
        }
        public override void ParameterEntity(string peName, ParameterEntityValue peValue) 
        {
            paramEntityMap[peName] = peValue;
        }
        public override void Text(string text) 
        {
            if (attributeValueBuilder != null)
            {
                foreach (char c in text)
                {
                    if (char.IsCSpace(c))
                    {
                        attributeValueBuilder.Append(' ');
                    }
                    else
                    {
                        attributeValueBuilder.Append(c);
                    }
                }
                return;
            }
            contentHandler.Text(text);
        }
        public override void PI(string target, string data) 
        {
            contentHandler.ProcessingInstruction(target, data);
        }
        public override void Comment(string comment) 
        {
            contentHandler.Comment(comment);
        }
        public override void RootElementName(string rootElementName) 
        {
            this.rootElementName = rootElementName;
        }
        public override void BeginElementTypeDeclaration(string elementName, System.Text.Parsing.Span span, string systemId) 
        {
            if (elementTypeDeclarationMap.ContainsKey(elementName))
            {
                throw new XmlProcessingException(GetErrorLocationStr(systemId, span) + ": element '" + elementName + "' type declaration not unique");
            }
            elementContentSpec = new ElementContentSpec();
            elementTypeDeclarationMap[elementName] = elementContentSpec;
        }
        public override void EndElementTypeDeclaration(string elementName) 
        {
            elementContentSpec = null;
        }
        private void ParseQualifiedName(string qualifiedName, ref string localName, ref string prefix, System.Text.Parsing.Span span, string systemId)
        {
            List<string> parts = qualifiedName.Split(':');
            if (parts.Count > 2)
            {
                throw new XmlProcessingException(GetErrorLocationStr(systemId, span) + ": qualified name '" + qualifiedName + "' has more than one ':' character");
            }
            else if (parts.Count == 2)
            {
                prefix = parts[0];
                localName = parts[1];
            }
            else
            {
                prefix = string.Empty;
                localName = qualifiedName;
            }
        }
        private string GetNamespaceUri(string namespacePrefix, System.Text.Parsing.Span span, string systemId)
        {
            if (string.IsNullOrEmpty(namespacePrefix))
            {
                return currentNamespaceUri;
            }
            string namespaceUri;
            if (namespacePrefixMap.TryGetValue(namespacePrefix, ref namespaceUri))
            {
                return namespaceUri;
            }
            else
            {
                throw new XmlProcessingException(GetErrorLocationStr(systemId, span) + ": namespace prefix '" + namespacePrefix + "' not bound to any namespace URI");
            }
        }
        private string GetErrorLocationStr(string systemId, System.Text.Parsing.Span span)
        {
            int errorColumn = GetErrorColumn(span.Start);
            return "error in '" + systemId + "' at line " + span.LineNumber.ToString() + " column " + errorColumn.ToString() + " (index " + span.Start.ToString() + ")";
        }
        private int GetErrorColumn(int index)
        {
            int errorColumn = 0;
            while (index > 0 && content[index] != '\n' && content[index] != '\r')
            {
                ++errorColumn;
                --index;
            }
            if (errorColumn == 0)
            {
                errorColumn = 1;
            }
            return errorColumn;
        }
        private string content;
        private Stack<string> contentStack;
        private XmlContentHandler contentHandler;
        private XmlEntityResolver entityResolver;
        private XmlContentParser contentParser;
        private XmlExternalEntityParser externalEntityParser;
        private string rootElementName;
        private Stack<string> tagStack;
        private string currentTagName;
        private Attributes attributes;
        private Stack<string> namespaceUriStack;
        private string currentNamespaceUri;
        private Stack<string> namespacePrefixStack;
        private string currentNamespacePrefix;
        private HashMap<string, string> namespacePrefixMap;
        private HashMap<string, EntityValue> entityMap;
        private HashMap<string, ParameterEntityValue> paramEntityMap;
        private HashSet<string> recursiveEntityNames;
        private HashMap<string, ElementContentSpec> elementTypeDeclarationMap;
        private ElementContentSpec elementContentSpec;
        private StringBuilder attributeValueBuilder;
        private bool parsingEntityValue;
    }
}
