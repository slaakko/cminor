using System;
using System.Collections.Generic;
using System.Text.Parsing.CodeDom;

namespace System.Text.Parsing
{
    public class Namespace : ParsingObject
    {
        public Namespace(string qualifiedName, Scope enclosingScope) : base(qualifiedName, enclosingScope)
        {
            ContainerScope = new Scope(Name, EnclosingScope);
        }
        public override void Accept(Visitor visitor)
        {
            visitor.BeginVisit(this);
            GetScope().Accept(visitor);
            visitor.EndVisit(this);
        }
		public void Import(Namespace that, ParsingDomain targetDomain, bool importExternals)
		{
			targetDomain.BeginNamespace(that.Name);
			foreach (KeyValuePair<string, ParsingObject> p in that.ContainerScope.FullNameMap)
			{
				ParsingObject o = p.Value;
				if (!importExternals && o.External) continue;
				if (o is Grammar)
				{
					Grammar grammar = cast<Grammar>(o);
					grammar.EnclosingScope = targetDomain.CurrentScope;
					targetDomain.AddGrammar(grammar);
				}
				else if (o is Namespace)
				{
					Import(cast<Namespace>(o), targetDomain, importExternals);
				}
			}
			targetDomain.EndNamespace();
		}
    }

    public class UsingObject : ParsingObject
    {
        public UsingObject(DomObject subject, Scope enclosingScope) : base(subject.Name, enclosingScope)
        {
            this.subject = subject;
        }
        public DomObject Subject
        {
            get { return subject; }
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
        private DomObject subject;
    }
}
