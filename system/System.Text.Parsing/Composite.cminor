using System;
using System.Collections.Generic;

namespace System.Text.Parsing
{
    public abstract class UnaryParser : Parser
    {
        public UnaryParser(string name, Parser child, string info) : base(name, info)
        {
            this.child = child;
        }
        public Parser Child
        {
            get { return child; }
        }
        public override void Accept(Visitor visitor)
        {
            child.Accept(visitor);
        }
        private Parser child;
    }

    public abstract class BinaryParser : Parser
    {
        public BinaryParser(string name, Parser left, Parser right, string info) : base(name, info)
        {
            this.left = left;
            this.right = right;
        }
        public Parser Left
        {
            get { return left; }
        }
        public Parser Right
        {
            get { return right; }
        }
        private Parser left;
        private Parser right;
    }

    public class OptionalParser : UnaryParser
    {
        public OptionalParser(Parser child) : base("optional", child, child.Info + "?")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            Span save = scanner.SpanValue;
            Match match = Child.Parse(scanner, stack, parsingData);
            if (match.Hit)
            {
                return match;
            }
            scanner.SpanValue = save;
            return Match.Empty;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.BeginVisit(this);
            base.Accept(visitor);
            visitor.EndVisit(this);
        }
    }

    public class PositiveParser : UnaryParser
    {
        public PositiveParser(Parser child) : base("positive", child, child.Info + "+")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            Match match = Child.Parse(scanner, stack, parsingData);
            if (match.Hit)
            {
                for (;;)
                {
                    Span save = scanner.SpanValue;
                    scanner.Skip();
                    Match next = Child.Parse(scanner, stack, parsingData);
                    if (next.Hit)
                    {
                        match.Concatenate(next);
                    }
                    else
                    {
                        scanner.SpanValue = save;
                        break;
                    }
                }
            }
            return match;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.BeginVisit(this);
            base.Accept(visitor);
            visitor.EndVisit(this);
        }
    }

    public class KleeneStarParser : UnaryParser
    {
        public KleeneStarParser(Parser child) : base("kleene", child, child.Info + "*")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            Match match = Match.Empty;
            bool first = true;
            for (;;)
            {
                Span save = scanner.SpanValue;
                if (first)
                {
                    first = false;
                }
                else
                {
                    scanner.Skip();
                }
                Match next = Child.Parse(scanner, stack, parsingData);
                if (next.Hit)
                {
                    match.Concatenate(next);
                }
                else
                {
                    scanner.SpanValue = save;
                    break;
                }
            }
            return match;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.BeginVisit(this);
            base.Accept(visitor);
            visitor.EndVisit(this);
        }
    }

    public class ExpectationParser : UnaryParser
    {
        public ExpectationParser(Parser child) : base("expectation", child, child.Info + "!")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            Span expectationSpan = scanner.SpanValue;
            Match match = Match.Nothing;
            try
            {
                match = Child.Parse(scanner, stack, parsingData);
            }
            catch (ExpectationFailure ex)
            {
                throw new ExpectationFailure(Child.Info + ex.Info, ex.FileName, ex.SpanValue, ex.Content);
            }
            if (match.Hit)
            {
                return match;
            }
            else
            {
                throw new ExpectationFailure(Child.Info, scanner.FileName, expectationSpan, scanner.Content);
            }
        }
        public override void Accept(Visitor visitor)
        {
            visitor.BeginVisit(this);
            base.Accept(visitor);
            visitor.EndVisit(this);
        }
    }

    public class TokenParser : UnaryParser
    {
        public TokenParser(Parser child) : base("token", child, child.Info)
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            scanner.BeginToken();
            Match match = Child.Parse(scanner, stack, parsingData);
            scanner.EndToken();
            return match;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.BeginVisit(this);
            base.Accept(visitor);
            visitor.EndVisit(this);
        }
    }

    public class SequenceParser : BinaryParser
    {
        public SequenceParser(Parser left, Parser right) : base("sequence", left, right, left.Info)
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            Match left = Left.Parse(scanner, stack, parsingData);
            if (left.Hit)
            {
                scanner.Skip();
                Match right = Right.Parse(scanner, stack, parsingData);
                if (right.Hit)
                {
                    left.Concatenate(right);
                    return left;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.BeginVisit(this);
            Left.Accept(visitor);
            visitor.Visit(this);
            Right.Accept(visitor);
            visitor.EndVisit(this);
        }
    }

    public class AlternativeParser : BinaryParser
    {
        public AlternativeParser(Parser left, Parser right) : base("alternative", left, right, left.Info + " | " + right.Info)
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            Span save = scanner.SpanValue;
            Match left = Left.Parse(scanner, stack, parsingData);
            if (left.Hit)
            {
                return left;
            }
            scanner.SpanValue = save;
            return Right.Parse(scanner, stack, parsingData);
        }
        public override void Accept(Visitor visitor)
        {
            visitor.BeginVisit(this);
            Left.Accept(visitor);
            visitor.Visit(this);
            Right.Accept(visitor);
            visitor.EndVisit(this);
        }
    }

    public class DifferenceParser : BinaryParser
    {
        public DifferenceParser(Parser left, Parser right) : base("difference", left, right, left.Info + " - " + right.Info)
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            Span save = scanner.SpanValue;
            Match left = Left.Parse(scanner, stack, parsingData);
            if (left.Hit)
            {
                Span temp = scanner.SpanValue;
                scanner.SpanValue = save;
                save = temp;
                Match right = Right.Parse(scanner, stack, parsingData);
                if (!right.Hit || right.Length < left.Length)
                {
                    scanner.SpanValue = save;
                    return left;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.BeginVisit(this);
            Left.Accept(visitor);
            visitor.Visit(this);
            Right.Accept(visitor);
            visitor.EndVisit(this);
        }
    }

    public class ExclusiveOrParser : BinaryParser
    {
        public ExclusiveOrParser(Parser left, Parser right) : base("exclusive_or", left, right, left.Info + " ^ " + right.Info)
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            Span save = scanner.SpanValue;
            Match left = Left.Parse(scanner, stack, parsingData);
            Span temp = scanner.SpanValue;
            scanner.SpanValue = save;
            save = temp;
            Match right = Right.Parse(scanner, stack, parsingData);
            bool hit = right.Hit;
            if (left.Hit)
            {
                hit = !right.Hit;
            }
            if (hit)
            {
                if (left.Hit)
                {
                    scanner.SpanValue = save;
                    return left;
                }
                return right;
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.BeginVisit(this);
            Left.Accept(visitor);
            visitor.Visit(this);
            Right.Accept(visitor);
            visitor.EndVisit(this);
        }
    }

    public class IntersectionParser : BinaryParser
    {
        public IntersectionParser(Parser left, Parser right) : base("intersection", left, right, left.Info + " & " + right.Info)
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            Span save = scanner.SpanValue;
            Match left = Left.Parse(scanner, stack, parsingData);
            if (left.Hit)
            {
                scanner.SpanValue = save;
                Match right = Right.Parse(scanner, stack, parsingData);
                if (left.Length == right.Length)
                {
                    return left;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.BeginVisit(this);
            Left.Accept(visitor);
            visitor.Visit(this);
            Right.Accept(visitor);
            visitor.EndVisit(this);
        }
    }

    public class ListParser : UnaryParser
    {
        public ListParser(Parser left, Parser right) : base("list", new SequenceParser(left, new KleeneStarParser(new SequenceParser(right, left))), left.Info + " % " + right.Info)
        {
            this.left = left;
            this.right = right;
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            return Child.Parse(scanner, stack, parsingData);
        }
        public override void Accept(Visitor visitor)
        {
            visitor.BeginVisit(this);
            left.Accept(visitor);
            visitor.Visit(this);
            right.Accept(visitor);
            visitor.EndVisit(this);
        }
        private Parser left;
        private Parser right;
    }
}
