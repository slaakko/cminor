using System;
using System.IO;
using System.Collections.Generic;

namespace System.Text.Parsing
{
    public class Grammar : ParsingObject
    {
        public Grammar(string name, Scope enclosingScope) : this(name, enclosingScope, new ParsingDomain())
        {
        }
        public Grammar(string name, Scope enclosingScope, ParsingDomain parsingDomain) : base(name, enclosingScope)
        {
            this.parsingDomain = parsingDomain;
            this.rules = new List<RuleParser>();
            this.ruleLinks = new List<RuleLink>();
            this.referencedGrammars = new HashSet<Grammar>();
            this.linking = false;
            this.linked = false;
            this.maxLogLineLength = 0;
            ContainerScope = new Scope(name, enclosingScope);
        }
        public ParsingDomain Domain
        {
            get { return parsingDomain; }
        }
        public virtual void GetReferencedGrammars()
        {
        }
        public virtual void CreateRules()
        {
        }
        public void Link()
        {
            if (!linking && !linked)
            {
                linking = true;
                GetReferencedGrammars();
                foreach (Grammar referencedGrammar in referencedGrammars)
                {
                    referencedGrammar.Link();
                }
                LinkerVisitor visitor = new LinkerVisitor();
                Accept(visitor);
                linking = false;
                linked = true;
            }
        }
        public void Parse(string content, int fileIndex, string fileName)
        {
            Stack<object> stack = new Stack<object>();
            Scanner scanner = new Scanner(content, fileIndex, fileName, skipRule);
			ParsingData parsingData = new ParsingData(Domain.NumRules);
			scanner.Data = parsingData;
            System.IO.StreamWriter log = Log;
            XmlLog xmlLog = null;
            try
            {
                if (log != null)
                {
                    xmlLog = new XmlLog(log);
                    xmlLog.MaxLineLength = maxLogLineLength;
                    scanner.Log = xmlLog;
                    xmlLog.WriteBeginRule("parse");
                    xmlLog.IncIndent();
                }
                Match match = Parse(scanner, stack, parsingData);
                Span stop = scanner.SpanValue;
                if (log != null)
                {
                    xmlLog.DecIndent();
                    xmlLog.WriteEndRule("parse");
                }
                if (!match.Hit || stop.Start != content.Length)
                {
                    if (startRule == null)
                    {
                        throw new Exception("grammar '" + FullName + "' has no start rule");
                    }
                    else
                    {
                        throw new ExpectationFailure(startRule.Info, fileName, stop, content);
                    }
                }
            }
            finally
            {
                if (xmlLog != null)
                {
                    xmlLog.Close();
                }
            }
        }
        public Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (startRule != null)
            {
                if (contentParser == null)
                {
                    if (skipRule != null)
                    {
                        contentParser = new SequenceParser(new SequenceParser(new OptionalParser(skipRule), startRule), new OptionalParser(skipRule));
                    }
                    else
                    {
                        contentParser = startRule;
                    }
                }
                return contentParser.Parse(scanner, stack, parsingData);
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.BeginVisit(this);
            foreach (RuleLink ruleLink in ruleLinks)
            {
                ruleLink.Accept(visitor);
            }
            foreach (RuleParser rule in rules)
            {
                rule.Accept(visitor);
            }
            visitor.EndVisit(this);
        }
        public void AddRule(RuleParser rule)
        {
            rule.GrammarValue = this;
            rule.GetScope().EnclosingScope = GetScope();
            rule.EnclosingScope = GetScope();
            rules.Add(rule);
            try
            {
                GetScope().Add(rule);
            }
            catch (Exception ex)
            {
                ThrowException(ex.Message, SpanValue);
            }
        }
        public RuleParser GetRule(string ruleName)
        {
            ParsingObject o = GetScope().Get(ruleName);
            if (o == null)
            {
                ThrowException("rule '" + ruleName + "' not found in grammar '" + FullName + "'", SpanValue);
            }
            if (o is RuleParser)
            {
                return cast<RuleParser>(o);
            }
            else
            {
                if (o is RuleLink)
                {
                    RuleLink ruleLink = cast<RuleLink>(o);
                    RuleParser rule = ruleLink.Rule;
                    if (rule == null)
                    {
                        ThrowException("rule link '" + ruleName + "' not bound in grammar '" + FullName + "'", SpanValue);
                    }
                    return rule;
                }
                else
                {
                    ThrowException("object '" + ruleName + "' (" + o.FullName + ") is not a rule or rule link", SpanValue);
                }
            }
            return null;
        }
        public void AddRuleLink(RuleLink ruleLink)
        {
            if (ruleLink.AddedToGrammar) return;
            ruleLinks.Add(ruleLink);
            ruleLink.AddedToGrammar = true;
        }
        public void ResolveStartRule()
        {
            if (string.IsNullOrEmpty(startRuleName))
            {
                if (rules.Count > 0)
                {
                    startRule = rules[0];
                }
                else
                {
                    ThrowException("cannot resolve start rule because grammar '" + FullName + "' is empty", SpanValue);
                }
            }
            else
            {
                startRule = GetRule(startRuleName);
            }
        }
        public void ResolveSkipRule()
        {
            if (string.IsNullOrEmpty(skipRuleName)) return;
            skipRule = GetRule(skipRuleName);
        }
        public Namespace Ns
        {
            get { return ns; }
            set { ns = value; }
        }
        public string StartRuleName
        {
            get { return startRuleName; }
            set { startRuleName = value; }
        }
        public string SkipRuleName
        {
            get { return skipRuleName; }
            set { skipRuleName = value; }
        }
        public RuleParser StartRule
        {
            get { return startRule; }
            set { startRule = value; }
        }
        public RuleParser SkipRule
        {
            get { return skipRule; }
            set { skipRule = value; }
        }
        public List<RuleParser> Rules
        {
            get { return rules; }
        }
        public List<RuleLink> RuleLinks
        {
            get { return ruleLinks; }
        }
        public HashSet<Grammar> ReferencedGrammars
        {
            get { return referencedGrammars; }
        }
        public StreamWriter Log
        {
            get { return log; }
            set { log = value; }
        }
        public int MaxLogLineLength
        {
            get { return maxLogLineLength; }
            set { maxLogLineLength = value; }
        }
        private string name;
        private Scope enclosingScope;
        private ParsingDomain parsingDomain;
        private List<RuleParser> rules;
        private List<RuleLink> ruleLinks;
        private Namespace ns;
        private string startRuleName;
        private string skipRuleName;
        private Parser contentParser;
        private RuleParser startRule;
        private RuleParser skipRule;
        private HashSet<Grammar> referencedGrammars;
        private bool linking;
        private bool linked;
        private int maxLogLineLength;
        private StreamWriter log;
    }
}
