using System;
using System.Collections.Generic;

namespace System.Text.Parsing
{
    public class CharParser : Parser
    {
        public CharParser(char c) : base("char", "'" + c.ToString() + "'")
        {
            this.c = c;
        }
        public char Char
        {
            get { return c; }
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (scanner.Char == c)
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
        private char c;
    }

    public class StringParser : Parser
    {
        public StringParser(string s) : base("string", "\"" + s + "\"")
        {
            this.s = s;
        }
        public string String
        {
            get { return s; }
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            Match match = Match.Empty;
            int i = 0;
            int n = s.Length;
            while (i < n && !scanner.AtEnd && scanner.Char == s[i])
            {
                scanner.Advance();
                ++i;
                match.Concatenate(Match.One);
            }
            if (i == n)
            {
                return match;
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {        
            visitor.Visit(this);
        }    
        private string s;
    }

    internal string InverseStr(bool inverse)
    {
        if (inverse) return "^";
        return "";
    }

    public class CharRange
    {
        public CharRange(char begin)
        {
            this.begin = begin;
            this.end = begin;
        }
        public CharRange(char begin, char end)
        {
            this.begin = begin;
            this.end = end;
        }
        public bool Includes(char c)
        {
            return c >= begin && c <= end;
        }
        public char Begin
        {
            get { return begin; }
            set { begin = value; }
        }
        public char End
        {
            get { return end; }
            set { end = value; }
        }
        private char begin;
        private char end;
    }

    public class CharSetParser : Parser
    {
        public CharSetParser(string s) : base("charset", "[" + s + "]")
        {
            this.s = s;
            this.inverse = false;
            this.ranges = new List<CharRange>();
            InitRanges();
        }
        public CharSetParser(string s, bool inverse) : base("charset", "[" + InverseStr(inverse) + s + "]")
        {
            this.s = s;
            this.inverse = inverse;
            this.ranges = new List<CharRange>();
            InitRanges();
        }
        public string Set
        {
            get { return s; }
        }
        public bool Inverse
        {
            get { return inverse; }
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                char c = scanner.Char;
                bool found = false;
                int n = ranges.Count;
                for (int i = 0; i < n; ++i)
                {
                    CharRange range = ranges[i];
                    if (range.Includes(c))
                    {
                        found = true;
                        break;
                    }
                }
                bool matched = found != inverse;
                if (matched)
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
        private void InitRanges()
        {
            int i = 0;
            int n = s.Length;
            while (i < n)
            {
                char first = s[i];
                char last = first;
                ++i;
                if (i < n)
                {
                    if (s[i] == '-')
                    {
                        ++i;
                        if (i < n)
                        {
                            last = s[i];
                            ++i;
                        }
                        else
                        {
                            ranges.Add(new CharRange(first));
                            first = '-';
                            last = first;
                        }
                    }
                }
                ranges.Add(new CharRange(first, last));
            }
        }
        private string s;
        private bool inverse;
        private List<CharRange> ranges;
    }

    public class EmptyParser : Parser
    {
        public EmptyParser() : base("empty", "<empty>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            return Match.Empty;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class SpaceParser : Parser
    {
        public SpaceParser() : base("space", "<space>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsSpace(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class LetterParser : Parser
    {
        public LetterParser() : base("letter", "<letter>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsLetter(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class UpperLetterParser : Parser
    {
        public UpperLetterParser() : base("upper_letter", "<upper_letter>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsUpper(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class LowerLetterParser : Parser
    {
        public LowerLetterParser() : base("lower_letter", "<lower_letter>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsLower(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class TitleLetterParser : Parser
    {
        public TitleLetterParser() : base("title_letter", "<title_letter>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsTitleLetter(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class ModifierLetterParser : Parser
    {
        public ModifierLetterParser() : base("modifier_letter", "<modifier_letter>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsModifierLetter(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class OtherLetterParser : Parser
    {
        public OtherLetterParser() : base("other_letter", "<other_letter>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsOtherLetter(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class CasedLetterParser : Parser
    {
        public CasedLetterParser() : base("cased_letter", "<cased_letter>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsCasedLetter(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class DigitParser : Parser
    {
        public DigitParser() : base("digit", "<digit>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsDigit(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class HexDigitParser : Parser
    {
        public HexDigitParser() : base("hexdigit", "<hexdigit>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsHexDigit(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class MarkParser : Parser
    {
        public MarkParser() : base("mark", "<mark>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsMark(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class NonspacingMarkParser : Parser
    {
        public NonspacingMarkParser() : base("nonspacing_mark", "<nonspacing_mark>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsNonspacingMark(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class SpacingMarkParser : Parser
    {
        public SpacingMarkParser() : base("spacing_mark", "<spacing_mark>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsSpacingMark(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class EnclosingMarkParser : Parser
    {
        public EnclosingMarkParser() : base("enclosing_mark", "<enclosing_mark>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsEnclosingMark(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class NumberParser : Parser
    {
        public NumberParser() : base("number", "<number>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsNumber(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class DecimalNumberParser : Parser
    {
        public DecimalNumberParser() : base("decimal_number", "<decimal_number>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsDecimalNumber(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class LetterNumberParser : Parser
    {
        public LetterNumberParser() : base("letter_number", "<letter_number>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsLetterNumber(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class OtherNumberParser : Parser
    {
        public OtherNumberParser() : base("other_number", "<other_number>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsOtherNumber(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class PunctuationParser : Parser
    {
        public PunctuationParser() : base("punctuation", "<punctuation>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsPunctuation(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class ConnectorPunctuationParser : Parser
    {
        public ConnectorPunctuationParser() : base("connector_punctuation", "<connector_punctuation>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsConnectorPunctuation(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class DashPunctuationParser : Parser
    {
        public DashPunctuationParser() : base("dash_punctuation", "<dash_punctuation>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsDashPunctuation(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class OpenPunctuationParser : Parser
    {
        public OpenPunctuationParser() : base("open_punctuation", "<open_punctuation>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsOpenPunctuation(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class ClosePunctuationParser : Parser
    {
        public ClosePunctuationParser() : base("close_punctuation", "<close_punctuation>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsClosePunctuation(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class InitialPunctuationParser : Parser
    {
        public InitialPunctuationParser() : base("initial_punctuation", "<initial_punctuation>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsInitialPunctuation(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class FinalPunctuationParser : Parser
    {
        public FinalPunctuationParser() : base("final_punctuation", "<final_punctuation>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsFinalPunctuation(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class OtherPunctuationParser : Parser
    {
        public OtherPunctuationParser() : base("other_punctuation", "<other_punctuation>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsOtherPunctuation(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class SymbolParser : Parser
    {
        public SymbolParser() : base("symbol", "<symbol>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsSymbol(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class MathSymbolParser : Parser
    {
        public MathSymbolParser() : base("math_symbol", "<math_symbol>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsMathSymbol(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class CurrencySymbolParser : Parser
    {
        public CurrencySymbolParser() : base("currency_symbol", "<currency_symbol>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsCurrencySymbol(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class ModifierSymbolParser : Parser
    {
        public ModifierSymbolParser() : base("modifier_symbol", "<modifier_symbol>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsModifierSymbol(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class OtherSymbolParser : Parser
    {
        public OtherSymbolParser() : base("other_symbol", "<other_symbol>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsOtherSymbol(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class SeparatorParser : Parser
    {
        public SeparatorParser() : base("separator", "<separator>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsSeparator(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class SpaceSeparatorParser : Parser
    {
        public SpaceSeparatorParser() : base("space_separator", "<space_separator>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsSpaceSeparator(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class LineSeparatorParser : Parser
    {
        public LineSeparatorParser() : base("line_separator", "<line_separator>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsLineSeparator(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class ParagraphSeparatorParser : Parser
    {
        public ParagraphSeparatorParser() : base("paragraph_separator", "<paragraph_separator>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsParagraphSeparator(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class OtherParser : Parser
    {
        public OtherParser() : base("other", "<other>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsOther(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class ControlParser : Parser
    {
        public ControlParser() : base("control", "<control>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsControl(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class FormatParser : Parser
    {
        public FormatParser() : base("format", "<format>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsFormat(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class SurrogateParser : Parser
    {
        public SurrogateParser() : base("surrogate", "<surrogate>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsSurrogate(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class PrivateUseParser : Parser
    {
        public PrivateUseParser() : base("private_use", "<private_use>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsPrivateUse(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class UnassignedParser : Parser
    {
        public UnassignedParser() : base("unassigned", "<unassigned>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsUnassigned(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class GraphicParser : Parser
    {
        public GraphicParser() : base("graphic", "<graphic>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsGraphic(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class BaseCharParser : Parser
    {
        public BaseCharParser() : base("base_char", "<base_char>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsBaseChar(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class AlphabeticParser : Parser
    {
        public AlphabeticParser() : base("alphabetic", "<alphabetic>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsAlphabetic(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class IdStartParser : Parser
    {
        public IdStartParser() : base("idstart", "<idstart>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsIdStart(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class IdContParser : Parser
    {
        public IdContParser() : base("idcont", "<idcont>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                if (char.IsIdCont(scanner.Char))
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }
    
    public class AnyCharParser : Parser
    {
        public AnyCharParser() : base("anyChar", "<anyChar>")
        {
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                scanner.Advance();
                return Match.One;
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class RangeParser : Parser
    {
        public RangeParser(uint rangeStart, uint rangeEnd) : base("range", "<range>")
        {
            this.rangeStart = rangeStart;
            this.rangeEnd = rangeEnd;
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (!scanner.AtEnd)
            {
                uint codePoint = cast<uint>(scanner.Char);
                if (codePoint >= rangeStart && codePoint <= rangeEnd)
                {
                    scanner.Advance();
                    return Match.One;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
        public uint RangeStart
        {
            get { return rangeStart; }
        }
        public uint RangeEnd
        {
            get { return rangeEnd; }
        }
        private uint rangeStart;
        private uint rangeEnd;
    }
}
