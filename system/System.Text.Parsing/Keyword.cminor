using System;
using System.Collections.Generic;

namespace System.Text.Parsing
{
    public class IdentifierChars
    {
        static IdentifierChars()
        {
            instance = new IdentifierChars();
        }
        public static IdentifierChars Instance() 
        {
            return instance;
        }
        private IdentifierChars()
        {
            rule = new RuleParser("identifier_chars", null, -1,
                new PositiveParser(
                    new AlternativeParser(
                        new AlternativeParser(
                            new LetterParser(),
                            new DigitParser()), 
                        new CharParser('_'))));
        } 
        public RuleParser Rule
        {
            get { return rule; }
        }
        private static IdentifierChars instance;
        private RuleParser rule;
    }

    public class KeywordParser : Parser
    {
        public KeywordParser(string keyword) : this(keyword, string.Empty)
        {
        }
        public KeywordParser(string keyword, string continuationRuleName) : base("keyword", "\"" + keyword + "\"")
        {
            this.keyword = keyword;
            this.continuationRuleName = continuationRuleName;
            this.continuationRule = IdentifierChars.Instance().Rule;
            this.keywordStringParser = new StringParser(keyword);
            CreateKeywordRule();
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            return keywordRule.Parse(scanner, stack, parsingData);
        }
        public  override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
        public string Keyword
        {
            get { return keyword; }
        }
        public string ContinuationRuleName 
        {
            get { return continuationRuleName; }
        }
        public RuleParser ContinuationRule
        {
            get { return continuationRule; }
            set { continuationRule = value; }
        }
        private void CreateKeywordRule()
        {
            keywordRule = new RuleParser(keyword, null, -1,
                new DifferenceParser(
                    keywordStringParser,
                    new TokenParser(
                        new SequenceParser(
                            keywordStringParser,
                            continuationRule))));
        }
        private string keyword;
        private string continuationRuleName;
        private RuleParser continuationRule;
        private Parser keywordStringParser;
        private RuleParser keywordRule;
    }

    public class KeywordListParser : Parser
    {
        public KeywordListParser(string selectorRuleName, List<string> keywords) : base("keyword_list", "keyword_list")
        {
            this.selectorRuleName = selectorRuleName;
            this.keywords = new HashSet<string>();
            foreach (string keyword in keywords)
            {
                this.keywords.Add(keyword);
            }
        }
        public override Match Parse(Scanner scanner, Stack<object> stack, ParsingData parsingData)
        {
            if (selectorRule != null)
            {
                Span save = scanner.SpanValue;
                Match match = selectorRule.Parse(scanner, stack, parsingData);
                if (match.Hit)
                {
                    string s = scanner.Content.Substring(save.Start, scanner.SpanValue.Start - save.Start);
                    if (keywords.Contains(s))
                    {
                        return match;
                    }
                    scanner.SpanValue = save;
                }
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
        public string SelectorRuleName
        {
            get { return selectorRuleName; }
        }
        public string KeywordListName
        {
            get { return keywordListName; }
            set { keywordListName = value; }
        }
        public RuleParser SelectorRule
        {
            get { return selectorRule; }
            set { selectorRule = value; }
        }
        public HashSet<string> Keywords
        {
            get { return keywords; }
        }
        private string selectorRuleName;
        private string keywordListName;
        private RuleParser selectorRule;
        private HashSet<string> keywords;
    }
}
