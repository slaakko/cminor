using System;
using System.Collections.Generic;
using System.Text.Parsing.CodeDom;

namespace System.Text.Parsing
{
    public class delegate void PreCall(Stack<object> stack);

    public class delegate void PostCall(Stack<object> stack, bool matched);

    public class NonterminalArgumentAdder : DomObject
    {
        public NonterminalArgumentAdder(NonterminalParser parser)
        {
            this.parser = parser;
        }
        public override void AddArgument(DomObject argument)
        {
            parser.AddArgument(argument);
        }
        public override void Accept(System.Text.Parsing.CodeDom.Visitor visitor)
        {
        }
        private NonterminalParser parser;
    }

    public class NonterminalParser : Parser
    {
        public NonterminalParser() : this("nonterminal", "rule")
        {
        }
        public NonterminalParser(string name, string ruleName) : this(name, ruleName, 0)
        {
        }
        public NonterminalParser(string name, string ruleName, int numberOfArguments) : base(name, "<" + name + ">")
        {
            this.ruleName = ruleName;
            this.numberOfArguments = numberOfArguments;
            this.arguments = new List<DomObject>();
        }
        public void AddArgument(DomObject argument)
        {
            arguments.Add(argument);
        }
        public override Match Parse(Scanner scanner, Stack<object> stack)
        {
            if (rule != null)
            {
                if (preCall != null)
                {
                    preCall(stack);
                }
                Match match = rule.Parse(scanner, stack);
                if (postCall != null)
                {
                    postCall(stack, match.Hit);
                }
                return match;
            }
            return Match.Nothing;
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
        public string RuleName
        {
            get { return ruleName; }
            set { ruleName = value; }
        }
        public int NumberOfArguments
        {
            get 
            { 
                if (numberOfArguments != 0)
                {
                    return numberOfArguments; 
                }
                return arguments.Count;
            }
        }
        public List<DomObject> Arguments
        {
            get { return arguments; }
        }
        public RuleParser Rule
        {
            get { return rule; }
            set { rule = value; }
        }
        public PreCall Pre
        {
            get { return preCall; }
            set { preCall = value; }
        }
        public PostCall Post
        {
            get { return postCall; }
            set { postCall = value; }
        }
        public string PreCallMethodName
        {
            get { return "Pre" + Name; }
        }
        public string PostCallMethodName
        {
            get { return "Post" + Name; }
        }
        public string ValueFieldName
        {
            get { return "from" + Name; }
        }
        public string VariableName
        {
            get 
            { 
                if (string.IsNullOrEmpty(Name))
                {
                    return "NonterminalParser";
                }
                return new string(char.ToLower(Name[0]), 1) + Name.Substring(1) + "NonterminalParser";
            }
        }
        public bool Specialized
        {
            get { return numberOfArguments > 0 || arguments.Count > 0 || rule != null && rule.TakesOrReturnsValuesOrHasLocals; }
        }
        private string ruleName;
        private int numberOfArguments;
        private List<DomObject> arguments;
        private RuleParser rule;
        private PreCall preCall;
        private PostCall postCall;
    }
}
