namespace System
{
    public class String
    {
        [VmFunctionName=System.String.Constructor.CharArray]
        public extern String(char[] chars);
        public String(char c, int count) : this(MakeCharArray(c, count))
        {
        }
        public override string ToString()
        {
            return this;
        }
        public int Length
        {   
            get { return length; }
        }
        private int length;
    }

    public bool operator==(String left, String right)
    {
        int leftLength = 0;
        if (left != null) leftLength = left.Length;
        int rightLength = 0;
        if (right != null) rightLength = right.Length;
        if (leftLength != rightLength) return false;
        for (int i = 0; i < leftLength ; ++i)
        {
            if (left[i] != right[i]) return false;
        }
        return true;
    }

    public bool operator<(String left, String right)
    {
        if (left == null && right == null) return false;
        if (left == null) return true;
        if (right == null) return false;
        int leftLength = left.Length;
        int rightLength = right.Length;
        int n = Min(leftLength, rightLength);
        for (int i = 0; i < n; ++i)
        {
            if (left[i] < right[i]) return true;
            if (left[i] > right[i]) return false;
        }
        return leftLength < rightLength;
    }

    public char[] MakeCharArray(char c, int count)
    {
        if (count >= 0)
        {
            char[] arr = new char[count];
            return arr;
        }
        else
        {
            throw new ArgumentOutOfRangeException("invalid array size");
        }
    }
}
