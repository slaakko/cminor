using System.Text;

namespace System
{
    public class String : Enumerable
    {
        [VmFunctionName=System.String.Constructor.CharArray]
        public extern String(char[] chars);
        public String(char c, int count) : this(MakeCharArray(c, count))
        {
        }
        public override string ToString()
        {
            return this;
        }
        public string Substring(int start)
        {
            if (start == length)
            {
                return Empty;
            }
            StringBuilder s = new StringBuilder();
            for (int i = start; i < length; ++i)
            {
                s.Append(this[i]);
            }
            return s.ToString();
        }
        public string Substring(int start, int len)
        {
            StringBuilder s = new StringBuilder();
            int n = start + len;
            for (int i = start; i < n; ++i)
            {
                s.Append(this[i]);
            }
            return s.ToString();
        }
        public static string Empty
        {
            get { return ""; }
        }
        private const ulong hashOffset = 14695981039346656037u;
        private const ulong hashPrime = 1099511628211u;
        public override ulong GetHashCode()
        {
            ulong hashCode = hashOffset;
            for (int i = 0; i < length; ++i)
            {
                char c = this[i];
                hashCode = hashCode ^ cast<ulong>(c);
                hashCode = hashCode * hashPrime;
            }
            return hashCode;
        }
        public static bool IsNullOrEmpty(String s)
        {
            return s == null || s.Length == 0;
        }
        public Enumerator GetEnumerator()
        {
            return new StringEnumerator(this);
        }
        public int Length
        {   
            get { return length; }
        }
        private int length;
    }

    public bool operator==(String left, String right)
    {
        int leftLength = 0;
        if (left != null) leftLength = left.Length;
        int rightLength = 0;
        if (right != null) rightLength = right.Length;
        if (leftLength != rightLength) return false;
        for (int i = 0; i < leftLength ; ++i)
        {
            if (left[i] != right[i]) return false;
        }
        return true;
    }

    public bool operator<(String left, String right)
    {
        if (left == null && right == null) return false;
        if (left == null) return true;
        if (right == null) return false;
        int leftLength = left.Length;
        int rightLength = right.Length;
        int n = Min(leftLength, rightLength);
        for (int i = 0; i < n; ++i)
        {
            if (left[i] < right[i]) return true;
            if (left[i] > right[i]) return false;
        }
        return leftLength < rightLength;
    }

    public char[] MakeCharArray(char c, int count)
    {
        if (count >= 0)
        {
            char[] arr = new char[count];
            return arr;
        }
        else
        {
            throw new ArgumentOutOfRangeException("invalid array size");
        }
    }

    internal class StringEnumerator : Enumerator
    {
        public StringEnumerator(String s)
        {
            this.s = s;
            this.index = 0;
        }
        public bool AtEnd() 
        {
            if (s == null) return true;
            return index >= s.Length;
        }
        public object GetCurrent()
        {
            return s[index];
        }
        public void MoveNext()
        {
            ++index;
        }
        private string s;
        private int index;
    }

    public string operator+(string left, string right)
    {
        StringBuilder s = new StringBuilder();
        s.Append(left).Append(right);
        return s.ToString();
    }
}
