using System.Text;

namespace System
{
    public enum Month : byte
    {
        Jan = 1u, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec
    }

    public string MonthStr(Month month)
    {
        switch (month)
        {
            case Month.Jan: return "Jan";
            case Month.Feb: return "Feb";
            case Month.Mar: return "Mar";
            case Month.Apr: return "Apr";
            case Month.May: return "May";
            case Month.Jun: return "Jun";
            case Month.Jul: return "Jul";
            case Month.Aug: return "Aug";
            case Month.Sep: return "Sep";
            case Month.Oct: return "Oct";
            case Month.Nov: return "Nov";
            case Month.Dec: return "Dec";
        }
        return string.Empty;
    }

    public class Date
    {
        public Date()
        {
            this.year = 1u;
            this.month = Month.Jan;
            this.day = 1u;
        }
        public Date(ushort year, Month month, byte day)
        {
            this.year = year;
            this.month = month;
            this.day = day;
        }
        public override string ToString()
        {
            StringBuilder s = new StringBuilder();
            s.Append(cast<char>(cast<int>('0') + (year / 1000u)));
            s.Append(cast<char>(cast<int>('0') + ((year % 1000u) / 100u)));
            s.Append(cast<char>(cast<int>('0') + ((year % 100u) / 10u)));
            s.Append(cast<char>(cast<int>('0') + (year % 10u)));
            s.Append('-');
            s.Append(cast<char>(cast<int>('0') + (cast<byte>(month) / 10u)));
            s.Append(cast<char>(cast<int>('0') + (cast<byte>(month) % 10u)));
            s.Append('-');
            s.Append(cast<char>(cast<int>('0') + (day / 10u)));
            s.Append(cast<char>(cast<int>('0') + (day % 10u)));
            return s.ToString();
        }
        public string ToInternetString()
        {
            StringBuilder s = new StringBuilder();
            s.Append(cast<char>(cast<int>('0') + (day / 10u)));
            s.Append(cast<char>(cast<int>('0') + (day % 10u)));
            s.Append(' ');
            s.Append(MonthStr(month));
            s.Append(' ');
            s.Append(cast<char>(cast<int>('0') + (year / 1000u)));
            s.Append(cast<char>(cast<int>('0') + ((year % 1000u) / 100u)));
            s.Append(cast<char>(cast<int>('0') + ((year % 100u) / 10u)));
            s.Append(cast<char>(cast<int>('0') + (year % 10u)));
            return s.ToString();
        }
        public ushort Year
        {
            get { return year; }
        }
        public Month MonthEnum
        {
            get { return month; }
        }
        public byte MonthNumber
        {
            get { return cast<byte>(month); }
        }
        public byte Day
        {
            get { return day; }
        }
        private ushort year;
        private Month month;
        private byte day;
    }

    public bool operator==(Date left, Date right)
    {
        return left.Year == right.Year && left.MonthNumber == right.MonthNumber && left.Day == right.Day;
    }

    public bool operator<(Date left, Date right)
    {
        if (left.Year < right.Year) return true;
        if (left.Year > right.Year) return false;
        if (left.MonthNumber < right.MonthNumber) return true;
        if (left.MonthNumber > right.MonthNumber) return false;
        return left.Day < right.Day;
    }

    [vmf=curdate]
    public extern Date CurrentDate();

    public bool TryParseDate(string s, ref Date date) // try parse date from format "YYYY-MM-DD"
    {
        if (string.IsNullOrEmpty(s)) return false;
        if (s.Length != 10) return false;
        if (s[0] < '0' || s[0] > '9') return false;
        if (s[1] < '0' || s[1] > '9') return false;
        if (s[2] < '0' || s[2] > '9') return false;
        if (s[3] < '0' || s[3] > '9') return false;
        if (s[4] != '-')  return false;
        if (s[5] < '0' || s[5] > '9') return false;
        if (s[6] < '0' || s[6] > '9') return false;
        if (s[7] != '-') return false;
        if (s[8] < '0' || s[8] > '9') return false;
        if (s[9] < '0' || s[9] > '9') return false;
        int y = (cast<int>(s[0]) - cast<int>('0')) * 1000 + (cast<int>(s[1]) - cast<int>('0')) * 100 + (cast<int>(s[2]) - cast<int>('0')) * 10 + (cast<int>(s[3]) - cast<int>('0'));
        if (y < 1 || y > 9999) return false;
        int m = (cast<int>(s[5]) - cast<int>('0')) * 10 + (cast<int>(s[6]) - cast<int>('0'));
        if (m < 1 || m > 12) return false;
        int d = (cast<int>(s[8]) - cast<int>('0')) * 10 + (cast<int>(s[9]) - cast<int>('0'));
        if (d < 1 || d > 31) return false;
        date = new Date(cast<ushort>(y), cast<Month>(cast<byte>(m)), cast<byte>(d));
        return true;
    }

    public Date ParseDate(string s) 
    {
        Date date;
        if (!TryParseDate(s, ref date))
        {
            ThrowConversionException("invalid date '" + s + "': format YYYY-MM-DD expected");
        }
        return date;
    }
}
