using System;

namespace System.Text.Parsing.CodeDom
{
    public abstract class Type : DomObject
    {
        public Type(string name) : base(name)
        {
        }
    }

    public class BoolType : Type
    {
        public BoolType() : base("bool")
        {
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class CharType : Type
    {
        public CharType() : base("char")
        {
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class VoidType : Type
    {
        public VoidType() : base("void")
        {
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class SByteType : Type
    {
        public SByteType() : base("sbyte")
        {
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class ByteType : Type
    {
        public ByteType() : base("byte")
        {
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class ShortType : Type
    {
        public ShortType() : base("short")
        {
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class UShortType : Type
    {
        public UShortType() : base("ushort")
        {
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class IntType : Type
    {
        public IntType() : base("int")
        {
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class UIntType : Type
    {
        public UIntType() : base("uint")
        {
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class LongType : Type
    {
        public LongType() : base("long")
        {
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class ULongType : Type
    {
        public ULongType() : base("ulong")
        {
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class FloatType : Type
    {
        public FloatType() : base("float")
        {
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class DoubleType : Type
    {
        public DoubleType() : base("double")
        {
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class ObjectType : Type
    {
        public ObjectType() : base("object")
        {
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class StringType : Type
    {
        public StringType() : base("string")
        {
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }

    public class TypeExpr : Type
    {
        public TypeExpr(string name) : base(name)
        {
        }
        public override void Accept(Visitor visitor)
        {
            visitor.Visit(this);
        }
    }
}
