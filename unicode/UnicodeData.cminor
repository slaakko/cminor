using System;
using System.Collections.Generic;
using System.Text.Parsing;
using System.Unicode;

namespace UnicodeBin
{
    public class UnicodeDataGrammar : System.Text.Parsing.Grammar
    {
        public UnicodeDataGrammar() : this(new ParsingDomain())
        {
        }
        public UnicodeDataGrammar(ParsingDomain parsingDomain) : base("UnicodeDataGrammar", parsingDomain.GetNamespaceScope("UnicodeBin"), parsingDomain)
        {
            Owner = 0;
            parsingDomain.AddGrammar(this);
            CreateRules();
            Link();
        }
        public class characterDataRule : System.Text.Parsing.RuleParser
        {
            public characterDataRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                NonterminalParser codeNonterminalParser = GetNonterminal("code");
                codeNonterminalParser.Post = Postcode;
                NonterminalParser nameNonterminalParser = GetNonterminal("name");
                nameNonterminalParser.Post = Postname;
                NonterminalParser categoryNonterminalParser = GetNonterminal("category");
                categoryNonterminalParser.Post = Postcategory;
                NonterminalParser upperNonterminalParser = GetNonterminal("upper");
                upperNonterminalParser.Post = Postupper;
                NonterminalParser lowerNonterminalParser = GetNonterminal("lower");
                lowerNonterminalParser.Post = Postlower;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                CharacterInfo characterInfo = new CharacterInfo(cast<char>(context.fromcode), context.fromname, CategoryMap.Instance.GetCategory(context.fromcategory), cast<char>(context.fromlower), cast<char>(context.fromupper));
                CharacterInfoMap.Instance.Add(characterInfo);
            }
            public void Postcode(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromcode = cast<uint>(stack.Pop());
                }
            }
            public void Postname(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromname = cast<string>(stack.Pop());
                }
            }
            public void Postcategory(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromcategory = cast<string>(stack.Pop());
                }
            }
            public void Postupper(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromupper = cast<uint>(stack.Pop());
                }
            }
            public void Postlower(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromlower = cast<uint>(stack.Pop());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public uint fromcode;
                public string fromname;
                public string fromcategory;
                public uint fromupper;
                public uint fromlower;
            }
        }
        public class codepointRule : System.Text.Parsing.RuleParser
        {
            public codepointRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "uint";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
                NonterminalParser xNonterminalParser = GetNonterminal("x");
                xNonterminalParser.Post = Postx;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = context.fromx;
            }
            public void Postx(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    context.fromx = cast<uint>(stack.Pop());
                }
            }
            public class Context : System.Text.Parsing.Context
            {
                public uint value;
                public uint fromx;
            }
        }
        public class categoryRule : System.Text.Parsing.RuleParser
        {
            public categoryRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "string";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = match;
            }
            public class Context : System.Text.Parsing.Context
            {
                public string value;
            }
        }
        public class nameRule : System.Text.Parsing.RuleParser
        {
            public nameRule(string name, Scope enclosingScope, int id, Parser definition) : base(name, enclosingScope, id, definition)
            {
                ValueTypeName = "string";
            }
            public override void Enter(Stack<object> stack, ParsingData parsingData)
            {
                parsingData.PushContext(Id, new Context());
                Context context = cast<Context>(parsingData.GetContext(Id));
            }
            public override void Leave(Stack<object> stack, ParsingData parsingData, bool matched)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                if (matched)
                {
                    stack.Push(context.value);
                }
                parsingData.PopContext(Id);
            }
            public override void Link()
            {
                ActionParser a0ActionParser = GetAction("A0");
                a0ActionParser.Action = A0Action;
            }
            public void A0Action(string match, Span span, string fileName, ParsingData parsingData, ref bool pass)
            {
                Context context = cast<Context>(parsingData.GetContext(Id));
                context.value = match;
            }
            public class Context : System.Text.Parsing.Context
            {
                public string value;
            }
        }
        public override void GetReferencedGrammars()
        {
            ParsingDomain parsingDomain = Domain;
            Grammar grammar0 = parsingDomain.GetGrammar("System.Text.Parsing.stdlib");
            if (grammar0 == null)
            {
                grammar0 = new System.Text.Parsing.stdlib(parsingDomain);
            }
            ReferencedGrammars.Add(grammar0);
        }
        public override void CreateRules()
        {
            AddRuleLink(new RuleLink("newline", this, "System.Text.Parsing.stdlib.newline"));
            AddRuleLink(new RuleLink("hexdword", this, "System.Text.Parsing.stdlib.hexdword"));
            AddRule(new RuleParser("file", GetScope(), Domain.GetNextRuleId(),
                new KleeneStarParser(
                    new NonterminalParser("characterData", "characterData", 0))));
            AddRule(new characterDataRule("characterData", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("A0",
                    new SequenceParser(
                        new SequenceParser(
                            new SequenceParser(
                                new SequenceParser(
                                    new SequenceParser(
                                        new SequenceParser(
                                            new SequenceParser(
                                                new SequenceParser(
                                                    new SequenceParser(
                                                        new SequenceParser(
                                                            new SequenceParser(
                                                                new SequenceParser(
                                                                    new SequenceParser(
                                                                        new SequenceParser(
                                                                            new SequenceParser(
                                                                                new SequenceParser(
                                                                                    new SequenceParser(
                                                                                        new SequenceParser(
                                                                                            new SequenceParser(
                                                                                                new SequenceParser(
                                                                                                    new SequenceParser(
                                                                                                        new SequenceParser(
                                                                                                            new SequenceParser(
                                                                                                                new SequenceParser(
                                                                                                                    new SequenceParser(
                                                                                                                        new SequenceParser(
                                                                                                                            new SequenceParser(
                                                                                                                                new SequenceParser(
                                                                                                                                    new SequenceParser(
                                                                                                                                        new SequenceParser(
                                                                                                                                            new NonterminalParser("code", "codepoint", 0),
                                                                                                                                            new CharParser(';')),
                                                                                                                                        new NonterminalParser("name", "name", 0)),
                                                                                                                                    new CharParser(';')),
                                                                                                                                new NonterminalParser("category", "category", 0)),
                                                                                                                            new CharParser(';')),
                                                                                                                        new NonterminalParser("ignore", "ignore", 0)),
                                                                                                                    new CharParser(';')),
                                                                                                                new NonterminalParser("ignore", "ignore", 0)),
                                                                                                            new CharParser(';')),
                                                                                                        new NonterminalParser("ignore", "ignore", 0)),
                                                                                                    new CharParser(';')),
                                                                                                new NonterminalParser("ignore", "ignore", 0)),
                                                                                            new CharParser(';')),
                                                                                        new NonterminalParser("ignore", "ignore", 0)),
                                                                                    new CharParser(';')),
                                                                                new NonterminalParser("ignore", "ignore", 0)),
                                                                            new CharParser(';')),
                                                                        new NonterminalParser("ignore", "ignore", 0)),
                                                                    new CharParser(';')),
                                                                new NonterminalParser("ignore", "ignore", 0)),
                                                            new CharParser(';')),
                                                        new NonterminalParser("ignore", "ignore", 0)),
                                                    new CharParser(';')),
                                                new NonterminalParser("ignore", "ignore", 0)),
                                            new CharParser(';')),
                                        new OptionalParser(
                                            new NonterminalParser("upper", "codepoint", 0))),
                                    new CharParser(';')),
                                new OptionalParser(
                                    new NonterminalParser("lower", "codepoint", 0))),
                            new KleeneStarParser(
                                new DifferenceParser(
                                    new AnyCharParser(),
                                    new NonterminalParser("newline", "newline", 0)))),
                        new NonterminalParser("newline", "newline", 0)))));
            AddRule(new codepointRule("codepoint", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("A0",
                    new NonterminalParser("x", "hexdword", 0))));
            AddRule(new categoryRule("category", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("A0",
                    new KleeneStarParser(
                        new CharSetParser(";", true)))));
            AddRule(new nameRule("name", GetScope(), Domain.GetNextRuleId(),
                new ActionParser("A0",
                    new KleeneStarParser(
                        new CharSetParser(";", true)))));
            AddRule(new RuleParser("ignore", GetScope(), Domain.GetNextRuleId(),
                new KleeneStarParser(
                    new CharSetParser(";", true))));
        }
    }
}
